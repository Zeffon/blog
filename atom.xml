<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zeffon&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/d170c3ae4e42fa4b746724b1d7419426</icon>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zeffon.cn/"/>
  <updated>2020-06-21T14:04:13.135Z</updated>
  <id>https://www.zeffon.cn/</id>
  
  <author>
    <name>Zeffon</name>
    <email>ZeffonWu@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win10批量修改文件名</title>
    <link href="https://www.zeffon.cn/posts/e12a97ac.html"/>
    <id>https://www.zeffon.cn/posts/e12a97ac.html</id>
    <published>2020-06-21T13:31:39.000Z</published>
    <updated>2020-06-21T14:04:13.135Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录在win10系统下批量修改文件名的方法</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="生成rename-xls文件"><a href="#生成rename-xls文件" class="headerlink" title="生成rename.xls文件"></a>生成rename.xls文件</h3><p>使用win键+R cmd指令打开控制台（别关掉 ~）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chcp 65001 <span class="comment"># 先切换为编码，防止后续出现乱码</span></span><br><span class="line">$ <span class="built_in">cd</span> 需要修改文件的目录</span><br><span class="line">$ dir /b&gt;rename.xls <span class="comment"># 会在目录生成rename.xls文件</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="定制rename-xls"><a href="#定制rename-xls" class="headerlink" title="定制rename.xls"></a>定制rename.xls</h3><p>生成的rename.xls如图所示<br>第一列是<strong><code>固定为ren指令</code></strong>   第二列是<strong><code>原文件名</code></strong>   第三列是<strong><code>新文件名</code></strong><br><img src="/images/2020/06/21-rename.xls.png" width="70%" alt="rename.xls"></p><blockquote><p><strong>可以利用替换(Ctrl+h)的方式来实现批量修改文件名</strong><br><strong>如果文件名中出现有空格，需要整个文件名前后加上英文双引号</strong></p></blockquote><h3 id="执行bat批量文件"><a href="#执行bat批量文件" class="headerlink" title="执行bat批量文件"></a>执行bat批量文件</h3><ol><li>将上面xls文件(除开第一行)的内容复制</li><li>在之前的目录中新建文件ren.txt</li><li>在ren.txt文件中进行粘贴</li><li>修改ren.txt的扩展名为bat即ren.bat文件<br>在控制台执行<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .\ren.bat</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在win10系统下批量修改文件名的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>nginx.conf中server模块location</title>
    <link href="https://www.zeffon.cn/posts/f0100941.html"/>
    <id>https://www.zeffon.cn/posts/f0100941.html</id>
    <published>2020-05-11T08:29:04.000Z</published>
    <updated>2020-05-11T09:22:21.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>nginx.conf配置中，http指令块中的server模块的location是主要匹配客户端发送过来url的</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="nginx服务器匹配"><a href="#nginx服务器匹配" class="headerlink" title="nginx服务器匹配"></a>nginx服务器匹配</h3><h4 id="单个location"><a href="#单个location" class="headerlink" title="单个location"></a>单个location</h4><p>当我们访问 <code>localhost:88</code> 将会被转到 <code>/home/html</code> 目录下 主页是index.html<br>例如我们访问 <code>localhost:88/img/a.png</code> 会访问到服务器 <code>/home/nginx/img/a.png</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 88;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root /home/nginx;</span><br><span class="line">        index index.html;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h4 id="多个location"><a href="#多个location" class="headerlink" title="多个location"></a>多个location</h4><p>如果访问 <code>localhost:88/img</code> 匹配到 <code>img</code> 这样会将 <code>/img</code> 拼接到 <code>/home/demo</code> 的后面，这时候就会访问到服务器<code>/home/demo/img</code>目录下<br>例如我们访问 <code>localhost:88/img/a.png</code> 会访问到服务器 <code>/home/demo/img/a.png</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 88;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root   /home;</span><br><span class="line">        index   index.html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location /img {</span><br><span class="line">        root   /home/demo;</span><br><span class="line">        index   index.html;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>采用别名alias，这样可以自定义url上的参数<br>访问 <code>localhost:88/demo/a.png</code> 匹配 <code>demo</code> 会将demo拼接在 <code>/hemo</code> 后面，访问到服务器<code>/home/demo/a.png</code><br>访问 <code>localhost:88/static/a.png</code> 识别出别名alias 会将 <code>static</code> 替换 <code>/home/demo</code>，也访问到服务器<code>/home/demo/a.png</code><br>所以<code>localhost:88/demo/a.png</code> 和 <code>localhost:88/static/a.png</code> 两者可以达到同样的效果，也可以同时使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 88;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root   /home;</span><br><span class="line">        index   index.html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location /demo {</span><br><span class="line">        root   /home;</span><br><span class="line">        index   index.html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location /static {</span><br><span class="line">        alias   /home/demo;</span><br><span class="line">        index   index.html;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="location匹配规则"><a href="#location匹配规则" class="headerlink" title="location匹配规则"></a>location匹配规则</h3><ol><li><p>空格 ：默认匹配，普通匹配<br>location / {<br> root /home;<br>}</p></li><li><p>= ：精确匹配<br>location = /demo/img/a.png {<br> root /home;<br>}</p></li><li><p>~* ：匹配正则表达式，不区分大小写<br>#符合图片的显示<br>location ~* .(GIF|jpg|png|jpeg) {<br> root /home;<br>}</p></li><li><p>~ ：匹配正则表达式，区分大小写<br>#GIF必须大写才能匹配到<br>location ~ .(GIF|jpg|png|jpeg) {<br> root /home;<br>}</p></li><li><p>^~ ：以某个字符路径开头<br>location ^~ /demo/img {<br> root /home;<br>}</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx.conf配置中，http指令块中的server模块的location是主要匹配客户端发送过来url的&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://www.zeffon.cn/categories/Web/"/>
    
    
      <category term="nginx" scheme="https://www.zeffon.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx.conf配置文件</title>
    <link href="https://www.zeffon.cn/posts/7a42ed0e.html"/>
    <id>https://www.zeffon.cn/posts/7a42ed0e.html</id>
    <published>2020-05-04T02:47:06.000Z</published>
    <updated>2020-05-11T08:27:51.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Nginx的核心配置文件nginx.conf的配置结构和指令语法</p><a id="more"></a><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>想要使用好nginx，绕不开其核心配置文件的熟练掌握，以下主要是nginx.conf的配置结构和相关的指令语法<br><img src="/images/2020/05/04-01-nginx.conf.png" width="70%" alt="nginx.conf"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="main-全局配置"><a href="#main-全局配置" class="headerlink" title="main 全局配置"></a>main 全局配置</h3><p>main配置影响nginx全局的指令。<br>一般有运行nginx服务器的用户组、允许运行的工作进行数worker process、nginx进程pid存放路径、日志存放路径，配置文件引入等。</p><ol><li><p>设置work进程的用户，指的是linux中的用户，会涉及到nginx操作目录或文件的一些权限，默认是<code>nobody</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user root</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>work工作进程数设置，一般来说CPU有几个，就设置几个，或者设置N-1也可以</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 1;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>设置nginx进程 pid</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pid logs/nginx.pid</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>nginx日志级别(级别从左到右越来越大)<br>debug -&gt; info -&gt; notice -&gt; warn -&gt; error -&gt; crit -&gt; alert -&gt; emerg</p></li><li><p>nginx日志存放路径设置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log  logs/error.log;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="events-工作模式配置"><a href="#events-工作模式配置" class="headerlink" title="events 工作模式配置"></a>events 工作模式配置</h3><p>配置影响nginx服务器或与用户的网络连接。<br>有每个工作进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">events {</span><br><span class="line">    # 默认使用epoll（多路复用）</span><br><span class="line">    use epoll;</span><br><span class="line">    # 每个work工作进行允许连接的客户端最大连接数</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="http-指令块配置"><a href="#http-指令块配置" class="headerlink" title="http 指令块配置"></a>http 指令块配置</h3><p>http是指令块，针对http网络传输的一些指令配置<br>在http模块中可以嵌套多个server，配置相关代理、设置缓存、自定义日志（日志切割）等绝大多数功能和第三方模块的配置。<br>如外部配置文件引入、日志自定义、是否使用sendfile传输文件、连接超时时间、gzip压缩等。</p><ol><li><p>引入外部配置文件，提高可读性，避免单个文件配置过大</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /usr/<span class="built_in">local</span>/nginx/conf/vhosts/*.conf;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>自定义日志</p><table><thead><tr><th align="center">参数名</th><th align="center">参数意义</th></tr></thead><tbody><tr><td align="center">$romote_addr</td><td align="center">客户端ip</td></tr><tr><td align="center">$romote_user</td><td align="center">远程客户端用户名，一般为”-“</td></tr><tr><td align="center">$time_local</td><td align="center">时间与时区</td></tr><tr><td align="center">$request</td><td align="center">请求url与method</td></tr><tr><td align="center">$status</td><td align="center">响应状态码</td></tr><tr><td align="center">$body_bytes_send</td><td align="center">响应客户端内容字节数</td></tr><tr><td align="center">$http_referer</td><td align="center">记录用户从哪个链接跳转过来的</td></tr><tr><td align="center">$http_user_agent</td><td align="center">用户所使用的代理，一般都是浏览器</td></tr><tr><td align="center">$http_x_forwarded_for</td><td align="center">通过代理服务器来记录客户端的ip</td></tr></tbody></table></li></ol><ol><li><p>sendfile使用高效文件传输，提升传输性能。启用后才能使用tcp_nopush,是指当数据表累计一定大小才发送，提高效率</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendfile      on;</span><br><span class="line">tcp_nopush    on;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>keepalive_timeout 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源损耗</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout 65;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>gzip启用压缩，html/js/css等静态资源压缩后传输会更快</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="server-模块配置"><a href="#server-模块配置" class="headerlink" title="server 模块配置"></a>server 模块配置</h3><h4 id="location-路由规则"><a href="#location-路由规则" class="headerlink" title="location 路由规则"></a>location 路由规则</h4><p>server可以在http指令块中设置多个虚拟主机</p><ul><li>listen 监听端口</li><li>server_name localhost、ip、域名</li><li>location 请求路由映射、匹配拦截</li><li>root 请求位置</li><li>index 首页设置</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h4 id="upstream-集群-内网服务器"><a href="#upstream-集群-内网服务器" class="headerlink" title="upstream 集群 内网服务器"></a>upstream 集群 内网服务器</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx的核心配置文件nginx.conf的配置结构和指令语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://www.zeffon.cn/categories/Web/"/>
    
    
      <category term="nginx" scheme="https://www.zeffon.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基本认知</title>
    <link href="https://www.zeffon.cn/posts/5d519c47.html"/>
    <id>https://www.zeffon.cn/posts/5d519c47.html</id>
    <published>2020-04-27T00:39:29.000Z</published>
    <updated>2020-04-26T16:44:52.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Nginx作为最常见的服务器，我们不但要知道能将项目部署在上面，还要知道其相关原理。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Nginx方向代理"><a href="#Nginx方向代理" class="headerlink" title="Nginx方向代理"></a>Nginx方向代理</h3><p>大多时候我们使用Nginx时，可能都会使用Nginx反向代理的功能。那么什么是反向代理呢？<br>在理解什么是Nginx反向代理时，我们先得知道什么是正向代理。</p><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>正向代理服务器是<code>客户端</code>请求<code>目标服务器</code>之间的一个代理服务器。<br>一般我们发送了一个请求后，它会先经过代理服务器，然后在经过代理服务器转发请求到<code>指定的目标服务器</code>，获得内容后将结果最终响应给客户端。<br><img src="/images/2020/04/27-01-forward-proxy.png" width="70%" alt="正向代理"></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>反向代理：用户请求目标服务器，由代理服务器决定访问哪个ip目标服务器<br><img src="/images/2020/04/27-02-reverse-proxy.png" width="70%" alt="反向代理"></p><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>理解这两种代理的关键在于代理服务器所代理的对象是什么，正向代理代理的是<code>客户端</code>，我们需要在客户端进行一些代理的设置。<br>而反向代理代理的是<code>服务器</code>，作为客户端的我们是我们是不知道代理服务器具体访问哪个ip目标服务器的。</p><h3 id="Nginx进程模型"><a href="#Nginx进程模型" class="headerlink" title="Nginx进程模型"></a>Nginx进程模型</h3><p>Nginx作为高性能的服务器，离不开良好进程模型的支持。<br>Nginx有Master主进程和Worker工作进程。对于每个Worker进程来说，它们都是独立的进程，互相之间不会影响。<br>Master进程通过发指令信号的形式通知Worker工作进程</p><img src="/images/2020/04/27-03-process-model.png" width="70%" alt="进程模型"><ul><li>Master进程主要用来管理Worker进程</li></ul><ol><li>Master进程接收来自外界的信号</li><li>Master进程向各Worker进程发送信号</li><li>Master进程监控Worker进程的运行状态</li><li>当Worker进程异常退出后，会自动重新启动新的Worker进程。</li></ol><ul><li>我们可以在配置文件<code>nginx.conf</code>配置Worker进程的数量<br><code>worker_processes 2</code></li></ul><h3 id="Nginx请求机制"><a href="#Nginx请求机制" class="headerlink" title="Nginx请求机制"></a>Nginx请求机制</h3><p>对于Nginx为什么性能这么高，能达到这么高的并发,最主要的是有<code>Worker抢占机制</code>和<code>处理请求的模型是异步非阻塞</code>(多路复用器)</p><h4 id="传统服务器-同步阻塞"><a href="#传统服务器-同步阻塞" class="headerlink" title="传统服务器-同步阻塞"></a>传统服务器-同步阻塞</h4><p>传统服务器中，客户端发起一个请求，如果处理这个请求的工作进程由于处理的时间比较长被阻塞住了，那么它将不会处理后续其它Client的请求。Master进程会fork出新的Worker2进程来处理。很显然这种方式是不好的，如果刚fork的Worker2进程也被阻塞的话，Master又只能fork出现Worker进程。在高并发情况，发生阻塞的话，服务器会开很多进程来处理，这对服务器资源开销是非常大的。这就是同步阻塞的弊端。这在高并发情况下，这无疑是一场灾难。</p><img src="/images/2020/04/27-04-traditional-event-processing.png" width="70%" alt="传统服务器事件处理"><h4 id="Nginx服务器-异步非阻塞"><a href="#Nginx服务器-异步非阻塞" class="headerlink" title="Nginx服务器-异步非阻塞"></a>Nginx服务器-异步非阻塞</h4><p>Nginx服务器，客户端发起一个请求，即便处理这个请求的工作进程1被阻塞住了，是不会影响它处理其它客户端的请求的，这样就不需要fork新的Worker进程来处理其它客户端的请求。这是异步非阻塞的好处。</p><img src="/images/2020/04/27-05-nginx-event-processing.png" width="70%" alt="Nginx服务器事件处理"><h4 id="Nginx-Worker抢占机制"><a href="#Nginx-Worker抢占机制" class="headerlink" title="Nginx Worker抢占机制"></a>Nginx Worker抢占机制</h4><p>当一个请求过来时，会有一个accept_mutex 互斥锁。Worker进程会抢占这个锁，抢到后才能处理相对应客户端的请求，假设Worker1抢到这个锁后会建立关系，Worker1就会处理这个请求，将这个请求进行解析、处理、响应，而Worker2和Worker3没抢到则不需操作。</p><img src="/images/2020/04/27-06-worker-seize.png" width="70%" alt="Nginx服务器事件处理"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx作为最常见的服务器，我们不但要知道能将项目部署在上面，还要知道其相关原理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://www.zeffon.cn/categories/Web/"/>
    
    
      <category term="nginx" scheme="https://www.zeffon.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存雪崩、穿透</title>
    <link href="https://www.zeffon.cn/posts/aacd080c.html"/>
    <id>https://www.zeffon.cn/posts/aacd080c.html</id>
    <published>2020-04-20T03:09:24.000Z</published>
    <updated>2020-04-17T03:44:14.320Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在使用redis作为缓存层时，有时候不好的程序设计会导致Redis缓存雪崩和穿透问题。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><strong><code>雪崩</code></strong> ：Redis中有大量的key，会设置过期时间。如果过期时间有太多重合的，那么在某个时间点会有大量<code>key失效了</code>或是由于<code>Redis宕机</code>了<br>恰好这时候有很大很大的流量流入进来。那么这个时候所有的请求不会再<code>经过Redis缓存层</code>，而是都会直接打在数据库上，数据库可能会处理不过来导致<code>宕机崩溃</code>。</p><p>原本是会经过缓冲层<br><img src="/images/2020/04/20-aualanche-01.png" width="70%" alt="雪崩"><br>由于缓存失效或者宕机<br><img src="/images/2020/04/20-aualanche-02.png" width="70%" alt="雪崩"><br>请求直接访问Mysql<br><img src="/images/2020/04/20-aualanche-03.png" width="70%" alt="雪崩"></p><p><strong><code>预防方案</code></strong> ：</p><ol><li>采用Key永不过期机制</li><li>采用key过期时间错开(推荐)</li><li>多缓存结合使用</li></ol><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><strong><code>穿透</code></strong> ： 接受一个id，先从redis查询有没有对应值，没有再从数据中查询，查询结果进行判断，<code>有数据</code>才将其写进redis里。下次再查询就不要查询数据库了，而redis起了一个缓存的作用。但是这种情况只适合<code>id是存在数据库</code>。如果用户传入一个非法、数据库不存在的id，那么一直使用该id请求的话，程序就会一直访问数据库，这样无法缓存了，直接把缓存穿透了。</p><p><strong><code>处理方案</code></strong> ：不管数据库查询的结果有没有数据，都将其进行缓存。把空的数据(空字符串、空对象、空数组、空列表)缓存起来。（就是针对一个不存在的key去为它设置一个空值，即使后面我们可能会使用这个不存在的key时，set时也会把之前的空值覆盖的）</p><p><strong><code>布隆过滤器</code></strong> ： 可以迅速地判断一个元素是否在一个集合里，相当一种拦截器，是在redis前面进行拦截。以HashMap的Key-Value的形式可以在 O(1) 的时间复杂度内返回结果，效率奇高。但是存储容量占比高，数据量太多时会占据内存并且有1%误判率的缺点。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><code>缓存穿透</code>是<code>单个key</code>的大量请求打在数据库上，<code>缓存雪崩</code>是<code>大量key</code>失效导致大量请求直接打在数据库</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用redis作为缓存层时，有时候不好的程序设计会导致Redis缓存雪崩和穿透问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://www.zeffon.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Jpa返回自定义对象</title>
    <link href="https://www.zeffon.cn/posts/f2ed05e0.html"/>
    <id>https://www.zeffon.cn/posts/f2ed05e0.html</id>
    <published>2020-04-13T00:51:53.000Z</published>
    <updated>2020-04-11T13:20:56.924Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在使用Jpa作为持久层时，Repository层的返回对象往往是模型继承JpaRepository中的对象，想要直接使用其它对象是不行的。那么我们该怎么处理呢？</p><a id="more"></a><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>在使用Jpa作为持久层时，Repository层的返回对象往往是模型继承JpaRepository中的对象，想要直接使用其它对象是不行的。如果我们连表后数据不能作为一个对象返回，那么在去处理或者再去查询数据库都是不好的。所以我们在连表操作时，通过<code>@Query注解</code>里的<code>new 自定义的对象</code>,将我们需要的字段<code>以参数形式</code>传入自定义对象构造函数中，最后返回对象即可。</p><p>还有一种方法：就是将查询的处理以Object对象返回，然后需要转成指定的对象。(不推荐)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h3><ol><li><p>通常Repository层写时，我们只能返回将模型Dormitory的数据返回，并不能返回其它的对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DormitoryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Dormitory</span>, <span class="title">Long</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>如果我们连表的话，肯定会想返回自定义的对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DormitoryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Dormitory</span>, <span class="title">Long</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/** 获取楼号和房间号 */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT new com.zeffon.yusu.bo.DormitoryAndRoomBO(f.id, f.name, c.id, c.name)\n"</span> +</span><br><span class="line">            <span class="string">"FROM Dormitory c\n"</span> +</span><br><span class="line">            <span class="string">"LEFT JOIN Dormitory f ON f.id = c.parentId\n"</span> +</span><br><span class="line">            <span class="string">"WHERE c.id = :rid"</span>)</span><br><span class="line">    <span class="function">DormitoryAndRoomBO <span class="title">findDormitoryAndRoom</span><span class="params">(Long rid)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>对应的自定义对象DormitoryAndRoomBO需要有相对应的构造函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DormitoryAndRoomBO</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long roomId;</span><br><span class="line">    <span class="keyword">private</span> String room;</span><br><span class="line">    <span class="keyword">private</span> Long dormitoryId;</span><br><span class="line">    <span class="keyword">private</span> String dormitory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不想写这么麻烦的构造函数，也可以使用@AllArgsConstructor注解，不过参数要注意顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DormitoryAndRoomBO</span><span class="params">(Long dormitoryId, String dormitory, Long roomId, String room)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.roomId = roomId;</span><br><span class="line">        <span class="keyword">this</span>.room = room;</span><br><span class="line">        <span class="keyword">this</span>.dormitoryId = dormitoryId;</span><br><span class="line">        <span class="keyword">this</span>.dormitory = dormitory;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h3><p>如果返回的是列表也很简单，只需要修改repository中对应方法的返回类型即可</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DormitoryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Dormitory</span>, <span class="title">Long</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/** 获取楼号和房间号 */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT new com.zeffon.yusu.bo.DormitoryAndRoomBO(f.id, f.name, c.id, c.name)\n"</span> +</span><br><span class="line">            <span class="string">"FROM Dormitory c\n"</span> +</span><br><span class="line">            <span class="string">"LEFT JOIN Dormitory f ON f.id = c.parentId\n"</span> +</span><br><span class="line">            <span class="string">"WHERE c.id = :rid"</span>)</span><br><span class="line">    <span class="function">List&lt;DormitoryAndRoomBO&gt; <span class="title">findDormitoryAndRoom</span><span class="params">(Long rid)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Jpa作为持久层时，Repository层的返回对象往往是模型继承JpaRepository中的对象，想要直接使用其它对象是不行的。那么我们该怎么处理呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
      <category term="JPA" scheme="https://www.zeffon.cn/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Java注解检验器</title>
    <link href="https://www.zeffon.cn/posts/cb1a6b6.html"/>
    <id>https://www.zeffon.cn/posts/cb1a6b6.html</id>
    <published>2020-04-06T14:19:01.000Z</published>
    <updated>2020-04-06T16:03:44.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>平时在写参数校验可能大多会在service层使用if语句的方式来判断，其实我们可以很优雅的使用参数校验–注解检验器</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时在写参数校验可能大多会在service层使用if语句的方式来判断，其实我们可以很优雅的使用参数校验–注解检验器。<br>注解验证器是通过注解的方式给一些字段、方法、类加上了注解，不同的注解有着不同的校验，这样能帮助我们更优雅的写出代码来，可读性也是不错。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h3><p>JSR-303 提供一个验证标准Validation，我们会常常使用到的：</p><ol><li><code>@Min</code>和<code>@Max</code> 最小和最大数限制</li><li><code>@Positive</code> 整数校验</li><li><code>@NotBlank</code> 校验字符串非空，长度大于0</li><li><code>@Email</code> 邮箱校验</li><li><code>@Range</code> 范围校验</li><li><code>@Lenght</code> 长度校验</li><li><code>@NotNull</code> 不为空检验</li><li><code>@Future</code> 必须是将来日期校验<br>… …</li></ol><h3 id="简单字段校验"><a href="#简单字段校验" class="headerlink" title="简单字段校验"></a>简单字段校验</h3><p><strong>JSR-303</strong>的注解用在简单字段上，如要求id为整数，最大不可超过10</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Hello</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(@Positive @Max(value=<span class="number">10</span>, message=<span class="string">"不用超过10咯"</span>)</span> Integer id) </span>{</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>但是这样是不能开启验证的，我们需要的类上加上注解<code>@Validated</code>才能使注解验证生效。</strong>（还可以自定义错误消息）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 这里加上 @Validated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Hello</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(@Positive @Max(value=<span class="number">10</span>, message=<span class="string">"不用超过10咯"</span>)</span> Integer id) </span>{</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Body校验"><a href="#Body校验" class="headerlink" title="Body校验"></a>Body校验</h3><p>有时候我们需要校验body里面的参数校验</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(@RequestBody Person person)</span> </span>{</span><br><span class="line">        System.out.println(person.age);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line">pubilc <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Lenght</span>(min=<span class="number">2</span>, max=<span class="number">10</span>, message=<span class="string">"别超出范围"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这时候还是不能校验body里面的参数，原因是校验没有生效。类上的<code>@Validated</code>是给该类下字段开启校验的，而我们要校验的age是在Person类下，那我们需要跑到Person类打上注解吗？并不需要, 只需要在对应传入参数打上就行了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(@RequestBody @Validated Person person)</span> </span>{ <span class="comment">// 这里加上 @Validated</span></span><br><span class="line">        System.out.println(person.age);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="级联校验"><a href="#级联校验" class="headerlink" title="级联校验"></a>级联校验</h3><p>有时候传入的body对象又包含了对象，那这时候又如何校验呢？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(@RequestBody Person person)</span> </span>{</span><br><span class="line">        System.out.println(person.age);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line">pubilc <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Lenght</span>(min=<span class="number">2</span>, max=<span class="number">10</span>, message=<span class="string">"别超出范围"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line">pubilc <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">    <span class="meta">@Lenght</span>(min=<span class="number">2</span>, max=<span class="number">10</span>, message=<span class="string">"别超出范围"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>那显然对Car类的name校验是没有成功，其没有生效。需要在Person类下 car字段上打上<code>@Valid</code> <strong>标志级联检验</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line">pubilc <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Lenght</span>(min=<span class="number">2</span>, max=<span class="number">10</span>, message=<span class="string">"别超出范围"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 这里加上 @Valid</span></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><code>@Validated</code>和<code>@Valid</code><br>这两个都是可以用来校验的，使用的场景和功能上有点区别，但是总体上是差不多的，两者都可以用来开启校验。<code>@Valid</code>是Java提供的一种标准，而<code>@Validated</code>是Spring对<code>@Valid</code>的扩展，所以说两者是很相似的。一般会使用<code>@Validated</code>来开启验证，而<code>@Valid</code>则用在级联检验上</p></blockquote><h3 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h3><ol><li><p>编写注解类</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span> <span class="comment">// 注解里的注释加入文档</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 注解保留到运行阶段</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.TYPE, ElementType.FIELD}) <span class="comment">// 目标使用类上和方法上</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = PasswordValidator<span class="class">.<span class="keyword">class</span>) // 关联逻辑类，编写具体逻辑判断（没有指定的话会报<span class="title">HV000030</span>错）</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">PasswordEqual</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> <span class="keyword">default</span> 4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> <span class="keyword">default</span> 6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "password are not equal"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> {};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>关联注解类(具体判断逻辑)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要实现ConstraintValidator并需要两个参数 </span></span><br><span class="line"><span class="comment"> * 第一个参数是指定注解类 第二个参数：自定义注解修饰的目标的类型</span></span><br><span class="line"><span class="comment"> * 需要覆盖两个方法initialize()和isValid()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">PasswordEqual</span>, <span class="title">PersonDTO</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(PasswordEqual constrainAnnotation)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.min = constrainAnnotation.min();</span><br><span class="line">        <span class="keyword">this</span>.max = constrainAnnotation.max();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(PersonDTO personDTO, ConstraintValidatorContext constraintValidatorContext)</span> </span>{</span><br><span class="line">        String password1 = personDTO.getPassword1();</span><br><span class="line">        String password2 = personDTO.getPassword2();</span><br><span class="line">        <span class="keyword">boolean</span> match = password1.equals(password2);</span><br><span class="line">        <span class="keyword">return</span> match;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>使用在需要校验的类上</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@PasswordEqual</span>(min=<span class="number">1</span>) <span class="comment">// 这里使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDTO</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password1;</span><br><span class="line">    <span class="keyword">private</span> String password2;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="相关异常"><a href="#相关异常" class="headerlink" title="相关异常"></a>相关异常</h3><h4 id="HV000030"><a href="#HV000030" class="headerlink" title="HV000030"></a>HV000030</h4><p>HV000030: No validator could be found for type<br>原因是注解类PasswordEqual没有与关联类PasswordValidator，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint</span>(validatedBy = PasswordValidator<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></tbody></table></figure></div><h4 id="HV000028"><a href="#HV000028" class="headerlink" title="HV000028"></a>HV000028</h4><p>HV000028: Unexpected exception during isValid call<br>原因是PasswordValidator的方法isValid出现异常了，具体报错需要打断点分析即可。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(PersonDTO personDTO, ConstraintValidatorContext constraintValidatorContext)</span> </span>{</span><br><span class="line">    String password1 = personDTO.getPassword1();</span><br><span class="line">    String password2 = personDTO.getPassword2();</span><br><span class="line">    <span class="keyword">boolean</span> match = password1.equals(password2);</span><br><span class="line">    <span class="keyword">return</span> match;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时在写参数校验可能大多会在service层使用if语句的方式来判断，其实我们可以很优雅的使用参数校验–注解检验器&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
      <category term="annotation" scheme="https://www.zeffon.cn/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java JPA 原生SQL和JPQL</title>
    <link href="https://www.zeffon.cn/posts/5d8d4396.html"/>
    <id>https://www.zeffon.cn/posts/5d8d4396.html</id>
    <published>2020-03-31T09:05:41.000Z</published>
    <updated>2020-03-30T14:57:24.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录Java JPA使用jPQL和原生SQL的方式获取数据。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目中，通常会使用<code>jpa</code>或者<code>mybatis</code> ORM框架来作为Java持久层。或许我们习惯性地认为JPA不能处理复杂的SQL语句。<br>其实这是不太正确地对JPA的认识。Java jpa其实是非常强大的，它是有多种方式操作数据库来获取数据，常见是<code>Repository持久层的方法命名规则</code>来获取数据。这种是大家最常见的使用方式，它对于简单的SQL语句真的非常方便，面对复杂SQL查询可能把写方法名写得很长很不优雅。这时候我们可以采取其他的方式来获取数据–<code>原生SQL</code>和<code>JPQL</code>。</p><p>在 <a href="14d38de7.html"><strong>spring data jpa 方法命名规则</strong></a> 一文中介绍jpa方法的命名规则。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h3><p>有四张数据表：3张业务表activity、coupon、category，1张中间表coupon_category。对此在Java中需要3个模型(中间表无业务操作，故不需要建立模型)。</p><p><strong><code>Activity</code></strong> &lt;— 一对多 —&gt; <strong><code>Coupon</code></strong> &lt;— 多对多(中间表coupon_category) —&gt; <strong><code>Category</code></strong></p><p>1. 活动模型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 导航属性 1对多关联Coupon模型中的activityId字段</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"activityId"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coupon&gt; couponList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2. 优惠券模型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long activityId;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Date startTime;</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="comment">// 导航属性 多对多关联Category</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(fetch = FetchType.LAZY, mappedBy = <span class="string">"couponList"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categoryList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2. 分类模型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 导航属性 多对多关联Coupon 加入中间表coupon_category，以category_id和coupon_id进行桥接</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"coupon_category"</span>,</span><br><span class="line">            joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"category_id"</span>),</span><br><span class="line">            inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"coupon_id"</span>))</span><br><span class="line">    <span class="keyword">private</span> List&lt;Coupon&gt; couponList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="原生SQL"><a href="#原生SQL" class="headerlink" title="原生SQL"></a>原生SQL</h3><p>在方法上打上<code>@Query</code>,并且传入<code>nativeQuery=true</code>和 <code>value="sql原生语句"</code>。</p><ol><li>传入参数方式：<code>cid -&gt; :cid , now -&gt; :now</code> 也可以<code>cid -&gt; ?1 , now -&gt; ?2</code> (比较推荐<code>前者</code>，可读性比较高)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(nativeQuery=<span class="keyword">true</span>,</span><br><span class="line">        value = <span class="string">"select * from coupon c\n"</span> +</span><br><span class="line">        <span class="string">"join coupon_category cc on c.id = cc.coupon_id\n"</span> +</span><br><span class="line">        <span class="string">"join category ca on ca.id = cc.category_id\n"</span> +</span><br><span class="line">        <span class="string">"join activity a on a.id = c.activity_id\n"</span> +</span><br><span class="line">        <span class="string">"where c.id = :cid\n"</span> +</span><br><span class="line">        <span class="string">"and a.startTime &lt; :now \n"</span> +</span><br><span class="line">        <span class="string">"and a.endTime &gt; :now\n"</span>)</span><br><span class="line"><span class="function">List&lt;Coupon&gt; <span class="title">findByCategory</span><span class="params">(Long cid, Date now)</span></span>;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><blockquote><p><strong><code>小技巧</code></strong> 编写@Query注解里面的SQL语句时，按住alt+enter会弹出选择框，选择<code>Edit Generic SQL Fragment</code>选项。随后我们进入一个SQL编写的控制面板。在这里是与@Query注解里面是同步的，有智能提示，回车也方便。</p></blockquote><h3 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h3><p>JPQL全称Java Persistence Query Language，它是一种查询语言，具有与SQL 相类似的特征，JPQL是完全面向对象的，具备继承、多态和关联等特性，和hibernate的HQL很相似。</p><p>1. 由于JPQL操作的是模型对象而不再是数据库的表，因此这里的字段属性需要与模型中的字段保持一致</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT c from Coupon c\n"</span> +</span><br><span class="line">        <span class="string">"join c.categoryList ca\n"</span> +</span><br><span class="line">        <span class="string">"join Activity a on a.id = c.activityId\n"</span> +</span><br><span class="line">        <span class="string">"where ca.id = :cid\n"</span> +</span><br><span class="line">        <span class="string">"and a.startTime &lt; :now \n"</span> +</span><br><span class="line">        <span class="string">"and a.endTime &gt; :now\n"</span>)</span><br><span class="line"><span class="function">List&lt;Coupon&gt; <span class="title">findByCategory</span><span class="params">(Long cid, Date now)</span></span>;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>由于Coupon中有导航属性categoryList，可以通过模型让Coupon与Category创建多对多联系。对此在编写JPQL时就不要像原生SQL语句那样要借助中间表coupon_category</p></blockquote><h3 id="非幂等性操作"><a href="#非幂等性操作" class="headerlink" title="非幂等性操作"></a>非幂等性操作</h3><p>首先<code>JPQL不支持INSERT</code>，但是UPDATE,DELETE操作是支持的。可能是jpa的理念就是更加注重别用SQL语句<br>而原生的是可以支持INSERT,UPDATE,DELETE</p><ol><li>加上<code>@Modifying</code>注解标注该操作是非查询操作，不然是会报错的。还可以加上事务<code>@Transactional</code>注解<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"update Activity set\n"</span> +</span><br><span class="line">        <span class="string">"name = :name\n"</span> +</span><br><span class="line">        <span class="string">"where id = :id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateTitle</span><span class="params">(Long id, String name)</span></span>;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
      <category term="JPA" scheme="https://www.zeffon.cn/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式</title>
    <link href="https://www.zeffon.cn/posts/397f8d1b.html"/>
    <id>https://www.zeffon.cn/posts/397f8d1b.html</id>
    <published>2020-03-23T09:26:37.000Z</published>
    <updated>2020-03-27T04:15:19.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录Java正则表达式的使用以及提取HTML文本信息</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则表达式定义一个搜索模式的字符串，我们可以用来搜索、编辑或处理文本。<br>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。<br>在Java中，java.util.regex是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：<code>Pattern</code>和<code>Matcher Pattern</code>。</p><blockquote><p>Pattern是一个正则表达式经编译后的表现模式。Matcher的一个对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。所以在使用Java正则表达式时，需要先有一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后实例一个Matcher对象在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><table><thead><tr><th align="center">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">\</td><td align="left">将下一字符标记为特殊字符、文本、反向引用或八进制转义符</td></tr><tr><td align="center">^</td><td align="left">从字符开始匹配</td></tr><tr><td align="center">$</td><td align="left">从字符末尾匹配</td></tr><tr><td align="center">*</td><td align="left">匹配0次或者无限多次</td></tr><tr><td align="center">+</td><td align="left">匹配1次或者无限多次</td></tr><tr><td align="center">?</td><td align="left">匹配0次或者1次。当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是<code>非贪心的</code>。非贪心取短，贪心取长</td></tr><tr><td align="center">[]</td><td align="left">[]里面的关系是或关系</td></tr><tr><td align="center">[^]</td><td align="left">[]内的^是非字符, 表示取反</td></tr><tr><td align="center">[-]</td><td align="left">[]内的-是连续字符, 表示字符连续下去</td></tr><tr><td align="center">.</td><td align="left">匹配除换行符\n之外其它所有字符</td></tr><tr><td align="center">\d</td><td align="left">匹配数字字符, 等同于匹配[0-9]</td></tr><tr><td align="center">\D</td><td align="left">匹配非数字字符, 等同于匹配[^0-9]</td></tr><tr><td align="center">\w</td><td align="left">匹配任何字类字符, 包括下划线, 等同于匹配[A-Za-z0-9_]</td></tr><tr><td align="center">\W</td><td align="left">匹配任何非单词字符, 等同于匹配[^A-Za-z0-9_]</td></tr><tr><td align="center">\s</td><td align="left">匹配任何空白字符，包括空格、回车、制表符、换页符等。等同于匹配[\f\n\r\t\v]</td></tr><tr><td align="center">\S</td><td align="left">匹配任何非空白字符。等同于匹配[^\f\n\r\t\v]</td></tr></tbody></table><p><a href="http://www.regexplanet.com/advanced/java/index.html" target="_blank" rel="noopener">Java 在线表达式工具</a></p><h3 id="Pattern类和Matcher类"><a href="#Pattern类和Matcher类" class="headerlink" title="Pattern类和Matcher类"></a>Pattern类和Matcher类</h3><p>java正则表达式通过java.util.regex包下的<code>Pattern类</code>与<code>Matcher类</code>实现。</p><ol><li>通过正则表达式创建模式对象Pattern。</li><li>通过模式对象 Pattern，根据指定字符串创建匹配对象 Matcher。</li><li>通过匹配对象 Matcher，根据正则表达式操作字符串。</li></ol><h4 id="Pattern常见API"><a href="#Pattern常见API" class="headerlink" title="Pattern常见API"></a>Pattern常见API</h4><ol><li>split() 在此模式的匹配周围拆分给定的输入序列。返回的是String[]数组</li><li>matcher() 创建一个匹配器，该匹配器将使给定输入与此模式匹配</li><li>compile() 将给定的正则表达式编译为模式<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pattern.matcher(String regex,CharSequence input) 用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串.</span></span><br><span class="line">Boolean res1 = Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"123"</span>); <span class="comment">// 返回true</span></span><br><span class="line">Boolean res2 = Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"123abc"</span>); <span class="comment">// 返回false,需要匹配到所有字符串才能返回true,这里abc不能匹配到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// split() 在此模式的匹配周围拆分给定的输入序列。返回的是String[]数组</span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</span><br><span class="line">String[] res = pattern.split(<span class="string">"年龄:18手机:13800000000"</span>); <span class="comment">// 结果： [年龄:, 手机:]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回pattern对象(\d+) 也就是返回该Matcher对象是由哪个Pattern对象的创建的</span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">"123abc123"</span>);</span><br><span class="line">Pattern res = matcher.pattern();</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h4 id="Matcher常见API"><a href="#Matcher常见API" class="headerlink" title="Matcher常见API"></a>Matcher常见API</h4><ol><li>start() 返回上一个匹配项的起始索引</li><li>end() 返回最后一个匹配字符后的偏移量</li><li>find() 尝试查找与模式匹配的输入序列的下一个子序列</li><li>group() 返回在上一个匹配操作期间给定组捕获的输入子序列<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Pattern p = Pattern.compile(<span class="string">"\\d+"</span>);</span><br><span class="line">Matcher m1 = p.matcher(<span class="string">"abc123efg"</span>);</span><br><span class="line">Boolean a1 = m1.find(); <span class="comment">// 匹配到了123, 结果: true</span></span><br><span class="line">Integer a2 = m1.start(); <span class="comment">// 结果: 3,返回的是123中1的起始索引</span></span><br><span class="line">Integer a3 = m1.end(); <span class="comment">// 结果: 6,返回的是123后的偏移量</span></span><br><span class="line">String a4 = m1.group(); <span class="comment">// 结果: 123</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="爬虫案例"><a href="#爬虫案例" class="headerlink" title="爬虫案例"></a>爬虫案例</h3><p>HTML爬虫思路:</p><ol><li>明确自己想要爬去的网站，获取它的url </li><li>获取数据：根据想爬取的信息在网站定位标签 </li><li>分析数据：分析自己所获取到的信息，进行正则匹配 </li><li>数据精炼：通过列表、字典的操作，将数据精炼出来 </li><li>保存处理：对所精炼的数据保存至数据库</li></ol><p>在定位到自己所需要的HTML标签后，需要获取标签内的所有字符。在正则表达式有三种方式可以获取所有字符：<code>/w/W</code> 、 <code>/s/S</code> 和 <code>.</code></p><blockquote><p>这里以获取腾讯视频首播影院–名称和简介为例<br><code>([\\s\\S]*?)</code>中<code>\\s</code>两个<code>\</code>是在Java需要一个<code>\</code>来转义。<code>[]</code>内是匹配所有字符，<code>*</code>是匹配0次或者无限多次，<code>?</code>是非贪婪模式，<code>()</code>是将其进行分组处理</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zeffon.bait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.ResourceAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取腾讯视频首播影院--名称和简介</span></span><br><span class="line"><span class="comment"> * Create by Zeffon on 2020/3/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenxunTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span> </span>{</span><br><span class="line">        String html = fetchHtml();</span><br><span class="line">        List&lt;String&gt; res = analysis(html);</span><br><span class="line">        System.out.println(Arrays.toString(res.toArray()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fetchHtml</span><span class="params">()</span> </span>{</span><br><span class="line">        String url = <span class="string">"https://v.qq.com/channel/movie"</span>;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        setEncode(restTemplate); <span class="comment">// 解决中文乱码问题</span></span><br><span class="line">        String html = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            html = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (ResourceAccessException e) {</span><br><span class="line">            System.out.println(<span class="string">"连接校园网超时"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">analysis</span><span class="params">(String html)</span> </span>{</span><br><span class="line">        String rootPattern = <span class="string">"&lt;div class=\"figure_detail figure_detail_two_row  \"&gt;([\\s\\S]*?)&lt;/div&gt;"</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(rootPattern);</span><br><span class="line">        Matcher matcher = pattern.matcher(html);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取到所匹配的分组数据</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) {</span><br><span class="line"><span class="comment">//            System.out.println(matcher.group(1));</span></span><br><span class="line">            String content = matcher.group(<span class="number">1</span>);</span><br><span class="line">            String title = titleFetch(content);</span><br><span class="line">            String desc = descFetch(content);</span><br><span class="line">            String s = <span class="string">"title: "</span> + title + <span class="string">" "</span> + <span class="string">"desc: "</span> + desc;</span><br><span class="line">            list.add(s);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取到一条数据的格式如下：</span></span><br><span class="line"><span class="comment">     * &lt;a href="https://v.qq.com/x/cover/mzc00200i3sxjmo/d0936y5t23f.html" class="figure_title figure_title_two_row bold" title="我当摸金校尉的那些年" _stat="movie_v3_hot:title:我当摸金校尉的那些年" target="_blank"&gt;我当摸金校尉的那些年&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;div class="figure_desc" title="电影再现正宗摸金范儿"&gt;电影再现正宗摸金范儿</span></span><br><span class="line"><span class="comment">     * 对此，我们需要根据对应内容的获取做不同正则表达式，以准确地定位到相关的匹配内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">titleFetch</span><span class="params">(String html)</span> </span>{</span><br><span class="line">        String titlePattern = <span class="string">"target=\"_blank\"&gt;([\\s\\S]*?)&lt;/a&gt;"</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(titlePattern);</span><br><span class="line">        Matcher matcher = pattern.matcher(html);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) {</span><br><span class="line">            <span class="keyword">return</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">descFetch</span><span class="params">(String html)</span> </span>{</span><br><span class="line">        String descPattern = <span class="string">"&lt;div class=\"figure_desc\" title=\"([\\s\\S]*?)\"&gt;"</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(descPattern);</span><br><span class="line">        Matcher matcher = pattern.matcher(html);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) {</span><br><span class="line">            <span class="keyword">return</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEncode</span><span class="params">(RestTemplate restTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == restTemplate || ObjectUtils.isEmpty(restTemplate.getMessageConverters())) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate.getMessageConverters();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messageConverters.size(); i++) {</span><br><span class="line">            HttpMessageConverter&lt;?&gt; httpMessageConverter = messageConverters.get(i);</span><br><span class="line">            <span class="keyword">if</span> (httpMessageConverter.getClass().equals(StringHttpMessageConverter<span class="class">.<span class="keyword">class</span>)) </span>{</span><br><span class="line">                messageConverters.set(i, <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Java正则表达式的使用以及提取HTML文本信息&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>npm安装node-sass的报错</title>
    <link href="https://www.zeffon.cn/posts/87b03c86.html"/>
    <id>https://www.zeffon.cn/posts/87b03c86.html</id>
    <published>2020-03-19T00:13:09.000Z</published>
    <updated>2020-03-15T03:53:29.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录npm安装node-sass的报错处理</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨晚在跑vue项目时，由于换了一台win10的电脑，竟然报了一些错误。原因由npm install 中依赖包的<code>node-sass</code>模块引起的。<br>其中有需要python.exe环境，node-sass拉取失败问题。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>报错分析<br>第一个是python.exe，因此我们需要安装python环境。注意是需要<code>python2</code>的环境，并且需要放在C盘根目录</p><p>第二个是拉取不下来node-sass。node-sass是从github拉取的，可能会受网络问题的影响，使用npm一直从github拉取不下来node-sass,所以更换了思路使用淘宝镜像来拉取。</p><h3 id="安装python2环境"><a href="#安装python2环境" class="headerlink" title="安装python2环境"></a>安装python2环境</h3><ol><li><p>需要下载python2的环境(需要在管理员的cmd操作),所以安装windows-build-tools</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global windows-build-tools</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装的python2目录是默认在<code>C:\Users\Admin\.windows-build-tools</code>目录，需要将他移动放在C盘根目录<br>因为npm 拉取时默认读取的是<code>C:\python2\python.exe</code></p></li><li><p>设置一下Path环境变量</p></li></ol><h3 id="node-sass拉取失败问题"><a href="#node-sass拉取失败问题" class="headerlink" title="node-sass拉取失败问题"></a>node-sass拉取失败问题</h3><ol><li>使用淘宝源拉取node-sass<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="重启项目"><a href="#重启项目" class="headerlink" title="重启项目"></a>重启项目</h3><ol><li><p>先删除之前安装的依赖包，将项目根目录下的node-mudules整个删除</p></li><li><p>重新安装依赖包</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动项目</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录npm安装node-sass的报错处理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://www.zeffon.cn/categories/Node/"/>
    
    
      <category term="npm" scheme="https://www.zeffon.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>centOS7安装mariaDB</title>
    <link href="https://www.zeffon.cn/posts/342b847a.html"/>
    <id>https://www.zeffon.cn/posts/342b847a.html</id>
    <published>2020-03-14T08:54:28.000Z</published>
    <updated>2020-03-14T05:00:19.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一下使用离线的方式在CentOS7中安装mariaDB 10.4.x</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MariaDB是开源关系数据库，是MySQL的原始开发人员制作，并保证保持开源，可以说是MySQL的孪生兄弟。随着甲骨文收购了MySQL，并且半闭源Java，所以MySQL存在着闭源的潜在危险。因此之前MySQL的原班人马采用MariaDB这个分支来避免风险。<br>MariaDB是完全兼容于MySQL的，包括API和命令行。</p>    <div id="aplayer-MtwOnFHK" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="139377" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="下载RPM包"><a href="#下载RPM包" class="headerlink" title="下载RPM包"></a>下载RPM包</h3><ol><li><p>安装7个所需的RPM包，这些包都可以在<a href="http://yum.mariadb.org/10.4/centos7-amd64/rpms/" target="_blank" rel="noopener">MariaDB网站</a>上找到</p><img src="/images/2020/03/15-01-rpms-list.png" width="70%" alt="安装rpm包列表"></li><li><p>选择client、common、compat、server包时，<code>版本要一致</code></p><img src="/images/2020/03/15-02-find-rpms.png" width="70%" alt="安装rpm包列表"></li></ol><h3 id="逐步安装RPM包-一定要按顺序"><a href="#逐步安装RPM包-一定要按顺序" class="headerlink" title="逐步安装RPM包(一定要按顺序)"></a>逐步安装RPM包(一定要按顺序)</h3><ol><li><p>使用yum安装所需的所有依赖项</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install rsync nmap lsof perl-DBI nc</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装<code>jemalloc-3.6.0-1.el7.x86_64.rpm</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh jemalloc-3.6.0-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装<code>jemalloc-devel-3.6.0-1.el7.x86_64.rpm</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh jemalloc-devel-3.6.0-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装5个剩下的包(<code>要按先后顺序来</code>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh MariaDB-common-10.4.12-1.el7.centos.x86_64.rpm \</span><br><span class="line">MariaDB-compat-10.4.12-1.el7.centos.x86_64.rpm \</span><br><span class="line">MariaDB-client-10.4.12-1.el7.centos.x86_64.rpm \</span><br><span class="line">galera-4-26.4.3-1.rhel7.el7.centos.x86_64.rpm \</span><br><span class="line">MariaDB-server-10.4.12-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>在安装MariaDB-common-10.4.12-1.el7.centos.x86_64.rpm时，可能与较旧的MariaDB软件包冲突。我们需要删除它们并重新安装原始rpm。<br>#rpm -ivh MariaDB-10.1.21-centos7-x86_64-common.rpm<br>warning: MariaDB-10.1.21-centos7-x86_64-common.rpm: Header V4 DSA/SHA1 Signature, key ID 1bb943db: NOKEY<br>error: Failed dependencies:<br> mariadb-libs &lt; 1:10.1.21-1.el7.centos conflicts with MariaDB-common-10.1.21-1.el7.centos.x86_64<br><strong><code>一个警告缺少导入MariaDb的key</code></strong> 和 <strong><code>与mariadb-libs包冲突了</code></strong></p></blockquote></li></ol><h3 id="解决报错问题"><a href="#解决报错问题" class="headerlink" title="解决报错问题"></a>解决报错问题</h3><p>1. 卸载冲突的mariadb-libs<br>先搜索</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep mariadb-libs </span><br><span class="line">mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></tbody></table></figure></div><p>进行卸载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ev --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></tbody></table></figure></div><p>2. 导入MariaDb的key</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import http://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br></pre></td></tr></tbody></table></figure></div><p>3. 在安装Galera软件包时，依赖软件包的安装可能会发生冲突。这是错误消息：</p><blockquote><p>error: Failed dependencies:<br>    libboost_program_options.so.1.53.0()(64bit) is needed by galera-25.3.19-1.rhel7.el7.centos.x86_64<br>The dependencies for Galera package is: libboost_program_options.so.1.53.0</p></blockquote><p>4. 需要安装<code>boost-devel</code>依赖环境</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install boost-devel.x86_64</span><br></pre></td></tr></tbody></table></figure></div><p>5. 继续执行安装5个剩下的包命令时，会再次报缺失<code>libaio包</code>错误</p><p>6. <code>下载并安装</code> libaio包 (此步骤在安装10.4.8+需要)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://mirror.centos/6/os/x86_64/Packages/libaio-0.3.107-10.e16.x86_64.rpm</span><br><span class="line">$ rpm -ivh libaio-0.3.107-10.e16.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure></div><p>7. 最后执行安装5个剩下的包命令，等待下载好就完成了</p><h3 id="运行并配置MariaDB"><a href="#运行并配置MariaDB" class="headerlink" title="运行并配置MariaDB"></a>运行并配置MariaDB</h3><ol><li><p>启动MariaDB（服务名是与MySQL一样的）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mysql start</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安全配置(设置密码)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>初始化时是没有密码的，直接回车<br><code>Enter current password for root (enter for none)</code></p></li><li><p>不需要权限切换<br><code>Switch to unix_socket anthentication [Y/n]   n</code></p></li><li><p>是否更改密码<br><code>Change the root password? [Y/n]   Y</code></p></li><li><p>设置新密码<br><code>New password:   yourPassword</code></p></li><li><p>确认密码<br><code>Re-enter new password:   yourPassword</code></p></li><li><p>是否移除匿名用户（安全起见可以删除）<br><code>Remove anonymous users? [Y/n]   Y</code></p></li><li><p>是否允许远程登录(也可以设置n，如果后面需要远程连接时也可以修改)<br><code>Disallow root login remotely? [Y/n]   Y</code></p></li><li><p>是否删除test数据库（留着也好）<br><code>Remove test database and access to it? [Y/n]   n</code></p></li><li><p>重新加载tables的内容<br><code>Reload privilege tables now? [Y/n]   Y</code></p></li></ol><h3 id="远程ip登录"><a href="#远程ip登录" class="headerlink" title="远程ip登录"></a>远程ip登录</h3><p><strong>如果设置允许就不需要下面操作了。</strong><br><strong>如果在配置MariaDB<code>步骤9</code>时，设置<code>不允许远程登录</code>时，可使用以下进行修改。</strong></p><ol><li><p>进入MariaDB控制台</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>需要将localhost改为%,让外网能访问</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'yourPassword'</span> WITH GRANT OPTION;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>刷新权限</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ FLUSH  PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><ol><li>除了离线使用下载的安装包进行安装之外，也可以使用yum的方式进行在线安装<img src="/images/2020/03/15-03-online-install.png" width="70%" alt="在线安装"></li></ol><h3 id="win安装"><a href="#win安装" class="headerlink" title="win安装"></a>win安装</h3><ol><li>win安装比较简单，直接下MSI包一键安装即可<img src="/images/2020/03/15-04-win-install.png" width="70%" alt="win安装"></li></ol><h2 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h2><p>MariaDB官网 - <a href="https://mariadb.com/kb/en/mariadb-installation-version-10121-via-rpms-on-centos-7/" target="_blank" rel="noopener">MariaDB Installation</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mariaDB" scheme="https://www.zeffon.cn/tags/mariaDB/"/>
    
  </entry>
  
  <entry>
    <title>centOS7安装mysql</title>
    <link href="https://www.zeffon.cn/posts/8ffccda5.html"/>
    <id>https://www.zeffon.cn/posts/8ffccda5.html</id>
    <published>2020-03-07T08:56:18.000Z</published>
    <updated>2020-03-07T12:25:35.839Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在腾讯云新弄了一台云服务器(CentOS 7)，记录在上面普通安装Mysql服务的过程。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在腾讯云新弄了一台云服务器(CentOS 7)，记录在上面普通安装Mysql服务的过程。<br>本教程适合在CentOS 7上安装mysql5.7以上的版本，如果需要安装Mysql5.6以下版本可以参考<a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">官网教程</a><br>在之前博客中有记录使用docker的安装教程<a href="6e95fd19.html">Docker安装Mysql和Redis</a></p>    <div id="aplayer-LSmIkpTe" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="390345" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="添加MySQL-Yum存储库"><a href="#添加MySQL-Yum存储库" class="headerlink" title="添加MySQL Yum存储库"></a>添加MySQL Yum存储库</h3><ol><li><p>第一种方法：在<code>MySQL</code> <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">Yum存储库</a>选择并下载适用于你平台的发行包</p><img src="/images/2020/03/07-01-yum-list.png" width="70%" alt="官网yum列表"></li><li><p>第二种方法：使用<code>wget</code>直接下载指定版本(这里指定下载5.7版本)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="安装yum发行包"><a href="#安装yum发行包" class="headerlink" title="安装yum发行包"></a>安装yum发行包</h3><ol><li>使用以下命令安装下载的发行包，并替换<code>platform-and-version-specific-package-name</code>为下载的包的名称<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></tbody></table></figure></div></li><li>例如，这里下载的发行包是<code>mysql57-community-release-el7-10.noarch.rpm</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol><li>通过以下命令安装MySQL(安装过程比较久，需要慢慢等待)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mysql-community-server</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><ol><li><p>使用命令启动Mysql</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld.service</span><br><span class="line">或者</span><br><span class="line">$ service mysqld start</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>检查是否成功启动</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status mysqld.service</span><br><span class="line">或者</span><br><span class="line">$ service mysqld status</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>如果控制台输出如下面图片一样，则启动成功</p><img src="/images/2020/03/07-02-mysql-status.png" width="70%" alt="mysql状态"></blockquote></li></ol><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><ol><li><p>默认创建 ‘root’@’localhost’ 一个超级用户帐户。设置超级用户的密码并将其存储在错误日志文件中。要显示它，请使用以下命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>通过使用生成的临时密码登录并尽快为超级用户帐户设置自定义密码，以更改root密码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">$ ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'yourPassword!'</span>;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>MySQL的 validate_password 插件默认安装。这将要求密码至少包含一个大写字母，一个小写字母，一位数字和一个特殊字符，并且密码总长度至少为8个字符。</p></blockquote></li></ol><h3 id="远程ip登录"><a href="#远程ip登录" class="headerlink" title="远程ip登录"></a>远程ip登录</h3><ol><li><p>需要将localhost改为%,让外网能访问</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'yourPassword'</span> WITH GRANT OPTION;</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>刷新权限</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ FLUSH  PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h2><p><a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">使用MySQL Yum存储库的快速指南</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在腾讯云新弄了一台云服务器(CentOS 7)，记录在上面普通安装Mysql服务的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://www.zeffon.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JAVA JPA 方法命名规则</title>
    <link href="https://www.zeffon.cn/posts/14d38de7.html"/>
    <id>https://www.zeffon.cn/posts/14d38de7.html</id>
    <published>2020-03-04T01:54:32.000Z</published>
    <updated>2020-03-30T14:53:53.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录在SpringBoot项目使用JPA访问数据库数据时，Repository持久层的方法命名规则</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Repository持久层的方法通过方法的命名规则会自动创建出对应的SQL语句的，因此使用JPA作为数据访问层时，我们可以通过编写对应的方法来获取到数据库的数据，<code>而不需要编写SQL语句</code>，相比于Mybatis，这样简化编码流程，提高了开发效率，但也是有<code>局限性</code>的。其无法应对太复杂的SQL语句，同时也会造成方法的命名太长而不优雅。但是编写简单的SQL时，的确非常有助于我们开发。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><table><thead><tr><th align="left">关键字</th><th align="left">方法命名</th><th align="left">sql where字句</th></tr></thead><tbody><tr><td align="left">And</td><td align="left">findByNameAndPwd</td><td align="left">where name= ? and pwd =?</td></tr><tr><td align="left">Or</td><td align="left">findByNameOrSex</td><td align="left">where name= ? or sex=?</td></tr><tr><td align="left">Is,Equals</td><td align="left">findById,findByIdEquals</td><td align="left">where id= ?</td></tr><tr><td align="left">Between</td><td align="left">findByIdBetween</td><td align="left">where id between ? and ?</td></tr><tr><td align="left">LessThan</td><td align="left">findByIdLessThan</td><td align="left">where id &lt; ?</td></tr><tr><td align="left">LessThanEquals</td><td align="left">findByIdLessThanEquals</td><td align="left">where id &lt;= ?</td></tr><tr><td align="left">GreaterThan</td><td align="left">findByIdGreaterThan</td><td align="left">where id &gt; ?</td></tr><tr><td align="left">GreaterThanEquals</td><td align="left">findByIdGreaterThanEquals</td><td align="left">where id &gt; = ?</td></tr><tr><td align="left">After</td><td align="left">findByIdAfter</td><td align="left">where id &gt; ?</td></tr><tr><td align="left">Before</td><td align="left">findByIdBefore</td><td align="left">where id &lt; ?</td></tr><tr><td align="left">IsNull</td><td align="left">findByNameIsNull</td><td align="left">where name is null</td></tr><tr><td align="left">isNotNull,NotNull</td><td align="left">findByNameNotNull</td><td align="left">where name is not null</td></tr><tr><td align="left">Like</td><td align="left">findByNameLike</td><td align="left">where name like ?</td></tr><tr><td align="left">NotLike</td><td align="left">findByNameNotLike</td><td align="left">where name not like ?</td></tr><tr><td align="left">StartingWith</td><td align="left">findByNameStartingWith</td><td align="left">where name like ‘?%’</td></tr><tr><td align="left">EndingWith</td><td align="left">findByNameEndingWith</td><td align="left">where name like ‘%?’</td></tr><tr><td align="left">Containing</td><td align="left">findByNameContaining</td><td align="left">where name like ‘%?%’</td></tr><tr><td align="left">OrderBy</td><td align="left">findByIdOrderByXDesc</td><td align="left">where id=? order by x desc</td></tr><tr><td align="left">Not</td><td align="left">findByNameNot</td><td align="left">where name &lt;&gt; ?</td></tr><tr><td align="left">In</td><td align="left">findByIdIn(Collection&lt;?&gt; c)</td><td align="left">where id in (?)</td></tr><tr><td align="left">NotIn</td><td align="left">findByNameNot</td><td align="left">where name &lt;&gt; ?</td></tr><tr><td align="left">True</td><td align="left">findByAaaTue</td><td align="left">where aaa = true</td></tr><tr><td align="left">False</td><td align="left">findByAaaFalse</td><td align="left">where aaa = false</td></tr><tr><td align="left">IgnoreCase</td><td align="left">findByNameIgnoreCase</td><td align="left">where UPPER(name)=UPPER(?)</td></tr><tr><td align="left">top</td><td align="left">findTop100</td><td align="left">top 10/where ROWNUM &lt;=10</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在SpringBoot项目使用JPA访问数据库数据时，Repository持久层的方法命名规则&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
      <category term="JPA" scheme="https://www.zeffon.cn/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>java事务传播</title>
    <link href="https://www.zeffon.cn/posts/d5f8033c.html"/>
    <id>https://www.zeffon.cn/posts/d5f8033c.html</id>
    <published>2020-02-18T10:49:48.000Z</published>
    <updated>2020-02-18T12:25:31.914Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录7个Java事务传播属性的区别</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br></pre></td></tr></tbody></table></figure></div><p>在Java中与数据层交互时，通常会使用事务，使用<code>@Transactional</code>注解的propagation用来设置事务的传播行为</p><p>事务的传播行为：一个方法运行在了一个开启事务的方法中，当前方法是使用依附的方法事务还是使用自身的事务</p><blockquote><p> Propagation propagation() default Propagation.REQUIRED; // Propagation默认使用<code>REQUIRED</code>级别</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>事务中常用就两种<code>REQUIRED</code>和<code>SUPPORTS</code></p><h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h3><p>Propagation propagation() default Propagation.REQUIRED; // Propagation默认使用<code>REQUIRED</code>级别</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="comment">// Support a current transaction, create a new one if none exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>REQUIRED : 使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法时必须运行在一个事务中的; 如果当前存在事务，则加入这个事务中，成为一个整体。</li><li>主要用于：增、删、改操作</li></ol><h3 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a>SUPPORTS</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="comment">// Support a current transaction, execute non-transactionally </span></span><br><span class="line"><span class="comment">// if none exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>SUPPORTS : 如果当前有事务，则使用事务，如果当前没有事务，则不使用事务。</li><li>主要用于：查操作</li></ol><h3 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a>MANDATORY</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.MANDATORY)</span><br><span class="line"><span class="comment">// Support a current transaction, throw an exception if none exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>MANDATORY : 该传播属性强制必须存在一个事务，如果不存在，则抛出异常</li></ol><h3 id="REQUIRED-NEW"><a href="#REQUIRED-NEW" class="headerlink" title="REQUIRED_NEW"></a>REQUIRED_NEW</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED_NEW)</span><br><span class="line"><span class="comment">// Create a new transaction, and suspend the current transaction </span></span><br><span class="line"><span class="comment">// if one exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>REQUIRED_NEW : 如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用; 如果当前没有事务，则同<code>REQUIRED</code></li></ol><h3 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a>NOT_SUPPORTED</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line"><span class="comment">// Execute non-transactionally, suspend the current transaction</span></span><br><span class="line"><span class="comment">// if one exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>NOT_SUPPORTED : 如果当前有事务，则把事务挂起，自己不使用事务去运行数据操作</li><li>主要用于：查操作</li></ol><h3 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NEVER)</span><br><span class="line"><span class="comment">// Execute non-transactionally, throw an exception</span></span><br><span class="line"><span class="comment">// if a transaction exists.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>NEVER : 如果当前有事务存在，则抛出异常</li></ol><h3 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="comment">// Execute within a nested transaction if a current transaction </span></span><br><span class="line"><span class="comment">// exists, behave like {@code REQUIRED} otherwise.</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>NESTED : 如果当前有事务，则开启子事务(嵌套事务)，嵌套事务是独立提交或者回滚; 如果当前没有事务，则同<code>REQUIRED</code>。但是如果主事务提交，则会携带子事务一起提交。如果主事务回滚，则子事务一起回滚。相反，子事务异常，则主事务可以回滚或者不回滚(捕捉异常，则不回滚；不捕捉，则回滚)</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录7个Java事务传播属性的区别&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>实现二叉堆-最大堆</title>
    <link href="https://www.zeffon.cn/posts/c296b2d8.html"/>
    <id>https://www.zeffon.cn/posts/c296b2d8.html</id>
    <published>2020-01-07T08:27:31.000Z</published>
    <updated>2020-02-18T09:01:27.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>二叉堆分为最小堆和最大堆</li><li>最大堆：堆中某个节点的值总是不大于其父节点的值(即根节点是最大值)，最小堆则反之。</li></ul><blockquote><p>堆是平衡二叉树，并且堆是从1开始计数的，按层数遍历的方式给节点标上顺序。</p></blockquote><p><strong><code>本文基于数组实现最大堆</code></strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>向二叉堆添加一个元素，只需把它放在最后一个位置的下一个，然后该节点与父节点进行大小比较。如果大于父节点的值，需要将其进行上浮，直至到合适位置；否则不需要浮动。<br>往堆中添加一个元素</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        79</span><br><span class="line">      /   \</span><br><span class="line">    56     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line"> 22   29 34   40</span><br><span class="line"> /      </span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure></div><p>现在添加 61，放在10的下一个位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        79</span><br><span class="line">      /   \</span><br><span class="line">    56     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line"> 22   29 34   40</span><br><span class="line"> /      </span><br><span class="line">10  61</span><br></pre></td></tr></tbody></table></figure></div><p>与父节点29进行比较，大于父节点的值，交换两者的位置，需要进行上浮</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        79</span><br><span class="line">      /   \</span><br><span class="line">    56     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line">  61  29 34   40</span><br><span class="line"> / \</span><br><span class="line">10  22</span><br></pre></td></tr></tbody></table></figure></div><p>61的节点再与父节点56比较，大于需要上浮</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        79</span><br><span class="line">      /   \</span><br><span class="line">    61     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line">  56  29 34   40</span><br><span class="line"> / \</span><br><span class="line">10  22</span><br></pre></td></tr></tbody></table></figure></div><p>现在满足了</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作是将堆中最大的元素弹出，根节点(1位置)与最后一个节点的位置互换。size大小减一，后将新的根节点下沉到合适位置。<br>删除堆中最大值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        79</span><br><span class="line">      /   \</span><br><span class="line">    56     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line"> 22   29 34   40</span><br><span class="line"> /      </span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure></div><p>79与10交换位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        10</span><br><span class="line">      /   \</span><br><span class="line">    56     49</span><br><span class="line">   /  \   /   \  </span><br><span class="line"> 22   29 34   40</span><br><span class="line"> /      </span><br><span class="line">79</span><br></pre></td></tr></tbody></table></figure></div><p>size大小减去一</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       10</span><br><span class="line">     /   \</span><br><span class="line">   56     49</span><br><span class="line">  /  \   /   \  </span><br><span class="line">22   29 34   40</span><br></pre></td></tr></tbody></table></figure></div><p>父节点10与左右节点中最大值节点56交换位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       56</span><br><span class="line">     /   \</span><br><span class="line">   10     49</span><br><span class="line">  /  \   /   \  </span><br><span class="line">22   29 34   40</span><br></pre></td></tr></tbody></table></figure></div><p>同理，10与29交换位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       56</span><br><span class="line">     /   \</span><br><span class="line">   29     49</span><br><span class="line">  /  \   /   \  </span><br><span class="line">22   10 34   40</span><br></pre></td></tr></tbody></table></figure></div><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data[]; <span class="comment">// 存放堆数据的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;       <span class="comment">//当前堆的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;   <span class="comment">//堆的最大容量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>{</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[capacity+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向堆里面插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> item)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(size == capacity){</span><br><span class="line">            System.out.println(<span class="string">"The heap is full"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        data[size+<span class="number">1</span>] = item; <span class="comment">// 将元素放在最后一个的下一个</span></span><br><span class="line">        size++;</span><br><span class="line">        shiftUp(size); <span class="comment">// 将元素上浮至合适位置</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆插入元素时的元素上浮</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>] &lt; data[k]){</span><br><span class="line">            swap(data, k/<span class="number">2</span>, k);</span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除堆的最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">extractMax</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>){</span><br><span class="line">            System.out.println(<span class="string">"The heap can not be null"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> ret = data[<span class="number">1</span>];</span><br><span class="line">        swap(data, <span class="number">1</span>, size); <span class="comment">// 第一个与最后一个元素交换位置</span></span><br><span class="line">        size--;</span><br><span class="line">        shiftDown(<span class="number">1</span>); <span class="comment">// 下沉到合适位置</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆删除元素时的元素下沉</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= size){</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k; <span class="comment">// 在此轮循环中，data[k]和data[j]交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(j + <span class="number">1</span> &lt;= size &amp;&amp; data[j+<span class="number">1</span>] &gt; data[j]){</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(data[k] &gt; data[j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//元素下移</span></span><br><span class="line">            swap(data, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[], MaxHeap heap)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++){</span><br><span class="line">            heap.insert(arr[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--){</span><br><span class="line">            arr[i] = heap.extractMax();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> t = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历方式</title>
    <link href="https://www.zeffon.cn/posts/d5b5365e.html"/>
    <id>https://www.zeffon.cn/posts/d5b5365e.html</id>
    <published>2020-01-01T05:57:27.000Z</published>
    <updated>2020-02-18T09:01:27.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>今天是2020年的第一天，希望在新的一年有所收获…</p></li><li><p>主要总结一下二叉树的遍历方式及其递归和非递归的实现</p></li></ul>    <div id="aplayer-EeLpYFlX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1294924388" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>LeetCode-<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">144.二叉树前序遍历</a></p><ul><li><p>递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) {</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.left, res);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.right, res);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>非递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            TreeNode cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.right);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>LeetCode-<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></p><ul><li><p>递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.left, res);</span><br><span class="line">            }</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.right, res);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>非递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> || !stack.isEmpty()) {</span><br><span class="line">            <span class="keyword">if</span>(cur != <span class="keyword">null</span>) {</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cur = stack.pop();</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>LeetCode-<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">145.二叉树后序遍历</a></p><ul><li><p>递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.left, res);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) {</span><br><span class="line">                helper(root.right, res);</span><br><span class="line">            }</span><br><span class="line">            res.add(root.val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>非递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> || !stack.isEmpty()) {</span><br><span class="line">            <span class="keyword">if</span>(cur != <span class="keyword">null</span>) {</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cur = stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(cur.right == <span class="keyword">null</span> || pre == cur.right){</span><br><span class="line">                    res.add(cur.val);</span><br><span class="line">                    pre = cur;</span><br><span class="line">                    cur = <span class="keyword">null</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    stack.push(cur);</span><br><span class="line">                    cur = cur.right;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>LeetCode-<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102.二叉树的层次遍历</a></p><ul><li><p>递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; levels = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> levels;</span><br><span class="line">        }</span><br><span class="line">        helper(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> levels;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> level)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (levels.size() == level)</span><br><span class="line">            levels.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line"></span><br><span class="line">         levels.get(level).add(node.val);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</span><br><span class="line">            helper(node.left, level + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</span><br><span class="line">            helper(node.right, level + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>非递归实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> levelNum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            <span class="keyword">int</span> newLevelNum = <span class="number">0</span>;</span><br><span class="line">            ArrayList&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i ++){</span><br><span class="line">                TreeNode node = queue.remove();</span><br><span class="line">                level.add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>){</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                    newLevelNum ++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>){</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                    newLevelNum ++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            res.add(level);</span><br><span class="line">            levelNum = newLevelNum;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo-add-music</title>
    <link href="https://www.zeffon.cn/posts/f6280cee.html"/>
    <id>https://www.zeffon.cn/posts/f6280cee.html</id>
    <published>2019-12-16T01:01:31.000Z</published>
    <updated>2020-02-18T09:01:27.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>欢乐的时光怎么能少了音乐相伴呢，所以在文章中添加音乐也是一件值得享受的事，而且在Hexo添加音乐也是很方便。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在Hexo添加音乐很简单，首先先下载相关的插件，在配置开启插件开关，然后在需要添加音乐的文章中添加相关的代码就行了。</p><h3 id="首先先看看效果"><a href="#首先先看看效果" class="headerlink" title="首先先看看效果"></a>首先先看看效果</h3><ol><li><p>单首歌曲模式</p>    <div id="aplayer-ndehkUtM" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1363948882" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div></li><li><p>歌单模式</p>    <div id="aplayer-cWdCNlNv" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="801641548" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div></li></ol><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>安装hexo-tag-aplayer插件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在Hexo根配置文件_config.yml中设置开关</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>直接在文中添加音乐模板<br>比如上面单首歌曲模式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% meting <span class="string">"1363948882"</span> <span class="string">"netease"</span> <span class="string">"song"</span> <span class="string">"theme:#555"</span> <span class="string">"mutex:true"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> %}</span><br></pre></td></tr></tbody></table></figure></div><p>歌单模式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% meting <span class="string">"801641548"</span> <span class="string">"netease"</span> <span class="string">"playlist"</span> <span class="string">"theme:#555"</span> <span class="string">"mutex:true"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> %}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><blockquote><p>如果无法在网页显示出音乐模板，可能是因为刚刚下载插件，没有进行重新编译</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></tbody></table></figure></div><h3 id="音乐模板说明"><a href="#音乐模板说明" class="headerlink" title="音乐模板说明"></a>音乐模板说明</h3><table><thead><tr><th align="center">选项</th><th align="center">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">必须值</td><td align="left">歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td align="center">server</td><td align="center">必须值</td><td align="left">音乐平台: netease, tencent, kugou, xiami, baidu</td></tr><tr><td align="center">type</td><td align="center">必须值</td><td align="left">song, playlist, album, search, artist</td></tr><tr><td align="center">fixed</td><td align="center">false</td><td align="left">开启固定模式</td></tr><tr><td align="center">mini</td><td align="center">false</td><td align="left">开启迷你模式</td></tr><tr><td align="center">loop</td><td align="center">all</td><td align="left">列表循环模式：all, one,none</td></tr><tr><td align="center">order</td><td align="center">list</td><td align="left">列表播放模式： list, random</td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="left">播放器音量</td></tr><tr><td align="center">lrctype</td><td align="center">0</td><td align="left">歌词格式类型</td></tr><tr><td align="center">listfolded</td><td align="center">false</td><td align="left">指定音乐播放列表是否折叠</td></tr><tr><td align="center">storagename</td><td align="center">metingjs</td><td align="left">LocalStorage 中存储播放器设定的键名</td></tr><tr><td align="center">autoplay</td><td align="center">true</td><td align="left">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">mutex</td><td align="center">true</td><td align="left">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td align="center">listmaxheight</td><td align="center">340px</td><td align="left">播放列表的最大长度</td></tr><tr><td align="center">preload</td><td align="center">auto</td><td align="left">音乐文件预载入模式，可选项： none, metadata, auto</td></tr><tr><td align="center">theme</td><td align="center">#ad7a86</td><td align="left">播放器风格色彩设置</td></tr></tbody></table><h3 id="歌曲id和歌单id获取"><a href="#歌曲id和歌单id获取" class="headerlink" title="歌曲id和歌单id获取"></a>歌曲id和歌单id获取</h3><p>比如获取网易云音乐平台</p><ol><li><p>获取歌曲id</p><img src="/images/2019/12/16-hexo-add-music-01.png" width="70%" alt="歌曲id"></li><li><p>获取歌单id</p><img src="/images/2019/12/16-hexo-add-music-02.png" width="70%" alt="歌单id"></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢乐的时光怎么能少了音乐相伴呢，所以在文章中添加音乐也是一件值得享受的事，而且在Hexo添加音乐也是很方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建blog</title>
    <link href="https://www.zeffon.cn/posts/2d212f7.html"/>
    <id>https://www.zeffon.cn/posts/2d212f7.html</id>
    <published>2019-12-14T11:50:20.000Z</published>
    <updated>2020-02-18T09:01:27.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 控制反转(IoC)和依赖注入(DI)</title>
    <link href="https://www.zeffon.cn/posts/15bd38ef.html"/>
    <id>https://www.zeffon.cn/posts/15bd38ef.html</id>
    <published>2019-12-06T11:50:20.000Z</published>
    <updated>2020-02-18T09:01:27.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>控制反转(Inversion of Control)和依赖注入(Dependency Injection)</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>控制反转</code>和<code>依赖注入</code>的概念可能有些抽象，我细想一下以往的开发过程中，也是不知道它们实际的用途是什么，对它们的理解也是仅仅有个模糊的影子而已。对此再次提及它们时，我不能再对此视而不见了。所以在网上查阅一些资料，包括一些大神写的博客，希望自己能在这次有比较有好的认识。如果有理解不到位或者理解错的地方，望大家多多指正。^_^</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="控制反转IoC"><a href="#控制反转IoC" class="headerlink" title="控制反转IoC"></a>控制反转IoC</h3><p>首先，我们先明白什么是IoC？在Java开发中，IoC是意味着将你设计好的对象交给了<strong>IoC容器</strong>进行控制，而不再是传统的在你的<strong>对象内部</strong>进行控制。所谓的<code>控制反转</code>就是要去<strong>反转控制权</strong>。而理解好IoC需要明白在这<code>控制</code>中,谁控制谁，控制着什么？为什么是反转呢？还有哪些方面的控制被反转了？</p><h4 id="谁控制谁，控制什么？"><a href="#谁控制谁，控制什么？" class="headerlink" title="谁控制谁，控制什么？"></a>谁控制谁，控制什么？</h4><p>在传统的面向对象编程设计，我们需要直接在对象内部通过new的方式进行创建对象，这种属于是<code>程序主动</code>去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由<strong>Ioc容器</strong>来控制对象的创建；谁控制谁？当然是<strong>IoC容器</strong>控制了对象；控制什么？那就是主要控制了外部资源获取。<br><strong><code>传统的面向对象编程设计</code></strong><br><img src="/images/2019/12/java-IoC-and-DI-01.png" width="70%" alt="java-IoC-and-DI-01"></p><p><strong><code>IoC容器</code></strong><br><img src="/images/2019/12/java-IoC-and-DI-02.png" width="70%" alt="java-IoC-and-DI-02"></p><h4 id="为什么是反转呢？"><a href="#为什么是反转呢？" class="headerlink" title="为什么是反转呢？"></a>为什么是反转呢？</h4><p>有反转就有正转。在传统的面向对象编程设计中是由我们自己在对象中主动控制去直接new来获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象。为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是<strong>被动</strong>的接受依赖对象，所以是反转。</p><h4 id="哪些方面的控制被反转了？"><a href="#哪些方面的控制被反转了？" class="headerlink" title="哪些方面的控制被反转了？"></a>哪些方面的控制被反转了？</h4><p>依赖对象的获取被反转了。原本是<strong>houseService对象</strong>需要主动获取<strong>houseDao对象</strong>的，现在变成<strong>houseDao对象</strong>注入到<strong>houseService对象</strong>中。<strong>houseService对象</strong>不需要创建什么，IoC容器会帮它查找并注入依赖对象<strong>houseDao对象</strong>。</p><h3 id="IoC的好处"><a href="#IoC的好处" class="headerlink" title="IoC的好处"></a>IoC的好处</h3><ol><li><p><code>IoC</code>不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。在单一职责原则的设计下，很少有单独一个对象就能完成的任务。大多数任务都需要复数的对象来协作完成，这样对象与对象之间就有了<strong>依赖</strong>。一开始对象之间的依赖关系是自己解决的，需要什么对象了就<strong>New</strong>一个出来用，控制权是在<strong>对象本身</strong>。但是这样耦合度就非常高，可能某个对象的一点小修改就会引起<strong>连锁反应</strong>，需要把依赖的对象一路修改过去。</p></li><li><p>这样会导致代码高度和并且难以维护和调试。为了避免这种情况，需要将对象内部的控制权<code>反转</code>到外部(IoC容器)。有了IoC容器后，把创建和查找依赖对象的控制权交给了<code>容器</code>，由容器进行注入组合对象，所以<code>对象与对象</code>之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p></li><li><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了<code>主从换位</code>的变化。应用程序原本是老大，要获取什么资源都是<strong>主动</strong>出击，但是在<code>IoC/DI思想</code>中，应用程序就变成<strong>被动</strong>的了，被动的等待<code>IoC容器</code>来创建并注入它所需要的资源了。由<code>IoC容器</code>帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p></li></ol><h3 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h3><ul><li>DI—Dependency Injection，即<code>依赖注入</code>：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</li></ul><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ol><li><p>谁依赖于谁：当然是应用程序依赖于IoC容器；</p></li><li><p>为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</p></li><li><p>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；</p></li><li><p>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p></li></ol><blockquote><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>控制反转</code>是一种面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见一种的方式叫做<code>依赖注入</code>。<br><code>控制反转</code>不是一种技术，而是一种思想，其基本思想是：借助于<code>第三方</code>(IoC容器)实现具有依赖关系的对象之间的<code>解耦</code>。<br><code>控制反转</code>作为Spring的核心，让<strong>IoC容器</strong>通过<code>依赖注入</code>的方式使得创建依赖对象的控制权由<strong>对象</strong>转移到<strong>IoC容器</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.iteye.com/blog/jinnianshilongnian-1413846" target="_blank" rel="noopener">IoC 之 2.1 IoC基础 ——跟我学Spring3</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;控制反转(Inversion of Control)和依赖注入(Dependency Injection)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的环境变量配置文件</title>
    <link href="https://www.zeffon.cn/posts/aa1859fd.html"/>
    <id>https://www.zeffon.cn/posts/aa1859fd.html</id>
    <published>2019-11-30T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时在linux上安装一些应用，有时候需要设置环境变量，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</p><ul><li>系统级环境变量：每一个登录到系统的用户都能够读取到系统级的环境变量；</li><li>用户级环境变量：每一个登录到系统的用户只能够读取属于自己的用户级的环境变量；</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="系统级环境变量"><a href="#系统级环境变量" class="headerlink" title="系统级环境变量"></a>系统级环境变量</h3><h4 id="1-etc-profile"><a href="#1-etc-profile" class="headerlink" title="1. /etc/profile"></a>1. /etc/profile</h4><ol><li>在系统启动后第一个用户登录时运行，并从<code>/etc/profile.d</code>目录的配置文件中搜集shell的设置，使用该文件配置的环境变量将应用于登录到系统的<code>每一个用户</code>。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/profile</span><br><span class="line">#</span><br><span class="line"># System wide environment and startup programs, for login setup</span><br><span class="line"># Functions and aliases go in /etc/bashrc</span><br><span class="line">#</span><br><span class="line"># It's NOT a good idea to change this file unless you know what you</span><br><span class="line"># are doing. It's much better to create a custom.sh shell script in</span><br><span class="line"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class="line"># will prevent the need for merging in future updates.</span><br></pre></td></tr></tbody></table></figure></div></li><li>在该文件中添加环境变量即可，后使用以下命令可以使配置文件立刻生效。以下都是使用<code>source</code>来生效。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h4 id="2-etc-bashrc"><a href="#2-etc-bashrc" class="headerlink" title="2. /etc/bashrc"></a>2. /etc/bashrc</h4><ol><li><p>在<code>bash shell</code>打开时运行，修改该文件配置的环境变量将会影响所有用户使用的<code>bash shell</code>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># /etc/bashrc</span><br><span class="line">#</span><br><span class="line"># System wide functions and aliases</span><br><span class="line"># Environment stuff goes in /etc/profile</span><br><span class="line">#</span><br><span class="line"># It's NOT a good idea to change this file unless you know what you</span><br><span class="line"># are doing. It's much better to create a custom.sh shell script in</span><br><span class="line"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class="line"># will prevent the need for merging in future updates.</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>这里的bash shell有不同的类别，不同的类别所使用的环境变量配置文件也有所不同。一般情况下，非登录shell不会执行任何profile文件，<code>非交互shell</code>模式不会执行任何bashrc文件。  </p></li></ol><blockquote><p><code>/etc/bashrc</code>在Ubuntu和Debian中是/etc/bash.bashrc  </p></blockquote><h4 id="3-etc-environment"><a href="#3-etc-environment" class="headerlink" title="3. /etc/environment"></a>3. /etc/environment</h4><ol><li>在系统启动时运行，用于配置与系统运行相关但与<code>用户无关</code>的环境变量，修改该文件配置的环境变量将<code>影响全局</code>。</li></ol><h3 id="用户级环境变量"><a href="#用户级环境变量" class="headerlink" title="用户级环境变量"></a>用户级环境变量</h3><blockquote><p><strong>其中<del>/.bash_profile、</del>/.bash_login、<del>/.profile三个文件中往往系统中往往只存在一个，在不同的发行版中不同，如CentOS和RedHat中是`</del>/.bash_profile<code>，而Debian和Ubunto等系列中往往是</code>~/.profile`</strong></p></blockquote><h4 id="1-bash-profile-建议首选"><a href="#1-bash-profile-建议首选" class="headerlink" title="1. ~/.bash_profile(建议首选)"></a>1. ~/.bash_profile(建议首选)</h4><ol><li>每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.</li><li>此文件类似于/etc/profile，也是需要需要重启才会生效，/etc/profile对所有用户生效，~/.bash_profile只对当前用户生效。</li></ol><h4 id="2-profile"><a href="#2-profile" class="headerlink" title="2. ~/.profile"></a>2. ~/.profile</h4><ol><li>当用户登录时执行，<code>每个用户</code>都可以使用该文件来配置专属于自己使用的shell信息。</li></ol><h4 id="3-bashrc"><a href="#3-bashrc" class="headerlink" title="3. ~/.bashrc"></a>3. ~/.bashrc</h4><ol><li>当用户登录时以及每次打开<code>新的shell</code>时该文件都将被读取，不推荐在这里配置用户专用的环境变量，因为每开一个shell，该文件都会被读取一次，效率肯定受影响。</li><li>此文件类似于/etc/bashrc，不需要重启生效，重新打开一个bash即可生效， /etc/bashrc对<code>所有用户</code>新打开的bash都生效，但~/.bashrc只对<code>当前用户</code>新打开的bash生效。</li></ol><h4 id="4-bash-logout"><a href="#4-bash-logout" class="headerlink" title="4. ~/.bash_logout"></a>4. ~/.bash_logout</h4><ol><li>当每次退出系统(退出bash shell)时执行该文件。</li></ol><blockquote><p>注意：Linux系统使用 $VARIABLE_NAME 访问环境变量，多个环境变量之间使用 “:”分隔，Windows系统使用 %VARIABLE_NAME% 访问环境变量，多个环境变量之间使用 ; 分隔。</p></blockquote><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><ol><li>~/.bash_profile 是交互式、login 方式进入bash 运行的；</li><li>~/.bashrc 是交互式 non-login 方式进入bash 运行的；</li><li>通常二者设置大致相同，所以通常前者会调用后者。</li><li>设置生效：可以重启生效，也可以使用命令：source</li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>一般情况下，Linux加载环境变量配置文件的执行顺序为：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">     -------- 登陆 --------</span><br><span class="line">    |                      |</span><br><span class="line">    |                   登陆shell</span><br><span class="line">    |                      |</span><br><span class="line">    |                  /etc/profile</span><br><span class="line">    |                      |</span><br><span class="line">    |                  /etc/profile.d</span><br><span class="line">    |                      |</span><br><span class="line">    |                  ~/.bash_profile</span><br><span class="line">    |                      |</span><br><span class="line">    |                  ~/.bash_login</span><br><span class="line">    |                      |</span><br><span class="line">~/.bashrc  &lt;----------  ~/.profile</span><br></pre></td></tr></tbody></table></figure></div><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><strong><code>JeanCheng</code></strong> <a href="https://blog.csdn.net/gatieme/article/details/45064705" target="_blank" rel="noopener">Linux中profile、bashrc、<del>/.bash_profile、</del>/.bashrc、~/.bash_profile之间的区别和联系以及执行顺序</a></p><p><strong><code>细雨微光</code></strong> - <a href="https://www.cnblogs.com/lovychen/p/10911699.html" target="_blank" rel="noopener">linux命令（56）：环境变量：/etc/profile、/etc/bashrc 、<del>/.profile、</del>/.bashrc</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zeffon.cn/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://www.zeffon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Heroku 搭建 V2ray</title>
    <link href="https://www.zeffon.cn/posts/397734e7.html"/>
    <id>https://www.zeffon.cn/posts/397734e7.html</id>
    <published>2019-11-25T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>Heroku 是一个支持多语言的PaaS。简单来说这是一个可以免费快速将自己的应用部署在上面的云平台。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ol><li><p>首先需要有heroku账号，所以需要先<a href="https://signup.heroku.com/" target="_blank" rel="noopener">注册</a></p></li><li><p>验证完heroku账号后，使用大神<code>zyp997</code>写插件<a href="https://github.com/zyp997/ss-heroku" target="_blank" rel="noopener">ss-heroku</a>。直接点击README.md中<code>Deploy to Heroku</code>图标，进行一键在Heroku进行搭建v2ray</p></li><li><p>跳转到Heroku填写信息：<code>名称</code>随便填写、<code>地区</code>选择就近的、<code>AppName</code>需要与前面的<code>名称</code>相同、<code>ENCRYPT</code>设置为<code>rc4-md5</code>加密算法，其他默认即可。</p></li><li><p>点击<code>Deploy app</code>进行部署完后，点击<code>View</code>会跳转到一个动态页面，如果能正常在浏览器查看二维码<code>https://AppName.herokuapp.com/qr_img/v2.png</code>，则部署成功了。</p></li></ol><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="手机-Android"><a href="#手机-Android" class="headerlink" title="手机(Android)"></a>手机(Android)</h4><ol><li><p>下载<a href="https://apkcombo.com/tw-tw/shadowsocks/com.github.shadowsocks/" target="_blank" rel="noopener">shadowsocks</a></p></li><li><p>下载<a href="https://github.com/shadowsocks/v2ray-plugin-android/releases" target="_blank" rel="noopener">v2ray插件</a>，我试过精简版的<code>安装不了</code>，所有选择<code>universal</code>通用版进行安装。</p></li><li><p>打开<code>shadowsocks</code>，点击右上角上的 <code>+</code> ，选择扫描二维码。扫描之前的二维码<code>https://yourAppName.herokuapp.com/qr_img/v2.png</code>，即可添加节点。</p></li></ol><h4 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h4><ol><li><p>下载<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks</a></p></li><li><p>下载<a href="https://github.com/shadowsocks/v2ray-plugin/releases" target="_blank" rel="noopener">v2ray-plugin插件</a></p></li><li><p>打开<code>shadowsocks</code>客户端，添加一个服务器。</p></li></ol><ul><li>服务器地址 : <code>yourAppName.herokuapp.com</code></li><li>端口 : 443</li><li>密码 : 密码默认为<code>5c301bb8-6c77-41a0-a606-4ba11bbab084</code></li><li>加密算法 : rc4-md5</li><li>插件程序 : 插件的路径</li><li>插件选项 : path=/static;host=yourAppName.herokuapp.com;tls</li></ul><blockquote><p>或者扫描手机分享的二维码添加，再更改插件程序的路径即可</p></blockquote><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><ul><li>待续</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>acme.sh免费申请Let&#39;s Encrypt泛域名证书</title>
    <link href="https://www.zeffon.cn/posts/425caa0e.html"/>
    <id>https://www.zeffon.cn/posts/425caa0e.html</id>
    <published>2019-11-22T04:00:00.000Z</published>
    <updated>2020-06-09T05:47:23.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 acme.sh 可以免费生成 Let’s Encrypt 泛域名证书，比Certbot申请方式简单易用，不需要手动<code>设置TEXT</code>，不需要设置定时任务申请证书。acme.sh内置每天检测证书是否过期，过期则进行<code>自动续期</code>。如果想用Certbot的话，在之前写过一篇<a href="5ac7620d.html">免费https通配符证书申请与配置</a>。</p><h2 id="申请与配置"><a href="#申请与配置" class="headerlink" title="申请与配置"></a>申请与配置</h2><ul><li>有<code>两种</code>方式申请</li></ul><ol><li>acme.sh脚本 </li><li>docker镜像获取</li></ol><h3 id="acme-sh脚本"><a href="#acme-sh脚本" class="headerlink" title="acme.sh脚本"></a>acme.sh脚本</h3><ol><li><p>安装 acme.sh</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://get.acme.sh | sh</span><br><span class="line"><span class="comment"># OK</span></span><br><span class="line"><span class="comment"># Install success! 显示则安装成功</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>获取相关的参数</p></li></ol><ul><li>不同的<code>域名厂商</code>使用的命令也不同，请参考<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener">官网</a></li><li>获取<a href="https://usercenter.console.aliyun.com/#/manage/ak" target="_blank" rel="noopener">阿里云</a><code>AccessKey</code>的ID和Secret也就是Ali_Key和Ali_Secret</li><li>获取<a href="https://console.dnspod.cn/account/token" target="_blank" rel="noopener">DNSPod</a>的Id和Key(key也就是token)</li></ul><p><strong><code>阿里云获取证书</code></strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换成从阿里云后台获取的密钥</span></span><br><span class="line">$ <span class="built_in">export</span> Ali_Key=<span class="string">"xxxxxx"</span></span><br><span class="line">$ <span class="built_in">export</span> Ali_Secret=<span class="string">"xxxxxx"</span></span><br><span class="line"><span class="comment"># 换成自己的域名</span></span><br><span class="line">$ acme.sh --issue --dns dns_ali -d example.com -d *.example.com</span><br><span class="line"><span class="comment"># --force 强制</span></span><br><span class="line"><span class="comment"># 命令执行后比较慢，需要等待</span></span><br><span class="line"><span class="comment"># 需要等待两多分钟，也可以在命令添加 `--dnssleep 900` 等待90秒</span></span><br></pre></td></tr></tbody></table></figure></div><p><strong><code>DNSPod获取证书</code></strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录DNSPod后台获取相关的密钥 https://console.dnspod.cn/account/token</span></span><br><span class="line">$ <span class="built_in">export</span> DP_Id=<span class="string">"123456"</span></span><br><span class="line">$ <span class="built_in">export</span> DP_Key=<span class="string">"qwert2g3yuiop3"</span></span><br><span class="line"><span class="comment"># 换成自己的域名</span></span><br><span class="line">$ acme.sh --issue --dns dns_dp -d example.cn -d *.example.cn</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>-bash: acme.sh: command not found<br>$ source ~/.bashrc # 或者重启终端就可以了</p></blockquote><ol><li><p>证书目录</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cert success</span><br><span class="line"><span class="comment"># 证书生成成功，同时下面还有key信息</span></span><br><span class="line"><span class="comment"># 生成的证书放在该目录下: ~/.acme.sh/example.com/</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>Nginx证书配置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    ssl on;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /root/.acme.sh/example.com/fullchain.cer; # 替换自己的证书</span><br><span class="line">    ssl_certificate_key /root/.acme.sh/example.com/example.com.key; # 替换自己的证书</span><br><span class="line">    ssl_trusted_certificate  /root/.acme.sh/example.com/ca.cer; # 替换自己的证书</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html {</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">listen 80;</span><br><span class="line">server_name example.com;</span><br><span class="line">rewrite ^/(.*) https://$server_name$request_uri? permanent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="docker镜像获取"><a href="#docker镜像获取" class="headerlink" title="docker镜像获取"></a>docker镜像获取</h3><p>想用docker镜像来获取证书比较方便。官方的<a href="https://github.com/Neilpang/acme.sh/wiki/Run-acme.sh-in-docker" target="_blank" rel="noopener">github</a>有详细的教程</p><ol><li><p>docker运行</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm  -it  \</span><br><span class="line">  -v <span class="string">"<span class="variable">$(pwd)</span>/out"</span>:/acme.sh  \</span><br><span class="line">  -e Ali_Key=<span class="string">"xxxxxx"</span> \</span><br><span class="line">  -e Ali_Secret=<span class="string">"xxxx"</span> \</span><br><span class="line">  neilpang/acme.sh  --issue --dns dns_ali -d example.com -d *.example.com</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>证书位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v "$(pwd)/out:/acme.sh" # 是映射在当前目录下的out目录，如果想更换其他目录，更换即可。</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>其他<code>Nginx配置</code>与脚本方式的配置相同。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Mysql和Redis</title>
    <link href="https://www.zeffon.cn/posts/6e95fd19.html"/>
    <id>https://www.zeffon.cn/posts/6e95fd19.html</id>
    <published>2019-11-21T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>请观看之前的博客内容Docker安装教程</p><h2 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h2><h3 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h3><h4 id="安装-mysql-5-7-版本"><a href="#安装-mysql-5-7-版本" class="headerlink" title="安装 mysql 5.7 版本"></a>安装 mysql 5.7 版本</h4><ol><li><p>拉取镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:5.7</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>新建需要<code>挂载</code>文件夹</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /docker-data/mysql/data</span><br><span class="line">$ mkdir /docker-data/mysql/conf.d</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在<code>conf.d</code>目录创建my.cnf</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"># skip-grant-tables作为启动参数的作用：MYSQL服务器不加载权限判断，任何用户都能访问数据库。</span><br><span class="line">default-time_zone = '+8:00'</span><br><span class="line"># 设置北京时区</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>运行并挂载在本机</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql5.7 -p 3306:3306 \</span><br><span class="line">--restart=always --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /docker-data/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /docker-data/mysql/conf.d:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改密码为空</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it CONTAINER ID bash </span><br><span class="line">$ mysql -uroot -p</span><br><span class="line"><span class="comment"># 不用输密码直接回车，进入mysql命令</span></span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; select user,authentication_string,host from user; <span class="comment"># 查看账号、密码、可连接的host</span></span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> authentication_string=<span class="string">''</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;  <span class="comment">#修改密码</span></span><br><span class="line">mysql&gt; flush privileges;  <span class="comment">#刷新权限</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>mysql&gt; select user,authentication_string,host from user; # 查看账号、密码、可连接的host<br>root需要有两个host – localhost、% 并且密码不为空，没有 % 的话无法外网访问<br>mysql&gt; CREATE USER ‘root’@’%’ IDENTIFIED BY ‘123456’; # 没有的话进行新建</p></blockquote></li><li><p>注释掉<code>my.cnf</code>中，文件中的<code>skip-grant-tables</code>，重启<code>mysql</code>服务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">$ docker stop CONTAINER ID</span><br><span class="line">$ docker start CONTAINER ID</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改root密码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h4 id="安装-mysql-8-版本"><a href="#安装-mysql-8-版本" class="headerlink" title="安装 mysql 8 版本"></a>安装 mysql 8 版本</h4><p><strong><code>步骤与mysql 5.7的流程相似</code></strong></p><ol><li><p>拉取镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:latest</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>新建需要<code>挂载</code>文件夹</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /docker-data/mysql8/data</span><br><span class="line">$ mkdir /docker-data/mysql8/conf.d</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在<code>conf.d</code>目录创建my.cnf</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line">default-time_zone = <span class="string">'+8:00'</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>运行并挂载在本机</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql8 -p 3306:3306 \</span><br><span class="line">-v /docker-data/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /docker-data/mysql8/conf.d:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改密码为空</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it CONTAINER ID bash </span><br><span class="line">$ mysql -uroot -p</span><br><span class="line"><span class="comment"># 不用输密码直接回车，进入mysql命令</span></span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; select user,authentication_string,host from user; <span class="comment"># 查看账号、密码、可连接的host</span></span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> authentication_string=<span class="string">''</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;  <span class="comment">#修改密码</span></span><br><span class="line">mysql&gt; flush privileges;  <span class="comment">#刷新权限</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>注释掉<code>my.cnf</code>中，文件中的<code>skip-grant-tables</code>，重启<code>mysql</code>服务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">$ docker stop CONTAINER ID</span><br><span class="line">$ docker start CONTAINER ID</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>MYSQL 8.0内新增加<code>mysql_native_password</code>函数，通过更改这个函数密码来进行<code>远程连接</code>。<br>mysql&gt; ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘123456’;<br>没有 <code>root - %</code> 添加即可。<br>mysql&gt; CREATE USER ‘root’@’%’ IDENTIFIED BY ‘123456’; </p></blockquote></li><li><p>修改root密码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><ol><li><p>拉取官方的redis镜像指定版本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull redis:5.0.5</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改启动默认配置，官方 <a href="http://download.redis.io/redis-stable/redis.conf" target="_blank" rel="noopener">redis.conf</a> 配置文件  </p></li></ol><p><strong><code>注意需要修改四个地方：</code></strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#注释掉这部分，用来限制redis只能本地访问</span></span><br><span class="line">protected-mode no <span class="comment">#默认yes表示开启保护模式，用来限制redis只能本地访问</span></span><br><span class="line">appendonly yes <span class="comment">#持久化</span></span><br><span class="line">requirepass password <span class="comment">#密码</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li><p>新建文件夹用于<code>redis</code>外部挂载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /docker-data/redis/data</span><br><span class="line">$ mkdir /docker-data/redis/conf</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动redis</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name my-redis -d -p 6379:6379 \</span><br><span class="line">--restart=always --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /docker-data/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /docker-data/redis/data:/data \</span><br><span class="line">redis:5.0.5 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>查看redis是否正常启动，如果没有问题就可以使用<code>远程</code>连接redis</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
      <category term="redis" scheme="https://www.zeffon.cn/tags/redis/"/>
    
      <category term="mysql" scheme="https://www.zeffon.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程的基石</title>
    <link href="https://www.zeffon.cn/posts/4daac1fc.html"/>
    <id>https://www.zeffon.cn/posts/4daac1fc.html</id>
    <published>2019-11-18T04:00:00.000Z</published>
    <updated>2020-03-09T13:14:15.108Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>学习<code>并发编程</code>，对于线程与进程、线程与多线程、并行与并发、并发与高并发、同步与异步、阻塞与非阻塞之间的<code>概念与关系</code>，需要进一步的理解。本篇学习于慕课网悟空老师的<a href="https://www.imooc.com/course/introduction/id/1186" target="_blank" rel="noopener">《Java并发编程的基石》</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="线程、进程和多线程"><a href="#线程、进程和多线程" class="headerlink" title="线程、进程和多线程"></a>线程、进程和多线程</h3><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><ol><li>指的是程序的一次执行。在用户下达<code>运行程序</code>的命令后，就会产生进程。 </li><li>进程就是程序(这里可以理解为我们编写的代码)的<code>真正运行实例</code>，是<code>资源分配</code>的基本单位。 </li></ol><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><ol><li>线程是CPU的基本调度单位，每个线程执行的都是<code>进程代码的某个片段</code>。</li><li>在进程上下文中执行的<code>一系列指令</code>。 </li></ol><h6 id="进程与线程的-联系"><a href="#进程与线程的-联系" class="headerlink" title="进程与线程的 联系"></a>进程与线程的 <strong><code>联系</code></strong></h6><p>操作系统`包</p><p>含<code>多个进程的容器，而每个进程又都是</code>容纳`多个线程的容器。</p><h6 id="进程与线程的-异同"><a href="#进程与线程的-异同" class="headerlink" title="进程与线程的 异同"></a>进程与线程的 <strong><code>异同</code></strong></h6><ol><li><code>相似点</code>：生命周期</li><li><code>起源不同</code>: 计算机系统先有进程后有线程，起初只有进程，没有线程的概念。因为微处理器的的处理速度远远高于外设（键盘鼠标等等），才诞生了线程，线程的诞生是为了提高程序的运行效率</li><li><code>概念不同</code>: 进程是操作系统分配资源和调度的基本单位，线程是cpu运行调度的基本单位</li><li><code>内存共享方式不同</code>: 通常进程之间内存不会共享（比如浏览器不会访问视频播放软件的内存），通常需要高级技巧IDC 才能实现进程间通信实现内存共享，而线程之间的内存共享则比较容易</li><li><code>拥有的资源不同</code>: 线程本身是进程的一部分，所以每个线程拥有的资源肯定少于进程，而线程之间共有的内容主要是代码片段，不共有的主要是线程的堆栈（独立的内存）</li><li><code>数量不同</code>: 一个进程里面可以有很多线程，但是至少会有一个线程</li><li><code>开销不同</code>: 线程的创建和终止比进程短，同一个进程内部的线程之间的切换比进程之间的切换要快，同一个进程的各个线程之间共享内存和资源文件，可以不通过内核进行通信</li></ol><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><p>如果一个程序允许运行<code>两个或以上的线程</code>，那么它就是多线程程序。多线程是指在单个程序中运行多个线程。</p><ul><li>多线程的<code>作用</code>:</li></ul><ol><li>最主要的目的就是提高CPU利用率(1.提高处理速度 2.避免无效等待 3.提高用户体验、避免卡顿和缩短等待时间)</li><li>便于编程建模</li><li>计算机性能定律：摩尔定律失效，阿姆达尔定律登上舞台</li></ol><ul><li>多线程的<code>局限</code>:</li></ul><ol><li>性能问题：上下文切换带来的消耗</li><li><code>异构</code>化任务(任务结构不一样)很难高效并行</li><li>带来<code>线程安全</code>问题：包括数据安全问题(例如i++总数不一致)以及线程带来的活跃性问题(线程饥饿、死锁)。</li></ol><h3 id="并行、并发和高并发"><a href="#并行、并发和高并发" class="headerlink" title="并行、并发和高并发"></a>并行、并发和高并发</h3><h5 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h5><p>真正的<code>同时</code>运行—在同一时刻，有<code>多个</code>任务<code>同时</code>执行。例如，在多核处理器上，有两个线程同时执行同一段代码。单核处理器是无法实现并行的，因为单核处理器无法在同一时刻执行多个任务。</p><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><ol><li>形容<code>多个任务</code>的执行状态</li></ol><ul><li>两个或多个任务可以在重叠的时间段内启动，运行和完成</li><li>并行(两个线程同时执行)一定是并发</li><li>并不一定意味着并发一定要求是并行</li></ul><ol><li>对<code>并发性</code>的简称</li></ol><ul><li>不同的部分可以无序或同时执行，且不影响最终的执行结果</li><li>在不同核心数的计算机上的不同表现</li><li>此时，并行和并发的概念并不同一维度上</li></ul><h5 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h5><ol><li>同时有很多个请求发送给服务器系统，服务器能够<code>同时并行处理</code>很多请求。</li><li>高并发和多线程的<code>联系和不同</code></li></ol><ul><li><code>高并发</code>可以认为是一种<code>状态</code>(大量的请求同时到达我们的服务器所带来的一种结果)；<code>多线程</code>是一种编程方式，它是一种<code>解决方案</code>，它所解决的是恰恰是防止高并发带来的线程安全问题或者是性能问题。</li><li>多线程和高并发的关系：<code>其中一种重要</code>的解决方案</li><li>高并发<code>并不意味</code>着是多线程：Redis</li></ul><ol><li>高并发<code>指标</code></li></ol><ul><li>QPS(Queries Per Second) 每秒查询数(每秒钟的请求数)</li><li>带宽</li><li>PV(Page View) 综合浏览量，指的是一天之内访问量</li><li>UV(Unique Visitor) 一天之内用户访问数量</li><li>IP和UV的区别</li><li>并发连接数(The number of concurrent connections)</li><li>服务器平均请求等待时间(Time per request:across all concurrent requests)</li></ul><h3 id="同步与异步、阻塞与非阻塞"><a href="#同步与异步、阻塞与非阻塞" class="headerlink" title="同步与异步、阻塞与非阻塞"></a>同步与异步、阻塞与非阻塞</h3><p>同步与异步：被调用者是否<code>主动告诉</code>调用者结果。<br>阻塞与非阻塞就是程序在等待<code>调用结果</code>（消息，返回值）时的状态。</p><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><ol><li>在发出一个同步调用时，在没有得到结果之前，该调用就不返回。</li><li>同步这里指的是<code>被调用者</code>(也就是服务器)的行为，而不是<code>请求方</code>的行为。在没有得到结果之前，服务端就不返回任何结果。</li></ol><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><ol><li>在发出一个异步调用后，调用者不会立刻得到结果，该调用就返回了。</li><li>调用在发出之后，服务端会立刻返回，告诉<code>调用方</code>‘我收到你的请求了，我会处理的’。这样<code>调用方</code>知道<code>被调用方</code>已接收到请求了，就可以去执行其他命令了。</li></ol><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><ol><li>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</li><li>我是调用者，我调用一个东西之后，结果返回前，<code>我不能做别的事</code>。</li></ol><h5 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h5><ol><li>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</li><li>我是调用者，我调用一个东西之后，结果返回前，<code>我还能做别的事</code>。</li></ol><ul><li>阻塞与非阻塞站在线程状态的角度 </li><li>阻塞与非阻塞站在线程发出请求(通常是HTTP请求)的角度</li></ul><h5 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h5><p>举一个<code>烧水壶</code>的例子进行说明。</p><ul><li>两种水壶： </li></ul><ol><li>一种是把水烧开了不会提醒的。</li><li>一种是会提醒发出呜呜声响的。</li></ol><h6 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h6><p>选用<code>不会提醒</code>的水壶进行烧水，在烧水期间，由于我是笨，不知道水什么时候会烧好，只好<code>坐在水壶前</code>等待，这样就不能去做其他事情。一直在水壶前盯着，直到水壶把水烧开拿下来。</p><h6 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h6><p>选用<code>不会提醒</code>的水壶进行烧水，在烧水期间，我很聪明，虽然不知道什么时候会烧好，但是我能在这期间去<code>做其他事情</code>，只要<code>时不时来检查</code>一下是否烧好了就好了。烧好拿下来就好了。</p><h6 id="异步阻塞"><a href="#异步阻塞" class="headerlink" title="异步阻塞"></a>异步阻塞</h6><p>选用<code>会提醒</code>的水壶进行烧水，在烧水期间，由于我比较笨和老实，我还是只能坐在水壶前，所以也不能去做其他事情。<code>直到</code>水壶烧开发声提醒时，才把水壶拿下来。</p><h6 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h6><p>选用<code>会提醒</code>的水壶进行烧水，在烧水期间，我很聪明知道时间不可浪费，我可以跑去<code>做其他事情</code>，等到我听到水壶烧开<code>发声提醒</code>时，我才过去把水壶拿下来，这样也是能完成烧水任务的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 注解</title>
    <link href="https://www.zeffon.cn/posts/ca104227.html"/>
    <id>https://www.zeffon.cn/posts/ca104227.html</id>
    <published>2019-11-07T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.783Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>Java注解又称为标注，是Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法。Java中的类、方法、变量、参数、包都可以被注解。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Java中常见注解"><a href="#Java中常见注解" class="headerlink" title="Java中常见注解"></a>Java中常见注解</h3><ol><li><p>@interface注解：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.表示定义的是一个注解(不是类，也不是接口)；</span><br><span class="line">2.成员要以无参无异常的方式声明；</span><br><span class="line">3.可以用default为成员指定一个默认值；</span><br><span class="line">4.成员类型受限制，合法的类型包括原始数据类型和String(常用),Class,Annotation,Enumeration；</span><br><span class="line">5.如果注解只有一个成员，则该成员名必须为value()，在使用时可忽略成员名和赋值号(=)；</span><br><span class="line">6.注解类可以没用成员，此时该注解被称为“标识注解”；</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>元注解</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)  注解的作用域</span><br><span class="line">TYPE <span class="comment">//Class,interface  类和接口</span></span><br><span class="line">FIELD <span class="comment">//Field  declaration 字段声明</span></span><br><span class="line">METHOD <span class="comment">//Method  declaration 方法声明</span></span><br><span class="line">PARAMETER <span class="comment">//Formal  parameter  declaration 参数声明</span></span><br><span class="line">CONSTRUCTOR <span class="comment">//Constructor  declaration 构造方法</span></span><br><span class="line">LOCAL_VARIABLE <span class="comment">//Local  variable  declaration 局部变量</span></span><br><span class="line">ANNOTATION_TYPE <span class="comment">//Annotation  type  declaration 注解类型声明</span></span><br><span class="line">PACKAGE <span class="comment">//Packagedeclaration 包声明</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  注解的生命周期</span><br><span class="line">SOURCE <span class="comment">//Annotations are to be discarded by the compiler </span></span><br><span class="line">        <span class="comment">//只在源代码显示，编译时会放弃</span></span><br><span class="line">CLASS <span class="comment">//Annotations are to be recorded in the class file by the compiler. </span></span><br><span class="line">        <span class="comment">//But need not be retained by the VM at runtime. This is the default behavior. </span></span><br><span class="line">        <span class="comment">//编译时会记录到class中，运行时忽略</span></span><br><span class="line">RUNTIME <span class="comment">//Annotations are to be recorded in the class file by the compiler and retained</span></span><br><span class="line">        <span class="comment">//by the VM at runtime, so they may be read reflectively. </span></span><br><span class="line">        <span class="comment">//运行时存在，可以通过反射读取</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span> </span><br><span class="line"><span class="comment">//允许子类继承</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="comment">//生成javadoc时会包含注解信息</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><ol><li>JDK中自带注解<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="comment">//一般在实现了接口的方法上标识，作用是告诉编译器该方法是接口的方法。该方法的确覆盖或实现了在超类型中声明的方法。</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span> </span><br><span class="line"><span class="comment">//一般在接口中的方法上进行标识，作用是该方法过时了。</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppvisewarnings</span> </span><br><span class="line"><span class="comment">//忽视警告，@SuppressWarnings("deprecation")</span></span><br><span class="line"><span class="meta">@Target</span>({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings {</span><br><span class="line">    String[] value();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="常见第三方注解"><a href="#常见第三方注解" class="headerlink" title="常见第三方注解"></a>常见第三方注解</h3><ol><li>@Autowired<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//@Service可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 </span></span><br><span class="line"><span class="comment">//通过@Autowired的使用来消除set()、get()方法,使得接口可以被容器注入</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired {</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>@Resource<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="comment">//@Resource的作用相当于@Autowired</span></span><br><span class="line"><span class="comment">//只不过@Autowired按byType自动注入，而@Resource默认按byName自动注入</span></span><br><span class="line"><span class="meta">@Target</span>({TYPE, FIELD, METHOD})</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource {</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> java.lang.Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//@Resource有两个属性是比较重要的，分是name和type。</span></span><br><span class="line"><span class="comment">//Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</span></span><br><span class="line"><span class="comment">//所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。</span></span><br><span class="line"><span class="comment">//如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</span></span><br><span class="line"><span class="meta">@Resource</span>装配顺序</span><br><span class="line"><span class="comment">//1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</span></span><br><span class="line"><span class="comment">//2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</span></span><br><span class="line"><span class="comment">//3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</span></span><br><span class="line"><span class="comment">//4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；</span></span><br><span class="line"><span class="comment">//   如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>@Controller<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//用于标注控制层组件</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.TYPE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller {</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>@Service<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="comment">//@Service用于标注业务层组件</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.TYPE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service {</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>@Repository<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//用于标注数据访问组件</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.TYPE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository {</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>@Component<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</span></span><br><span class="line"><span class="meta">@Target</span>({ElementType.TYPE})</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component {</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="使用注解的语法"><a href="#使用注解的语法" class="headerlink" title="使用注解的语法"></a>使用注解的语法</h3><ol><li>例如：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@&lt;注解名&gt;(&lt;成员名<span class="number">1</span>&gt;=&lt;成员值<span class="number">1</span>&gt;, &lt;成员名<span class="number">2</span>&gt;=&lt;成员值<span class="number">2</span>&gt;, …)</span><br><span class="line"><span class="meta">@Description</span>(desc=<span class="string">"I am little bird"</span>, author=<span class="string">"jermi"</span>, age=<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">bird</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="string">"bird"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>GROUP BY和HAVING的用法</title>
    <link href="https://www.zeffon.cn/posts/f098441a.html"/>
    <id>https://www.zeffon.cn/posts/f098441a.html</id>
    <published>2019-11-05T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.782Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>GROUP BY 是分组查询, 一般 GROUP BY 是和聚合函数配合使用。 </li></ul><ol><li>group by 有一个原则,就是 满足<code>SELECT子句中的列名必须为分组列或列函数</code>。</li><li>列函数对于group by子句定义的每个组各返回一个结果。 </li></ol><ul><li>HAVING 通常与GROUP BY子句一起使用</li></ul><ol><li>WHERE过滤行，HAVING过滤组</li><li>出现在同一sql的顺序：WHERE -&gt; GROUP BY -&gt; HAVING </li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>三张数据表-学生表(student_id、name、age、sex)、课程表(course_id、name)、成绩表(student_id、course_id、score)</p><ul><li><p>学生表(student_id、name、age、sex)</p><img src="/images/2019/11/group-by-and-having-01.png" width="60%" alt="data-01"></li><li><p>课程表(course_id、name)</p><img src="/images/2019/11/group-by-and-having-02.png" width="60%" alt="data-02"></li><li><p>成绩表(student_id、course_id、score)</p><img src="/images/2019/11/group-by-and-having-03.png" width="60%" alt="data-03"></li></ul><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><ol><li>查询所有同学的学号、选课数、总成绩<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student_id, <span class="keyword">count</span>(course_id), <span class="keyword">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> student_id;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>列函数对于group by子句定义的每个组各返回一个结果。<br>如果用group by，那么你的select语句中选出的列要么是你group by里用到的列，要么就是带有sum min count等函数的列</p></blockquote></li></ol><img src="/images/2019/11/group-by-and-having-04.png" width="70%" alt="result-01"><ol><li>查询所有同学的学号、姓名、选课数、总成绩<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.student_id, stu.name, <span class="keyword">count</span>(s.course_id), <span class="keyword">sum</span>(s.score)</span><br><span class="line"><span class="keyword">from</span> score s, student stu</span><br><span class="line"><span class="keyword">where</span> s.student_id = stu.student_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.student_id;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>group by 里出现某个表的字段，select里面的列要么是该group by里面的列，要么是<code>别的表</code>的列或者带有函数的列</p></blockquote></li></ol><img src="/images/2019/11/group-by-and-having-05.png" width="70%" alt="result-02"><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><ol><li><p>查询平均成绩大于60分的同学的学号和平均成绩</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student_id, <span class="keyword">avg</span>(score)</span><br><span class="line"><span class="keyword">from</span> score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> student_id</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(score) &gt; <span class="number">60</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>having必须要在group by之后，不然会报错。如果省略了group by语句，having子句就跟where语句一样</p><img src="/images/2019/11/group-by-and-having-06.png" width="70%" alt="result-03"></blockquote></li><li><p>查询没有学全所有课的同学的学号、姓名</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stu.student_id, stu.name</span><br><span class="line"><span class="keyword">from</span> student stu, score s</span><br><span class="line"><span class="keyword">where</span> stu.student_id = s.student_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.student_id</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &lt;</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> course</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div><img src="/images/2019/11/group-by-and-having-07.png" width="70%" alt="result-04">  </li><li><p>取出student_id为1的学生的成绩情况</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.student_id, c.name, s.score</span><br><span class="line"><span class="keyword">from</span>  score s, course c</span><br><span class="line"><span class="keyword">where</span> s.course_id = c.course_id</span><br><span class="line"><span class="keyword">having</span> s.student_id = <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></div><img src="/images/2019/11/group-by-and-having-08.png" width="70%" alt="result-05">  </li></ol><blockquote><p><code>where</code> 子句的作用是在对查询结果进行<code>分组前</code>，将不符合where条件的行去掉，即在<code>分组之前</code>过滤数据，条件中不能包含聚组函数，使用where条件显示特定的行。<br><code>having</code> 子句的作用是筛选满足条件的组，即在<code>分组之后</code>过滤数据，条件中经常包含聚组函数，使用having 条件显示特定的组，也可以使用多个分组标准进行分组。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://www.zeffon.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>vimium的使用</title>
    <link href="https://www.zeffon.cn/posts/179a1564.html"/>
    <id>https://www.zeffon.cn/posts/179a1564.html</id>
    <published>2019-11-04T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>vimium类似于vim的快捷键，是chrome浏览器的一款插件, 可以用键盘代替鼠标的操作, 提高我们的浏览速度和上网体验。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p><code>Vimium</code>作为Chrome的一个扩展工具，安装当然很简单。在Chrome应用店上安装即可<a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Vimium</a></p></li><li><p>可以<code>自定义</code>快捷方式<br>右击右上角扩展的图标 -&gt; 进入选项 -&gt; 在Custom key mappings新增下面快捷内容 -&gt; 点击下面save changes</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Insert your preferred key mappings here.</span><br><span class="line">map w scrollUp</span><br><span class="line">map s scrollDown</span><br><span class="line">map a scrollLeft</span><br><span class="line">map d scrollRight</span><br><span class="line">map l scrollPageDown</span><br><span class="line">map h scrollPageUp</span><br><span class="line">map qq scrollToTop</span><br><span class="line">map ee scrollToBottom</span><br><span class="line">map j goBack</span><br><span class="line">map k goForward</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>官方的快捷方式说明</p><img src="/images/2019/11/vimium.png" width="80%" alt="官方的快捷说明"></li></ol><h2 id="常用的快捷方式-默认"><a href="#常用的快捷方式-默认" class="headerlink" title="常用的快捷方式(默认)"></a>常用的快捷方式(默认)</h2><ol><li><p><strong><code>页面的移动</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">刷新</td></tr><tr><td align="center">f/F</td><td align="center">跳转链接</td></tr><tr><td align="center">h/j/k/l</td><td align="center">左/下/上/右</td></tr><tr><td align="center">u/d</td><td align="center">上/下半页滚动</td></tr><tr><td align="center">gg/G</td><td align="center">回到顶部/底部</td></tr><tr><td align="center">H/L</td><td align="center">后退/前进</td></tr></tbody></table></li></ol><ol><li><p><strong><code>复制&amp;粘贴</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">yy</td><td align="center">复制当前页面的url到剪切板</td></tr><tr><td align="center">yt</td><td align="center">重复当前标签</td></tr><tr><td align="center">p/P</td><td align="center">搜索剪贴板关键字 在当前/新标签</td></tr></tbody></table></li></ol><ol><li><p><strong><code>模式&amp;定位</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">i/v</td><td align="center">编辑模式/可视模式</td></tr><tr><td align="center">gi</td><td align="center">定位到页面首个输入框</td></tr><tr><td align="center">2gi</td><td align="center">定位到页面第二个输入框</td></tr><tr><td align="center">/</td><td align="center">进入寻找模式</td></tr><tr><td align="center">n/N</td><td align="center">向下/上查找结果</td></tr></tbody></table></li></ol><ol><li><p><strong><code>书签</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">o/O</td><td align="center">查找历史记录+书签</td></tr><tr><td align="center">b/B</td><td align="center">打开书签 在当前/新窗口</td></tr></tbody></table></li></ol><ol><li><p><strong><code>标签</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">t/T</td><td align="center">创建/查看标签页</td></tr><tr><td align="center">^</td><td align="center">上一次标签切换</td></tr><tr><td align="center">x/X</td><td align="center">关闭/恢复标签</td></tr><tr><td align="center">J,gT/K,gt</td><td align="center">跳转标签页</td></tr><tr><td align="center">g0/g$</td><td align="center">切换到首个标签/最后标签</td></tr><tr><td align="center">gu/gU</td><td align="center">跳转到当前url上一级/最高级</td></tr><tr><td align="center">ge/gE</td><td align="center">编辑url 在当前/新标签</td></tr><tr><td align="center">?</td><td align="center">显示帮助</td></tr></tbody></table><blockquote><p>平时要是忘记了快捷方式,也可以在浏览器页面 <code>?</code> 显示快捷键帮助</p></blockquote></li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="ideavim"><a href="#ideavim" class="headerlink" title="ideavim"></a>ideavim</h3><ol><li><p>Jetbrains系列软件直接在<code>插件</code>浏览器搜索安装即可，重启后在边栏<code>tools</code>上可以看到<code>vim Emulator</code></p></li><li><p>由于ideavim有些快捷方式与IDEA原本快捷方式会<code>冲突</code>, 可以在以下位置进行设置。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preferences -&gt; Editor -&gt; Vim Emulation(mac系统)  </span><br><span class="line">Settings -&gt; Other Settings -&gt; Vim Emulation设置(win系统)</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>可以选择冲突的按键统一设置成IDE的快捷键。</p></li></ol><h3 id="vscode-vim"><a href="#vscode-vim" class="headerlink" title="vscode vim"></a>vscode vim</h3><ol><li>直接在扩展搜索vim安装即可</li><li>使用系统剪贴板-&gt;设置true<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在首选项 -&gt; 设置 -&gt; 配置搜索vim.useSystemClipboardsh -&gt; 设置true(打勾)</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="vim" scheme="https://www.zeffon.cn/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vim的基本入门</title>
    <link href="https://www.zeffon.cn/posts/835116a6.html"/>
    <id>https://www.zeffon.cn/posts/835116a6.html</id>
    <published>2019-11-03T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工善其事，必利其器。Linux系统中常见的编辑技巧，vim必不可少。<br>Vim是从<code>vi</code>发展出来的一个<code>文本编辑器</code>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。Vim的第一个版本由布莱姆·米勒在<code>ADM-3A</code>终端上开发的，于1991年发布。<br><img src="/images/2019/11/vim.png" width="80%" alt="adm-3a"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本篇学习于慕课网<code>DevOps24h</code>讲师的<code>优雅玩转Vim</code>-<a href="https://www.imooc.com/learn/1049" target="_blank" rel="noopener">课程</a></p><h3 id="移动、跳转和缩进"><a href="#移动、跳转和缩进" class="headerlink" title="移动、跳转和缩进"></a>移动、跳转和缩进</h3><ol><li><p><strong><code>光标移动</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">h/j/k/l</td><td align="center">左/下/上/右</td></tr><tr><td align="center">^/0</td><td align="center">移动到行首/包括缩进空格</td></tr><tr><td align="center">$</td><td align="center">移动到行尾</td></tr></tbody></table></li><li><p><strong><code>单词和字符串移动</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">w/W</td><td align="center">正向移动到下一个单词开头</td></tr><tr><td align="center">b/B</td><td align="center">反向移动</td></tr><tr><td align="center">e/E</td><td align="center">正向移动下一个单词行尾</td></tr><tr><td align="center">ge</td><td align="center">反向移动</td></tr></tbody></table></li><li><p><strong><code>跳转</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">Ctrl-f/F</td><td align="center">下一页</td></tr><tr><td align="center">Ctrl-b/B</td><td align="center">上一页</td></tr><tr><td align="center">Ctrl-d/u</td><td align="center">向下/上翻半页</td></tr><tr><td align="center">gg</td><td align="center">跳转到首行</td></tr><tr><td align="center"><line_number>gg/G</line_number></td><td align="center">跳转到指定行</td></tr><tr><td align="center">{g} + Ctrl-g/G</td><td align="center">跳转到最后一行</td></tr></tbody></table></li><li><p><strong><code>缩进</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">&gt;&gt; / :&gt;</td><td align="center">右缩进</td></tr><tr><td align="center">m,n&gt; / :m&gt;(n-m+1)</td><td align="center">m 到 n 行缩进</td></tr><tr><td align="center">m&gt;n等价于命令:m,m+n-1&gt;</td><td align="center">m行开始共n行缩进一次</td></tr></tbody></table></li></ol><h3 id="删除、复制和粘贴"><a href="#删除、复制和粘贴" class="headerlink" title="删除、复制和粘贴"></a>删除、复制和粘贴</h3><ol><li><p><strong><code>对比</code></strong></p><table><thead><tr><th align="center">windowa</th><th align="center">Vim</th><th align="center">不同处</th></tr></thead><tbody><tr><td align="center">cut</td><td align="center">delete</td><td align="center">和剪切相同，而不是直接删除</td></tr><tr><td align="center">copy</td><td align="center">yank</td><td align="center">等同于复制由于c用于修改(change)被迫选了yank</td></tr><tr><td align="center">paste</td><td align="center">put</td><td align="center">粘贴完全相同</td></tr></tbody></table></li><li><p><strong><code>基本操作</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">d = delete = cut</td><td align="center">剪切</td></tr><tr><td align="center">dd</td><td align="center">剪切当前光标整行</td></tr><tr><td align="center">y = yank ≈ copy</td><td align="center">类似于复制</td></tr><tr><td align="center">p/P = put ≈ paste</td><td align="center">粘贴到光标后/光标前</td></tr><tr><td align="center">u = undo</td><td align="center">撤销之前操作</td></tr><tr><td align="center">Ctrl-r = redo</td><td align="center">重做/恢复之前操作</td></tr><tr><td align="center">yw</td><td align="center">复制当前光标单词</td></tr><tr><td align="center">y2w</td><td align="center">复制正向两个单词</td></tr><tr><td align="center">yy 类似于 dd</td><td align="center">复制当前光标整行</td></tr></tbody></table></li><li><p><strong><code>组合删除</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">x/X</td><td align="center">删除光标下/前单个字符</td></tr><tr><td align="center">dw(d=delete, w=word)</td><td align="center">删除一单词(必须在词首)</td></tr><tr><td align="center">d{hjkl}</td><td align="center">删除到左下上右一个操作前的字符</td></tr><tr><td align="center">d$=D</td><td align="center">删除光标到行尾的字符</td></tr><tr><td align="center">d^</td><td align="center">删除光标到行首的字符</td></tr><tr><td align="center">dd</td><td align="center">删除当前整行</td></tr><tr><td align="center">{n}dd</td><td align="center">向下删除n行(包括当前行)</td></tr><tr><td align="center">5dw</td><td align="center">删除正向单词5次</td></tr><tr><td align="center">3w</td><td align="center">正向移动单词3次</td></tr><tr><td align="center">D3w</td><td align="center">正向删除3w动作</td></tr><tr><td align="center">2d3w</td><td align="center">正向删除3w动作2次</td></tr></tbody></table></li></ol><h3 id="修改、查找和替换"><a href="#修改、查找和替换" class="headerlink" title="修改、查找和替换"></a>修改、查找和替换</h3><ol><li><p><strong><code>插入</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">Shift+i/A</td><td align="center">插入模式并移动到行首/行尾</td></tr><tr><td align="center">a/i</td><td align="center">光标后/前插入</td></tr><tr><td align="center">{n}O/o</td><td align="center">行前/行后插入n次</td></tr><tr><td align="center">{n}+i</td><td align="center">插入模式重复n次</td></tr></tbody></table></li><li><p><strong><code>转换</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">~</td><td align="center">单个字符大小写转换</td></tr><tr><td align="center">g ~ w</td><td align="center">单词大小写转换</td></tr><tr><td align="center">g ~ $ / g ~ ~</td><td align="center">行前/行后插入n次</td></tr><tr><td align="center">gU/uw</td><td align="center">单词转换成大/小写</td></tr></tbody></table></li><li><p><strong><code>查找</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">F/f{char}</td><td align="center">反向/正向查找单个字符</td></tr><tr><td align="center">t{char}</td><td align="center">查找字符前一个字符</td></tr><tr><td align="center">dt{char} / df{space}</td><td align="center">删除光标到查找字符间字符</td></tr><tr><td align="center">/{char}</td><td align="center">命令行查找</td></tr></tbody></table></li><li><p><strong><code>替换</code></strong></p><table><thead><tr><th align="center">按键</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">Shift + r/R</td><td align="center">替换模式</td></tr><tr><td align="center">r</td><td align="center">单个字符替换</td></tr><tr><td align="center">cw</td><td align="center">修改单个单词</td></tr><tr><td align="center">c$ / C</td><td align="center">修改光标之后行内内容</td></tr><tr><td align="center">s/going/rolling/g</td><td align="center">当前行所有going替换成rolling</td></tr><tr><td align="center">%s/going/rolling/g</td><td align="center">%匹配所有范围</td></tr></tbody></table></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="vim" scheme="https://www.zeffon.cn/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>搭建GitLab私服</title>
    <link href="https://www.zeffon.cn/posts/2e8979ff.html"/>
    <id>https://www.zeffon.cn/posts/2e8979ff.html</id>
    <published>2019-11-02T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于Docker部署GitLab环境搭建，搭建自己的<code>git</code>服务器。</p><blockquote><p>由于GitLab运行的占用内存较大，所以建议服务器内存2G以上  </p></blockquote><h2 id="运行搭建"><a href="#运行搭建" class="headerlink" title="运行搭建"></a>运行搭建</h2><ol><li>下载镜像文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull beginor/gitlab-ce:11.0.1-ce.0</span><br></pre></td></tr></tbody></table></figure></div></li></ol><p><strong><code>注意</code></strong> 如果下载速度慢的话，需要配置一下阿里云的镜像<code>加速地址</code>   </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Docker 镜像加速地址</span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">{</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://fy707np5.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">$ systemctl daemon-reload <span class="comment"># 令daemon.json生效</span></span><br><span class="line">$ systemctl restart docker <span class="comment"># 重启Docker</span></span><br></pre></td></tr></tbody></table></figure></div><ol><li><p>创建GitLab 的<code>配置(config)</code> 、 <code>日志(logs)</code> 、<code>数据(data)</code> 放到<code>容器之外</code>， 便于日后升级， 因此请先准备这三个目录。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /srv/gitlab/config</span><br><span class="line">$ mkdir -p /srv/gitlab/logs</span><br><span class="line">$ mkdir -p /srv/gitlab/data</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>运行GitLab容器（注意机器是否关了<code>SELinux</code>）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">--publish 8443:443 \</span><br><span class="line">--publish 8090:80 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">--volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></tbody></table></figure></div><p>如果机器没关<code>SELinux</code>(一般的服务器默认是关的，虚拟机可能没关)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/selinux/config</span><br><span class="line">将SELINUX=enforcing改为SELINUX=disabled    </span><br><span class="line">设置后需要重启机器才能生效</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改/srv/gitlab/config/gitlab.rb</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">把external_url改成部署机器的域名或者IP地址</span><br><span class="line">$ vi /srv/gitlab/config/gitlab.rb</span><br><span class="line">external_url <span class="string">'http://10.71.29.81'</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改/srv/gitlab/data/gitlab-rails/etc/gitlab.yml</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi /srv/gitlab/data/gitlab-rails/etc/gitlab.yml</span><br><span class="line">找到关键字 * <span class="comment">## Web server settings * </span></span><br><span class="line">将host的值改成映射的外部主机ip地址和端口，这里会显示在gitlab克隆地址</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>修改后需要停止docker容器，并且删除，后重启docker, 最后再运行GitLab容器</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id</span><br><span class="line">docker rm 容器id</span><br><span class="line">systemctl restart docker </span><br><span class="line">docker run  …</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>gitlab的web管理页面就可以正常访问<code>http://10.71.29.81:8090</code></p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">GitLab文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.zeffon.cn/categories/Git/"/>
    
    
      <category term="git" scheme="https://www.zeffon.cn/tags/git/"/>
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建Maven私服</title>
    <link href="https://www.zeffon.cn/posts/6a676863.html"/>
    <id>https://www.zeffon.cn/posts/6a676863.html</id>
    <published>2019-11-01T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。<br>Maven私服应用场景 ：</p><ol><li>缓存企业级jar</li><li>微服务开发中，实现对微服务接口实现发布与调用。</li><li>正常在微服务开发中，不会直接引入到其他接口源码项目。引入接口jar包进行调用。</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="下载-amp-amp-启动"><a href="#下载-amp-amp-启动" class="headerlink" title="下载&amp;&amp;启动"></a>下载&amp;&amp;启动</h3><ol><li>Docker拉取一个<code>nexus3</code>的镜像<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull sonatype/nexus3</span><br></pre></td></tr></tbody></table></figure></div></li><li>将容器内部<code>/var/nexus-data</code>挂载到主机<code>/root/nexus-data</code>目录<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 8081:8081 --name nexus -v /root/nexus-data:/var/nexus-data --restart=always sonatype/nexus3</span><br></pre></td></tr></tbody></table></figure></div></li><li>关闭防火墙，根据<code>服务器ip</code>访问 <a href="http://ip:8081" target="_blank" rel="noopener">http://ip:8081</a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld.service</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>Maven 私服<code>启动容器</code>稍微比较慢，等待1分钟即可。</p></blockquote></li></ol><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>使用默认账号密码 admin admin123 登陆时，发现登陆不了。这是更改这种admin123<code>固定密码</code>登陆方式。需要进入容器里面寻找密码。</p><ol><li>查看进行的容器，并进入容器<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID      IMAGE             </span><br><span class="line">9c9b18024931      sonatype/nexus3    </span><br><span class="line">$ docker <span class="built_in">exec</span> -it 9c9b18024931 bash</span><br></pre></td></tr></tbody></table></figure></div></li><li>查看密码(<code>bash-4.4$</code>前面的字符串即是<code>密码</code>)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4$ cat /nexus-data/admin.password</span><br><span class="line">3rhu2s4g-34d5-34d5-fs9d-we2fh8242wh3bash-4.4$ </span><br><span class="line"><span class="comment">#退出容器用 exit 命令</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>在登陆界面进行登陆，再根据提示重置密码即可</li></ol><h3 id="创建Maven私服仓库"><a href="#创建Maven私服仓库" class="headerlink" title="创建Maven私服仓库"></a>创建Maven私服仓库</h3><ol><li><p>创建私服仓库<br>创建仓库，点击<code>Create repository</code>,然后选择<code>maven2(hosted)</code>然后输入仓库名称<code>（test-release）</code>。在<code>version policy</code>中选择这个仓库的类型，这里选择<code>release</code>,在<code>Deployment policy</code>中选择<code>Allow redeploy</code>（这个很重要）.</p></li><li><p>创建私服账号<br>点击左侧菜单栏的<code>Users</code>菜单，然后点击<code>Create local user</code>.我这里创建了一个用户，账号密码都是：<code>testUser</code><br><code>testUser-release</code></p></li><li><p>修改本地settings.xml  </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>testUser<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>testUser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>testUser<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>创建一个Maven工程</p><blockquote><p><strong><code>注意</code></strong> 限定版本一定为RELEASE,因为上传的对应仓库的存储类型为<code>RELEASE</code>  </p></blockquote> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此名称要和.m2/settings.xml中设置的ID一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>testUser<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.162.22:8081/repository/testUser-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发布代码Jar插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发布源码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>发布<code>jar包</code>到Maven私服</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn deploy</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://hub.docker.com/r/sonatype/nexus3/" target="_blank" rel="noopener">Nexus3 Docker</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.zeffon.cn/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>构建分布式配置中心阿波罗</title>
    <link href="https://www.zeffon.cn/posts/e16afb9f.html"/>
    <id>https://www.zeffon.cn/posts/e16afb9f.html</id>
    <published>2019-10-31T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>分布式配置中心阿波罗是国内携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>搭建时需要<code>Java</code>环境和<code>Mysql</code>数据库</p><h3 id="搭建分布式配置中心阿波罗"><a href="#搭建分布式配置中心阿波罗" class="headerlink" title="搭建分布式配置中心阿波罗"></a>搭建分布式配置中心阿波罗</h3><ol><li><p>去往Github下载<a href="https://github.com/nobodyiam/apollo-build-scripts" target="_blank" rel="noopener">apollo</a></p></li><li><p>上传apollo-build-scripts-master配置文件到服务器中，然后解压配置文件  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ unzip apollo-build-scripts-master.zip </span><br><span class="line">// 如果没有unzip命令的话，安装zip插件 </span><br><span class="line">$ yum -y install zip unzip</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>配置数据策略</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改demo.sh中的数据库host、root、密码</span><br><span class="line">修改config_server_url、admin_server_url、portal_url的ip为本机ip（建议修改）</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动阿波罗 </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo.sh start</span><br><span class="line">$ systemctl stop firewalld.service</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>8070登陆界面—–默认账号密码 Apollo  admin</p></li></ol><h3 id="服务客户端集成配置文件"><a href="#服务客户端集成配置文件" class="headerlink" title="服务客户端集成配置文件"></a>服务客户端集成配置文件</h3><ol><li><p>将本地配置存入到阿波罗平台中。<code>yml</code> -&gt; <code>prop</code> <a href="http://www.toyaml.com/index.html" target="_blank" rel="noopener">转换工具</a></p></li><li><p>引入Maven依赖</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>创建 application.properties</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ app.id=对应的应用id</span><br><span class="line">$ apollo.meta=http://Apollo运行ip:8080</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>项目启动开启阿波罗配置文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加注解 @EnableApolloConfig</span><br><span class="line">修改/opt/data/user/server.properties（Mac/Linux）或C:\opt\data\server.properties（Windows）文件</span><br><span class="line">设置env为DEV：</span><br><span class="line">env=DEV</span><br></pre></td></tr></tbody></table></figure></div></li></ol><blockquote><p><code>注意</code>：不是所有的配置文件都会在阿波罗平台修改后，就会立马生效，因为没有采用监听刷新配置文件。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MQ队列</title>
    <link href="https://www.zeffon.cn/posts/d25fdc55.html"/>
    <id>https://www.zeffon.cn/posts/d25fdc55.html</id>
    <published>2019-10-22T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>Linux环境下使用docker快速安装各个MQ队列<br>请观看之前的博客内容Docker安装教程</p><h2 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h2><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><ol><li><p>安装官方的镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.3-management</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>后台admin界面(<strong>账号密码</strong>默认是<code>guest</code>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:15672</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="安装-ActiveMQ"><a href="#安装-ActiveMQ" class="headerlink" title="安装 ActiveMQ"></a>安装 ActiveMQ</h3><ol><li><p>搜索镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker search activemq</span><br><span class="line">NAME                                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">webcenter/activemq                       ActiveMQ 5.14.3 with OpenJDK-jre-8-headless …   170                                     [OK]</span><br><span class="line">rmohr/activemq                           Various versions of ActiveMQ neatly packet i…   90                                      [OK]</span><br><span class="line">vromero/activemq-artemis                 ActiveMQ Artemis image (Debian and Alpine ba…   18                                      [OK]</span><br><span class="line">cloudesire/activemq                      Latest activemq                                 4                                       [OK]</span><br><span class="line">aterreno/activemq-dockerfile                                                             3                                       [OK]</span><br><span class="line">andreptb/activemq                        Debian Jessie based image with ActiveMQ inst…   3                                       [OK]</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装webcenter/activemq中最新版本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name myactivemq \</span><br><span class="line">-p 61616:61616 \</span><br><span class="line">-p 8161:8161 \</span><br><span class="line">webcenter/activemq</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>后台admin界面(<strong>账号密码</strong>默认是<code>admin</code>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/topics.jsp</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><ol><li><p>搜索RocketMQ的镜像,并没有官方的镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker search rocketmq</span><br><span class="line">NAME                            DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">styletang/rocketmq-console-ng   rocketmq-console-ng                             18</span><br><span class="line">foxiswho/rocketmq               rocketmq                                        14</span><br><span class="line">rocketmqinc/rocketmq            Image repository <span class="keyword">for</span> Apache RocketMQ            13</span><br><span class="line">laoyumi/rocketmq                                                                10                                      [OK]</span><br><span class="line">xlxwhy/rocketmq                 alibaba<span class="string">'s rocketmq                              4</span></span><br><span class="line"><span class="string">huanwei/rocketmq-broker                                                         2</span></span><br><span class="line"><span class="string">2019liurui/rocketmq-broker      RocketMQ broker image for RocketMQ-Operator     1</span></span><br><span class="line"><span class="string">2019liurui/rocketmq-namesrv     RocketMQ name service image for RocketMQ-Ope…   1</span></span><br><span class="line"><span class="string">slpcat/rocketmq-console-ng                                                      0</span></span><br><span class="line"><span class="string">coder4/rocketmq                 rocketmq                                        0                                       [OK]</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装 <code>foxiswho/rocketmq</code> 镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://registry.hub.docker.com/v1/repositories/foxiswho/rocketmq/tags\</span><br><span class="line">| tr -d <span class="string">'[\[\]" ]'</span> | tr <span class="string">'}'</span> <span class="string">'\n'</span>\</span><br><span class="line">| awk -F: -v image=<span class="string">'foxiswho/rocketmq'</span> <span class="string">'{if(NR!=NF &amp;&amp; $3 != ""){printf("%s:%s\n",image,$3)}}'</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动<code>nameserver</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 9876:9876 --name rmqserver foxiswho/rocketmq:server-4.5.1</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动<code>broker</code></p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 10911:10911 -p 10909:10909\</span><br><span class="line">--name rmqbroker --link rmqserver:namesrv\</span><br><span class="line">-e <span class="string">"NAMESRV_ADDR=namesrv:9876"</span> -e <span class="string">"JAVA_OPTS=-Duser.home=/opt"</span>\</span><br><span class="line">-e <span class="string">"JAVA_OPT_EXT=-server -Xms128m -Xmx128m"</span>\</span><br><span class="line">foxiswho/rocketmq:broker-4.5.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Broker容器中默认的配置文件的路径为：</span></span><br><span class="line">/etc/rocketmq/broker.conf</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装rocketmq console工具, 通过上面查询的方式找到需要启动的版本，启动方式如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name rmqconsole -p 8180:8080 --link rmqserver:namesrv\</span><br><span class="line"> -e <span class="string">"JAVA_OPTS=-Drocketmq.namesrv.addr=namesrv:9876\</span></span><br><span class="line"><span class="string"> -Dcom.rocketmq.sendMessageWithVIPChannel=false"</span>\</span><br><span class="line"> -t styletang/rocketmq-console-ng</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>命令检查一下启动情况, 后台admin界面访问<code>http://127.0.0.1:8180</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps|grep rocketmq</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.zeffon.cn/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Java API自动生成文档</title>
    <link href="https://www.zeffon.cn/posts/45b37915.html"/>
    <id>https://www.zeffon.cn/posts/45b37915.html</id>
    <published>2019-10-17T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>Java API文档自动生成有swagger2和spring restdocs两种受欢迎的工具。</p><h2 id="Swagger2的使用"><a href="#Swagger2的使用" class="headerlink" title="Swagger2的使用"></a>Swagger2的使用</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>swagger2</code>通过配置，会提供了一个url：<code>http://localhost:8080/v2/api-docs</code>，返回了所有api的信息。读取这个url，将结果存储到<code>swagger.json</code>。利用swagger2markup-maven-plugin插件读取swagger.json，生成一系列<code>adoc</code>文件。最后利用asciidoctor-maven-plugin插件将index.adoc文件转成<code>html</code>或<code>pdf</code>。</p><h3 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h3><ol><li><p>引进依赖包</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger工具包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在配置application.yml中，用于SwaggerConfig读取。这样可以控制是否开启(线上环境关闭)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger2:</span></span><br><span class="line">  <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>配置Swagger2（注意扫描的包的路径是否正确，否则会显示不了数据）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${swagger2.show}"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> swagger2Show;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">swaggerSpringMvcPlugin</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(swagger2Show)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.zeffon.esave"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"swagger-bootstrap-ui RESTful APIs"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在API类和方法上加注解</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"解锁日志"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/log"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnlockLogAPI</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UnlockLogService unlockLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnlockLogAPI</span><span class="params">(UnlockLogService unlockLogService)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.unlockLogService = unlockLogService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/listUnlockLog"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取用户全部解锁记录"</span>, notes = <span class="string">"全部解锁记录"</span>, tags = <span class="string">"日志"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVOUtil <span class="title">listUnlockLog</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;UnlockLogVO&gt; unlockLog = unlockLogService.listUnlockLog();</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success(unlockLog);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>实体类和其属性加注解</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"开锁日志"</span>, description = <span class="string">"用户每次开锁的记录"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnlockLog</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(example = <span class="string">"1"</span>, notes = <span class="string">"用户id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>运行程序，在浏览器中打开<code>http://127.0.0.1:8081/esave/swagger-ui.html#/</code></p></li></ol><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><table><thead><tr><th align="center">API</th><th align="center">作用范围</th><th align="center">使用位置</th></tr></thead><tbody><tr><td align="center">@ApiModel</td><td align="center">描述返回对象的意义</td><td align="center">用在返回对象类上</td></tr><tr><td align="center">@ApiModelProperty</td><td align="center">对象属性</td><td align="center">用在出入参数对象的字段上</td></tr><tr><td align="center">@Api</td><td align="center">协议集描述</td><td align="center">用于 controller 类上</td></tr><tr><td align="center">@ApiOperation</td><td align="center">协议描述</td><td align="center">用在 controller 的方法上</td></tr><tr><td align="center">@ApiResponses</td><td align="center">Response集</td><td align="center">用在 controller 的方法上</td></tr><tr><td align="center">@ApiResponse</td><td align="center">Response</td><td align="center">用在 @ApiResponses 里边</td></tr><tr><td align="center">@ApiImplicitParams</td><td align="center">非对象参数集</td><td align="center">用在 controller 的方法上</td></tr><tr><td align="center">@ApiImplicitParam</td><td align="center">非对象参数描述</td><td align="center">用在 @ApiImplicitParams 的方法里边</td></tr></tbody></table><h2 id="Spring-REST-Docs"><a href="#Spring-REST-Docs" class="headerlink" title="Spring REST Docs"></a>Spring REST Docs</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ol><li>Spring REST Docs的目标替代SpringFox Swagger，帮助自动化生成RESTful服务的文档。</li><li>使用Asciidoctor编写的手写文档；Spring REST Docs为RESTful服务生成准确且可读的文档。</li><li>将手写文档与使用Spring测试生成的文档片段相结合。</li><li>不受Swagger等工具生成的文档的限制。</li><li>它可以生成准确，简洁和结构良好的API文档。</li><li>Spring REST Docs支持测试驱动Test Driven。</li><li>Spring REST Docs支持Spring MVC Test框架，Spring WebFlux的WebTestClient或REST Assured 3测试驱动。</li><li>Spring Boot 提供了注解@AutoConfigureRestDocs简化文档开发。</li></ol><h3 id="使用过程（未完待续）"><a href="#使用过程（未完待续）" class="headerlink" title="使用过程（未完待续）"></a>使用过程（未完待续）</h3><ol><li>引进依赖包<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.restdocs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-restdocs-mockmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="注解说明-1"><a href="#注解说明-1" class="headerlink" title="注解说明"></a>注解说明</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Swagger2的定位是和应用一起启动的<code>在线文档</code>，文档的浏览者可以很简单的填写表单并发起一个<code>真实</code>的请求，而 Spring REST Docs 更倾向于导出一份<code>离线文档</code>作为展示，并配合 curl、httpie 这种工具请求真实部署的服务。</p></li><li><p>Swagger2最大的特点是<code>使用简单</code>，只需要在源码中增加一些描述性的注解即可完成整份文档，而使用 Spring REST Docs 的前提条件是需要在项目中对<code>API</code>进行<code>单元测试</code>。除了依赖，还需要严格的编写Test测试代码，保证测试代码通过。但是Spring REST Docs生成的文档比较符合于测试团队。</p></li></ol><h2 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>nvm的使用</title>
    <link href="https://www.zeffon.cn/posts/a5fc782.html"/>
    <id>https://www.zeffon.cn/posts/a5fc782.html</id>
    <published>2019-10-16T04:00:00.000Z</published>
    <updated>2020-03-15T03:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>nvm是node版本管理工具，用它可以方便的在机器上安装并维护多个Node的版本</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Mac安装nvm"><a href="#Mac安装nvm" class="headerlink" title="Mac安装nvm"></a>Mac安装nvm</h3><p><strong>安装前卸载掉已安装的<code>Node</code>和<code>已安装</code>的全局模块</strong>  </p><ol><li><p>检查是否安装node。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>若是版本信息返回，则进行删除</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm uninstall npm -g</span><br><span class="line">$ sudo rm -rf /usr/<span class="built_in">local</span>/lib/node /usr/<span class="built_in">local</span>/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line">$ sudo rm -rf /usr/<span class="built_in">local</span>/include/node /Users/<span class="variable">$USER</span>/.npm</span><br><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/share/man/man1/node.1</span><br><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/lib/dtrace/node.d</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>验证是否卸载完成</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node  -v</span><br><span class="line">npm  -v</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>使用<code>curl</code>进行安装nvm</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>配置环境变量</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>完成以后检测是否安装成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">$ node version manger <span class="comment"># 安装成功</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>执行 nvm, 如果提示 <code>-bash: nvm: command not found</code>, 需要手动配置变量</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建&nbsp;~/.bash_profile&nbsp;文件</span></span><br><span class="line">$ vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">${XDG_CONFIG_HOME/:-$HOME/.}</span>nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line">$&nbsp;<span class="built_in">source</span>&nbsp;~/.nvm/nvm.sh <span class="comment"># 使bash_profile生效</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="Win安装nvm"><a href="#Win安装nvm" class="headerlink" title="Win安装nvm"></a>Win安装nvm</h3><ol><li><p>github<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">官网</a>寻找下载包</p></li><li><p>程序安装过程中，在 Set Node.js Symlink 这一步目录设置，是待会 nvm use 存放你的 nodejs 程序的目录 [C:\DevTools\nodejs]。</p></li></ol><h3 id="Mac卸载nvm"><a href="#Mac卸载nvm" class="headerlink" title="Mac卸载nvm"></a>Mac卸载nvm</h3><ol><li><p>nvm卸载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf `<span class="variable">$NVM_DIR</span>`</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>执行完重启程序，输入 <code>nvm</code> 测试是否成功</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>还需要到以下文件中删除干净<code>NVM_DIR</code>相关的 (如果有)<br>~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc</p></li></ol><h3 id="nvm常见命令"><a href="#nvm常见命令" class="headerlink" title="nvm常见命令"></a>nvm常见命令</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MD"><figure class="iseeu highlight /md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nvm version 查看当前的版本</span><br><span class="line">nvm install 安装最新版本nvm</span><br><span class="line">nvm install <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>  安装相应版本</span><br><span class="line">nvm use <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>  切换使用指定的版本node</span><br><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current显示当前版本</span><br><span class="line">nvm uninstall <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span> 卸载制定的版本</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.zeffon.cn/categories/Node/"/>
    
    
      <category term="linux" scheme="https://www.zeffon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Java常见的模型转换方法</title>
    <link href="https://www.zeffon.cn/posts/3884269f.html"/>
    <id>https://www.zeffon.cn/posts/3884269f.html</id>
    <published>2019-10-15T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>在进行不同领域对象转换时,原对象和目标对象相同属性的类型不一样,所以对象转换时一些需要考虑的问题。<br>我在进行不同领域对象转换，一直都是用BeanUtils.copyProperties()搭配Set()使用的。听了张老师讲解之后，才知道方法如此之多。</p><h2 id="转化方法"><a href="#转化方法" class="headerlink" title="转化方法"></a>转化方法</h2><p><code>我们的原对象OrderDTO的内容如下：</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"orderDate"</span>:<span class="number">1570558718699</span>,</span><br><span class="line"><span class="attr">"orderId"</span>:<span class="number">201909090001</span>,</span><br><span class="line"><span class="attr">"orderStatus"</span>:<span class="string">"CREATED"</span>,</span><br><span class="line"><span class="attr">"orderedProducts"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">"price"</span>:<span class="number">799.990000000000009094947017729282379150390625</span>,</span><br><span class="line"><span class="attr">"productId"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"吉他"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="attr">"price"</span>:<span class="number">30</span>,</span><br><span class="line"><span class="attr">"productId"</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"变调夹"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="attr">"paymentType"</span>:<span class="string">"CASH"</span>,</span><br><span class="line"><span class="attr">"shopInfo"</span>:{</span><br><span class="line"><span class="attr">"shopId"</span>:<span class="number">20000101</span>,</span><br><span class="line"><span class="attr">"shopName"</span>:<span class="string">"慕课商铺"</span></span><br><span class="line">},</span><br><span class="line"><span class="attr">"totalMoney"</span>:<span class="number">829.990000000000009094947017729282379150390625</span>,</span><br><span class="line"><span class="attr">"userInfo"</span>:{</span><br><span class="line"><span class="attr">"userId"</span>:<span class="number">20100001</span>,</span><br><span class="line"><span class="attr">"userLevel"</span>:<span class="number">2147483647</span>,</span><br><span class="line"><span class="attr">"userName"</span>:<span class="string">"张小喜"</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><code>期望转换后得到的目标对象OrderVO如下：</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"orderDate"</span>:<span class="string">"2019-10-09 15:49:24.619"</span>,</span><br><span class="line"><span class="attr">"orderStatus"</span>:<span class="string">"CREATED"</span>,</span><br><span class="line"><span class="attr">"orderedProducts"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"吉他"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"变调夹"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="attr">"paymentType"</span>:<span class="string">"CASH"</span>,</span><br><span class="line"><span class="attr">"shopName"</span>:<span class="string">"慕课商铺"</span>,</span><br><span class="line"><span class="attr">"totalMoney"</span>:<span class="string">"829.99"</span>,</span><br><span class="line"><span class="attr">"userName"</span>:<span class="string">"张小喜"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="第1种：Get-Set操作。"><a href="#第1种：Get-Set操作。" class="headerlink" title="第1种：Get/Set操作。"></a>第1种：Get/Set操作。</h3><p>Get/Set直接对对象<br>优点：直观、简单、处理速度快；<br>缺点:属性过多时，比较浪费表情，而且代码不简洁  </p><h3 id="第2种：FastJson"><a href="#第2种：FastJson" class="headerlink" title="第2种：FastJson"></a>第2种：FastJson</h3><p>利用序列化和反序列化，这里我们采用先使用FastJson的toJSONString的方法将原对象序列化为字符串，再使用parseObject方法将字符串反序列化为目标对象。<br>缺点：属性转化后不符合预期的，属性名也不一致问题</p><p><strong>使用方式：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON.toJSONString将对象序列化成字符串，JSON.parseObject将字符串反序列化为OderVO对象</span></span><br><span class="line">orderVO = JSON.parseObject(JSON.toJSONString(orderDTO), OrderVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line">{</span><br><span class="line"><span class="attr">"orderDate"</span>:<span class="string">"1570558718699"</span>,</span><br><span class="line"><span class="attr">"orderId"</span>:<span class="number">201909090001</span>,</span><br><span class="line"><span class="attr">"orderStatus"</span>:<span class="string">"CREATED"</span>,</span><br><span class="line"><span class="attr">"orderedProducts"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"吉他"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"变调夹"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="attr">"paymentType"</span>:<span class="string">"CASH"</span>,</span><br><span class="line"><span class="attr">"totalMoney"</span>:<span class="string">"829.990000000000009094947017729282379150390625"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>可以看到</strong></p><ol><li>日期不符合我们的要求</li><li>金额也有问题</li><li>最严重的是，当属性名不一样时，不复制</li></ol><h3 id="第3种：Apache工具包PropertyUtils工具类"><a href="#第3种：Apache工具包PropertyUtils工具类" class="headerlink" title="第3种：Apache工具包PropertyUtils工具类"></a>第3种：Apache工具包PropertyUtils工具类</h3><p>缺点：属性类型不一样会报错，不能部分属性复制，得到的目标对象部分属性成功、部分失败</p><p>使用方式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyUtils.copyProperties(orderVO, orderDTO);</span><br></pre></td></tr></tbody></table></figure></div><p>转换过程中报错</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Cannot invoke com.imooc.demo.OrderVO.setTotalMoney on bean class 'class com.imooc.demo.OrderVO' - argument type mismatch - had objects of type "java.math.BigDecimal" but expected signature "java.lang.String"</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line">{</span><br><span class="line"><span class="attr">"orderId"</span>:<span class="number">201909090001</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>结论：  </p><ol><li>属性类型不一样时报错  </li><li>不能部分属性复制  </li><li>得到的目标对象部分属性成功(这点很要命，部分成功，部分失败！)  </li></ol><h3 id="第4种：Apache工具包BeanUtils工具类"><a href="#第4种：Apache工具包BeanUtils工具类" class="headerlink" title="第4种：Apache工具包BeanUtils工具类"></a>第4种：Apache工具包BeanUtils工具类</h3><p>缺点：属性转化后不符合预期的，属性名也不一致问题</p><p><strong>使用方式：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(orderVO, orderDTO);</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line">{</span><br><span class="line"><span class="attr">"orderDate"</span>:<span class="string">"Wed Oct 09 02:36:25 CST 2019"</span>,</span><br><span class="line"><span class="attr">"orderId"</span>:<span class="number">201909090001</span>,</span><br><span class="line"><span class="attr">"orderStatus"</span>:<span class="string">"CREATED"</span>,</span><br><span class="line"><span class="attr">"orderedProducts"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">"price"</span>:<span class="number">799.990000000000009094947017729282379150390625</span>,</span><br><span class="line"><span class="attr">"productId"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"吉他"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="attr">"price"</span>:<span class="number">30</span>,</span><br><span class="line"><span class="attr">"productId"</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"变调夹"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="attr">"paymentType"</span>:<span class="string">"CASH"</span>,</span><br><span class="line"><span class="attr">"totalMoney"</span>:<span class="string">"829.990000000000009094947017729282379150390625"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结论：</strong></p><ol><li>日期不符合要求</li><li>属性名不一样时不复制</li><li>目标对象中的商品集合变成了DTO的对象，这是因为List的泛型被擦除了，而且是浅拷贝，所以造成这种现象。</li></ol><h3 id="第5种：Spring封装BeanUtils工具类"><a href="#第5种：Spring封装BeanUtils工具类" class="headerlink" title="第5种：Spring封装BeanUtils工具类"></a>第5种：Spring封装BeanUtils工具类</h3><p>缺点：会出现属性丢失</p><p><strong>使用方式：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 对象属性转换，忽略orderedProducts字段 */</span></span><br><span class="line">BeanUtils.copyProperties(orderDTO, orderVO, <span class="string">"orderedProducts"</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 目标对象 */</span></span><br><span class="line">{</span><br><span class="line"><span class="string">"orderId"</span>:<span class="number">201909090001</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结论：</strong></p><ol><li>可以忽略部分属性</li><li>属性类型不同，不能转换</li><li>属性名称不同，不能转换</li></ol><blockquote><p>apache的<code>BeanUtils</code>和spring的<code>BeanUtils</code>中拷贝方法的原理都是先用jdk中 <code>java.beans.Introspector</code>类的<code>getBeanInfo()</code>方法获取对象的属性信息及属性get/set方法，接着使用反射（<code>Method</code>的<code>invoke(Object obj, Object... args)</code>）方法进行赋值。  </p></blockquote><h3 id="第6种：BeanCopier"><a href="#第6种：BeanCopier" class="headerlink" title="第6种：BeanCopier"></a>第6种：BeanCopier</h3><p>cglib工具包的<code>BeanCopier</code>采用了不同的方法：它不是利用反射对属性进行赋值，而是直接使用ASM的<code>MethodVisitor</code>直接编写各属性的<code>get/set</code>方法生成class文件，然后进行执行。</p><p>优点：字节码技术，速度快，自定义地处理的属性，其他未处理的属性就不行，提供自己自定义转换逻辑的方式<br>缺点：转换逻辑自己写，比较复杂，繁琐；属性名称相同，类型不同，不会拷贝（原始类型和包装类型也被视为类型不同） </p><p><strong>使用方式：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造转换器对象，最后的参数表示是否需要自定义转换器</span></span><br><span class="line">BeanCopier beanCopier = BeanCopier.create(orderDTO.getClass(), orderVO.getClass(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换对象，自定义转换器处理特殊字段</span></span><br><span class="line">beanCopier.copy(orderDTO, orderVO, (value, target, context) -&gt; {</span><br><span class="line">    <span class="comment">// 原始数据value是Date类型，目标类型target是String</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"String"</span>.equals(target.getSimpleName())) {</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line">            <span class="keyword">return</span> sdf.format(value);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="comment">// 未匹配上的字段，原值返回</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p><strong>报错</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: com.imooc.demo.OrderStatus cannot be cast to java.lang.String</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line">{</span><br><span class="line"><span class="string">"orderDate"</span>:<span class="string">"2019-10-09 03:07:13.768"</span>,</span><br><span class="line"><span class="string">"orderId"</span>:<span class="number">201909090001</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结论：</strong></p><ol><li>字节码技术，速度快</li><li>提供自己自定义转换逻辑的方式</li><li>转换逻辑自己写，比较复杂，繁琐</li><li>属性名称相同，类型不同，不会拷贝（原始类型和包装类型也被视为类型不同）</li></ol><h3 id="第7种：Dozer框架"><a href="#第7种：Dozer框架" class="headerlink" title="第7种：Dozer框架"></a>第7种：Dozer框架</h3><p>使用以上类库虽然可以不用手动编写<code>get/set</code>方法，但是他们都不能对<code>不同名称</code>的对象属性进行映射。在定制化的属性映射方面做得比较好的有Dozer，Dozer支持简单属性映射、复杂类型<code>映射</code>、<code>双向映射</code>、<code>隐式映射</code>以及<code>递归映射</code>。可使用<code>xml</code>或者<code>注解</code>进行映射的配置，支持<code>自动类型</code>转换，使用方便。但<code>Dozer底层</code>是使用reflect包下Field类的set(Object obj, Object value)方法进行属性赋值，执行速度上不是那么理想。</p><p><strong>使用方式：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建转换器对象，强烈建议创建全局唯一的，避免不必要的开销</span></span><br><span class="line">DozerBeanMapper mapper = <span class="keyword">new</span> DozerBeanMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载映射文件</span></span><br><span class="line">mapper.addMapping(TransferTest.class.getResourceAsStream("/mapping.xml"));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line">orderVO = mapper.map(orderDTO, OrderVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结果：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line">{</span><br><span class="line"><span class="attr">"orderDate"</span>:<span class="string">"2019-10-09 15:49:24.619"</span>,</span><br><span class="line"><span class="attr">"orderStatus"</span>:<span class="string">"CREATED"</span>,</span><br><span class="line"><span class="attr">"orderedProducts"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"吉他"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="attr">"productName"</span>:<span class="string">"变调夹"</span>,</span><br><span class="line"><span class="attr">"quantity"</span>:<span class="number">1</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="attr">"paymentType"</span>:<span class="string">"CASH"</span>,</span><br><span class="line"><span class="attr">"shopName"</span>:<span class="string">"慕课商铺"</span>,</span><br><span class="line"><span class="attr">"totalMoney"</span>:<span class="string">"829.99"</span>,</span><br><span class="line"><span class="attr">"userName"</span>:<span class="string">"张小喜"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>配置的字段映射文件：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappings</span> <span class="attr">xmlns</span>=<span class="string">"http://dozer.sourceforge.net"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://dozer.sourceforge.net</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://dozer.sourceforge.net/schema/beanmapping.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 一组类映射关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类A和类B --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class-a</span>&gt;</span>com.imooc.demo.OrderDTO<span class="tag">&lt;/<span class="name">class-a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class-b</span>&gt;</span>com.imooc.demo.OrderVO<span class="tag">&lt;/<span class="name">class-b</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 一组需要映射的特殊属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>shopInfo.shopName<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>shopName<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 将嵌套对象中的某个属性值映射到目标对象的指定属性上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>userInfo.userName<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>userName<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 将Date对象映射成指定格式的日期字符串 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>orderDate<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span> <span class="attr">date-format</span>=<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>&gt;</span>orderDate<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自定义属性转化器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">custom-converter</span>=<span class="string">"com.imooc.demo.DozerCustomConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>totalMoney<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>totalMoney<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 忽略指定属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field-exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>orderId<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>orderId<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field-exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div><p><strong>自定义转换器：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DozerCustomConverter</span> <span class="keyword">implements</span> <span class="title">CustomConverter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">convert</span><span class="params">(Object destination, Object source, Class&lt;?&gt; destClass, Class&lt;?&gt; sourceClass)</span> </span>{</span><br><span class="line">        <span class="comment">// 如果原始属性为BigDecimal类型</span></span><br><span class="line">        <span class="keyword">if</span> (source <span class="keyword">instanceof</span> BigDecimal) {</span><br><span class="line">            <span class="comment">// 目标属性为String类型</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"String"</span>.equals(destClass.getSimpleName())) {</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(((BigDecimal) source).doubleValue());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> destination;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>结论：</strong></p><ol><li>支持多种数据类型自动转换（双向的）</li><li>支持不同属性名之间转换</li><li>支持三种映射配置方式（注解方式，API方式，XML方式）</li><li>支持配置忽略部分属性</li><li>支持自定义属性转换器</li><li>嵌套对象深拷贝</li></ol><h3 id="第八种：MapStruct框架："><a href="#第八种：MapStruct框架：" class="headerlink" title="第八种：MapStruct框架："></a>第八种：MapStruct框架：</h3><p>基于JSR269的Java注解处理器，通过注解配置映射关系，在编译时自动生成接口实现类。类似于Lombok的原理一样。</p><h3 id="第九种：Orika框架："><a href="#第九种：Orika框架：" class="headerlink" title="第九种：Orika框架："></a>第九种：Orika框架：</h3><p>支持在代码中注册字段映射，通过javassist类库生成Bean映射的字节码，之后直接加载执行生成的字节码文件。</p><h3 id="第十种：ModelMapper框架："><a href="#第十种：ModelMapper框架：" class="headerlink" title="第十种：ModelMapper框架："></a>第十种：ModelMapper框架：</h3><p>基于反射原理进行赋值或者直接对成员变量赋值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>介绍的这些转换方法中，在性能上基本遵循：手动赋值 &gt; cglib    &gt; 反射 &gt; Dozer &gt; 序列化。</p></blockquote><p>在实际项目中，需要综合使用上述方法进行模型转换。<br>比如较低层的DO，因为涉及到的嵌套对象少，改动也少，所以可以使用BeanUtils直接转。<br>如果是速度、稳定优先的系统，还是简单粗暴地使用Set、Get实现吧。</p><h2 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h2><ul><li>本篇学习于慕课网-张小喜老师<a href="http://www.imooc.com/article/293314" target="_blank" rel="noopener">手记</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.zeffon.cn/categories/Java/"/>
    
    
      <category term="java" scheme="https://www.zeffon.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql并发访问事务问题</title>
    <link href="https://www.zeffon.cn/posts/90824423.html"/>
    <id>https://www.zeffon.cn/posts/90824423.html</id>
    <published>2019-10-13T04:00:00.000Z</published>
    <updated>2020-04-08T13:20:07.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Mysql事务并发访问导致的问题–更新丢失、脏读、不可重复读、幻读。<br>Mysql数据库事务的<code>四大</code>特性–原子性、一致性、隔离性、持久性。而<code>锁</code>是数据库中的一个非常重要的概念，它主要用于多用户环境下保证数据库<code>完整性</code>和<code>一致性</code>。如果在<code>多用户</code>并发情况下，他们的事务<code>同时</code>对<code>相同</code>的数据进行操作，是会导致更新丢失、脏读、不可重复读、幻读的问题的。</p><h3 id="更新丢失"><a href="#更新丢失" class="headerlink" title="更新丢失"></a>更新丢失</h3><ol><li>Mysql所有事务隔离级别在数据库层面上均可避免<code>更新丢失</code>问题</li><li>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题。</li><li>每个事务都不知道其它事务的存在。最后的更新将重写由其它事务所做的更新，这将导致数据丢失。</li><li>如果在<code>A事务</code>完成之后，<code>B事务</code>才能进行更改，则可以避免该问题。</li></ol><p><strong>更新丢失Demo</strong>  </p><table><thead><tr><th align="center">取款事务</th><th align="center">存款事务</th></tr></thead><tbody><tr><td align="center">开始事务</td><td align="center">开始事务</td></tr><tr><td align="center">查询转账余额为100元</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">查询转账余额为100元</td></tr><tr><td align="center"></td><td align="center">存入20元，余额变为120元</td></tr><tr><td align="center"></td><td align="center">提交事务</td></tr><tr><td align="center">取出10元，余额改为90元</td><td align="center"></td></tr><tr><td align="center">回滚事务，余额恢复为100元</td><td align="center">更新丢失</td></tr></tbody></table><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><ol><li>READ-COMMITTED事务隔离级别以上可避免–<code>脏读</code>问题</li><li>脏读就是指当一个事务正在访问数据，并且对数据进行了<code>修改</code>，而这种修改还<code>没有提交</code>到数据库中，这时，<code>另外</code>一个事务也访问这个数据，然后<code>使用</code>了这个数据。因为这个数据是<code>还没有提交</code>的数据，那么另外一个事务读到的这个数据是<code>脏数据</code>，依据脏数据所做的操作可能是不正确的。</li><li>如果在<code>B事务</code>确定最终更改前，<code>A事务</code>或者其它事务都<code>不能读取</code>更改的文档，则可以避免该问题。</li></ol><p><strong>脏读Demo</strong></p><p>数据库默认的隔离级别是REPEATABLE-READ。为了演示脏读效果，需要先将数据库隔离级别设置成READ-UNCOMMITTED。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th align="center">A事务</th><th align="center">B事务</th></tr></thead><tbody><tr><td align="center">开始事务</td><td align="center">开始事务</td></tr><tr><td align="center">1账户余额1000元，转出100元</td><td align="center"></td></tr><tr><td align="center">查询1账户剩900元</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">查询1账户剩900元</td></tr><tr><td align="center">没有进行事务提交，而是事务回滚，余额恢复1000元</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">不知道A事务进行回滚，对1账户存入200元</td></tr><tr><td align="center"></td><td align="center">提交事务</td></tr><tr><td align="center"></td><td align="center">再次查询1账户余额1100</td></tr></tbody></table><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><ol><li>REPEATABLE_READ事务隔离级别以上可避免–不可重复读问题</li><li>不可重复读是指在一个事务内，<code>多次</code>读<code>同一</code>数据。在这个事务<code>还没有结束</code>时，另外一个事务也访问该<code>同一数据</code>。那么，在第一个事务中的<code>两次</code>读数据<code>之间</code>，由于第二个事务的<code>修改</code>，那么第一个事务两次读到的的数据可能是<code>不一样</code>的。</li><li>如果在<code>B事务</code>确定最终<code>更改前</code>，<code>A事务</code>或者其它事务都不能<code>读取</code>更改的文档，则可以避免该问题。</li></ol><p><strong>不可重复读Demo</strong></p><table><thead><tr><th align="center">A事务</th><th align="center">B事务</th></tr></thead><tbody><tr><td align="center">开始事务</td><td align="center">开始事务</td></tr><tr><td align="center">查询1账户余额1300元</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">对1账户存入300元</td></tr><tr><td align="center"></td><td align="center">查询1账户剩1600元</td></tr><tr><td align="center"></td><td align="center">进行事务提交</td></tr><tr><td align="center">查询1账户余额1600元</td><td align="center"></td></tr></tbody></table><ul><li>数据库默认的隔离级别是REPEATABLE-READ。若将数据库隔离级别设置成REPEATABLE_READ，则<code>A事务第二次</code>查询余额还是1300元，不会是1600元。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><ol><li>SERIALIZABLE事务隔离级别可避免–<code>幻读</code>问题</li><li>幻读与不可重复读看似<code>类似</code>，不可重复读侧重于对同一数据的<code>修改</code>，幻读侧重于<code>新增</code>或<code>删除</code>。</li><li>幻觉读是指当事务不是<code>独立</code>执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的<code>全部数据行</code>。同时，第二个事务也修改这个表中的数据，这种修改是向表中<code>插入</code>一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有<code>没有修改</code>的数据行，就好象发生了幻觉一样。</li></ol><p><strong>幻读Demo</strong></p><table><thead><tr><th align="center">A事务</th><th align="center">B事务</th></tr></thead><tbody><tr><td align="center">开始事务</td><td align="center">开始事务</td></tr><tr><td align="center">查询全部账号余额，当前有3个账号</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">新增4账号及其余额</td></tr><tr><td align="center"></td><td align="center">进行事务提交</td></tr><tr><td align="center">更新所有的账户余额</td><td align="center"></td></tr><tr><td align="center">出现有四个账号幻读的现象</td><td align="center"></td></tr></tbody></table><ul><li>数据库默认的隔离级别是REPEATABLE-READ。若将数据库隔离级别设置成SERIALIZABLE，则<code>B事务</code>新增账号4需要等待<code>A事务</code>操作完才能进行。  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span>;</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong><code>事务并发访问引起的问题以及如何避免</code></strong></p><table><thead><tr><th align="center">事务隔离级别</th><th align="center">更新丢失</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">未提交读</td><td align="center">避免</td><td align="center">发生</td><td align="center">发生</td><td align="center">发生</td></tr><tr><td align="center">已提交读</td><td align="center">避免</td><td align="center">避免</td><td align="center">发生</td><td align="center">发生</td></tr><tr><td align="center">可重复读</td><td align="center">避免</td><td align="center">避免</td><td align="center">避免</td><td align="center">发生</td></tr><tr><td align="center">串行化</td><td align="center">避免</td><td align="center">避免</td><td align="center">避免</td><td align="center">避免</td></tr></tbody></table><ul><li>事务级别越高安全性越高，串行化执行越严重，这样就可以降低数据库的并发度，但性能要求也会越高。</li></ul><h3 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h3><p><a href="https://blog.csdn.net/huangli1466384630/article/details/80862693" target="_blank" rel="noopener">sql语句对数据库表进行加锁和解锁</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://www.zeffon.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>修改Git已提交的用户名和邮箱</title>
    <link href="https://www.zeffon.cn/posts/e7e42196.html"/>
    <id>https://www.zeffon.cn/posts/e7e42196.html</id>
    <published>2019-10-12T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.775Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>修改本地全局Git的提交用户名和邮箱和推送过的git用户名和邮箱</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="本地全局Git的提交用户名和邮箱"><a href="#本地全局Git的提交用户名和邮箱" class="headerlink" title="本地全局Git的提交用户名和邮箱"></a>本地全局Git的提交用户名和邮箱</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config –global user.name “Your Name”</span><br><span class="line">$ git config –global user.email “Your Email”</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><strong><code>注意：</code></strong> 这种方法只对之后的<code>Commit</code>有效，之前提交过记录就改不了了。</p></blockquote><h3 id="强行修改推送过的git用户名和邮箱"><a href="#强行修改推送过的git用户名和邮箱" class="headerlink" title="强行修改推送过的git用户名和邮箱"></a>强行修改推送过的git用户名和邮箱</h3><ol><li><p>打开本地终端</p></li><li><p>打开需要修改的项目的根目录</p></li><li><p>复制下面的脚本，可以直接复制到终端命令行里或新建 Shell 脚本，并修改 oldEmail, newName, newEmail 三个变量为你自己的  </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">oldEmail="Your Old Email"</span></span><br><span class="line"><span class="string">newName="Your New Name"</span></span><br><span class="line"><span class="string">newEmail="Your New Email"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$oldEmail" ]; then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME="$newName"</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL="$newEmail"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$oldEmail" ]; then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME="$newName"</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL="$newEmail"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>执行脚本，看到一堆 rewritten 的时候就说明写入完成了</p></li><li><p>git log 查看新的 Commit 信息是否正确</p></li><li><p>再次推送时会失败，只能强制推送了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master -f</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>删除临时文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ rm -rf repo.git</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.zeffon.cn/categories/Git/"/>
    
    
      <category term="git" scheme="https://www.zeffon.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>初识spu和sku</title>
    <link href="https://www.zeffon.cn/posts/f34d9f58.html"/>
    <id>https://www.zeffon.cn/posts/f34d9f58.html</id>
    <published>2019-10-06T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>SPU</code>英文全称Standard Product Unit(标准产品单位)、<code>SKU</code>英文全称stock keeping unit(库存量单位)。</p><h3 id="商品SPU"><a href="#商品SPU" class="headerlink" title="商品SPU"></a>商品SPU</h3><ol><li>SPU 是<code>商品</code>信息聚合的<code>最小</code>单位，是一组<code>可复用</code>、<code>易检索</code>的标准化信息的<code>集合</code>，该集合描述了一个产品的特性。</li><li>我们在浏览<a href="https://www.apple.com/cn/mac/" target="_blank" rel="noopener">mac官网</a>时，上栏有MacBook Air、MacBook Pro、iMac…等等。其中MacBook Air是一个SPU，MacBook Pro也是一个SPU，iMac也是一个SPU。<br>简单的说：<code>MacBook Air</code>就是一个SPU，这与颜色和内存大小<code>都无关</code>。<br>实际上指的就是<code>MacBook Air</code>这台笔记本。<img src="/images/2019/10/spu-and-sku-01.png" width="70%" alt="spu"></li></ol><h3 id="商品SKU"><a href="#商品SKU" class="headerlink" title="商品SKU"></a>商品SKU</h3><ol><li>SKU 即<code>库存</code>进出计量的单位， 可以是以件、盒、托盘等为单位。</li><li>当你点进<code>MacBook Air</code>购买时,页面有两种内存大小不同的款式，并且<code>不同</code>的款式间有三种颜色选择。<br>如果你选择 128G 银色 的<code>MacBook Air</code>。这时候你选择了具体的内存大小和颜色的<code>MacBook Air</code>就是一个SKU。<br>不同的内存大小<code>MacBook Air</code>的价格是肯定是不同，而且<code>不同</code>的颜色和内存大小的库存也是<code>不同</code>的。可能256G 银色这款比较受欢迎，所以256G 银色 的<code>MacBook Air</code>库存会比较少。<img src="/images/2019/10/spu-and-sku-02.png" width="70%" alt="sku"></li></ol><h2 id="SPU和SKU间关系"><a href="#SPU和SKU间关系" class="headerlink" title="SPU和SKU间关系"></a>SPU和SKU间关系</h2><ul><li>结合前面所举的列子来看，SPU与SKU两者的<code>关系</code>似乎就是类目下包含SPU，SPU包含SKU。  </li></ul><ol><li>SPU是一个<code>抽象概念</code>的商品（MacBook Air），而SKU是一个<code>更为具体</code>的商品（128G 银色 的MacBook Air）。这里不难看出商品SKU<code>从属于</code>商品SPU。</li><li>由于SKU从属于SPU，故两者的<code>功能</code>有所差别：<br> SPU通常是用来<code>定位</code>某件商品，而SKU通常是用来<code>定价</code>和<code>管理库存</code>。<img src="/images/2019/10/spu-and-sku-03.png" width="70%" alt="spu-and-sku-relation"></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis的使用</title>
    <link href="https://www.zeffon.cn/posts/2ba83191.html"/>
    <id>https://www.zeffon.cn/posts/2ba83191.html</id>
    <published>2019-09-12T03:53:54.000Z</published>
    <updated>2020-02-18T09:01:27.773Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><p>在<a href="https://redis.io/" target="_blank" rel="noopener">Redis</a>官网，下载Redis安装包，当前最新版本<a href="http://download.redis.io/releases/redis-5.0.5.tar.gz" target="_blank" rel="noopener">5.0.5</a>。安装Redis需要先提前安装好gcc相关的包。<br>如果不需要太高的版本，4.x.x+版本也可以了。这里就使用4.0.8演示。</p><ol><li><p>验证linux中是否已安装redis (下面这种情况是已安装的)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ whereis redis-cli</span><br><span class="line">redis-cli: /usr/<span class="built_in">local</span>/bin/redis-cli</span><br><span class="line">$ whereis redis-server</span><br><span class="line">redis-server: /usr/<span class="built_in">local</span>/bin/redis-server</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装gcc</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y open-ssl-devel gcc glibc gcc-c*</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装包下载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-4.0.8.tar.gz</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>解压安装包</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xzf redis-4.0.8.tar.gz</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>拷贝的local目录下并进入该目录</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp -rf redis-4.0.8 /usr/<span class="built_in">local</span>/ </span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-4.0.8</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>编译安装</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make </span><br><span class="line">$ make install</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>添加redis到命令到全局变量，方便在任何目录执行；</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/usr/local/redis-4.0.8/bin"</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h3><ol><li>服务端启动redis服务器，命令如下，指定配置文件：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /usr/<span class="built_in">local</span>/redis-4.0.8/src/redis.conf</span><br></pre></td></tr></tbody></table></figure></div></li><li>客户端启动<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./redis-cli  -h 127.0.0.1  -p 6379 -n 2  -a test123</span><br><span class="line">-h  指定远程登陆ip</span><br><span class="line">-p  指定远程redis访问端口</span><br><span class="line">-n  指定库b编号</span><br><span class="line">-a  指定密码</span><br></pre></td></tr></tbody></table></figure></div></li><li>关闭redis服务<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep redis</span><br><span class="line">root     29185     1  0 09:58 ?        00:00:00 redis-server 0.0.0.0:6379</span><br><span class="line">root     29190 29159  0 09:58 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">$ <span class="built_in">kill</span> -9 29185</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="redis配置参数"><a href="#redis配置参数" class="headerlink" title="redis配置参数"></a>redis配置参数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">2. 指定Redis监听端口，默认端口为6379</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">3.当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line">4. 设置Redis连接密码，默认关闭</span><br><span class="line">requirepass password</span><br><span class="line"></span><br><span class="line">5. 在logfile中配置日志文件路径。</span><br><span class="line">logfile <span class="string">"/var/log/redis.log"</span></span><br><span class="line"></span><br><span class="line">6. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line">databases 1</span><br></pre></td></tr></tbody></table></figure></div><h3 id="解决无法连接问题"><a href="#解决无法连接问题" class="headerlink" title="解决无法连接问题"></a>解决无法连接问题</h3><ul><li>先修改<code>redis.conf</code>的配置内容<br>设置禁用模式为<code>no</code>和设置<code>密码</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&gt;protected-mode&nbsp;no     </span><br><span class="line">b&gt;requirepass password</span><br><span class="line">c&gt;注释<span class="built_in">bind</span>:127.0.0.1(或者修改为<span class="built_in">bind</span> 0.0.0.0 -&gt;&gt;代表允许任意ip的请求)</span><br><span class="line">d&gt;重新启动：./src/redis-server redis.conf</span><br></pre></td></tr></tbody></table></figure></div></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.zeffon.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://www.zeffon.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Java项目</title>
    <link href="https://www.zeffon.cn/posts/70ec72e4.html"/>
    <id>https://www.zeffon.cn/posts/70ec72e4.html</id>
    <published>2019-09-11T04:23:10.000Z</published>
    <updated>2020-02-18T09:01:27.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介绍使用Docker通过Dockerfile文件定制SpringBoot项目的Jar成镜像，并推送到阿里私有的镜像仓库。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h3><p>Docker是DotCloud开源的、可以将任何应用包装在Linux container中运行的工具。基于Docker的沙箱环境可以实现轻型隔离，多个容器间不会相互影响；Docker可以自动化打包和部署任何应用，方便地创建一个轻量级私有PaaS云，也可以用于搭建开发测试环境以及部署可扩展的web应用等。</p><h3 id="阿里容器服务"><a href="#阿里容器服务" class="headerlink" title="阿里容器服务"></a>阿里容器服务</h3><p>容器服务提供高性能可伸缩的容器应用管理服务，支持用 Docker 和 Kubernetes 进行容器化应用的生命周期管理，提供多种应用发布方式和持续交付能力并支持微服务架构。容器服务简化了容器管理集群的搭建工作，整合了阿里云虚拟化、存储、网络和安全能力，打造云端最佳容器运行环境。</p><h2 id="项目打包-amp-amp-构建镜像"><a href="#项目打包-amp-amp-构建镜像" class="headerlink" title="项目打包&amp;&amp;构建镜像"></a>项目打包&amp;&amp;构建镜像</h2><h3 id="Java应用打包"><a href="#Java应用打包" class="headerlink" title="Java应用打包"></a>Java应用打包</h3><ol><li><p>将Java应用进行打包(需要进入项目的根目录)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package -Dmaven.test.skip=<span class="literal">true</span> .</span><br></pre></td></tr></tbody></table></figure></div><p>命令解释: <code>clean</code>清除之前的包、<code>-Dmaven.test.skip=true</code> 跳过测试用例、<code>.</code> 表示当前目录下</p></li><li><p>创建Dockerfile文件定制镜像(Docker运行的脚本)，并编写脚本内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi Dockerfile <span class="comment"># 在项目根目录下</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM hub.c.163.com/library/java:8-alpine</span><br><span class="line">ADD target/*.jar app.jar</span><br><span class="line">EXPOSE 8085</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/app.jar"</span>]</span><br><span class="line"><span class="comment"># FROM 从hub.c.163.com国内仓库拉取java包，</span></span><br><span class="line"><span class="comment"># ADD 添加相对路径下的某个jar包，并且重命名为app.jar</span></span><br><span class="line"><span class="comment"># EXPOSE 输出端口为8085</span></span><br><span class="line"><span class="comment"># ENTRYPOINT 运行命令为 java -jar app.jar</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="镜像构建与运行"><a href="#镜像构建与运行" class="headerlink" title="镜像构建与运行"></a>镜像构建与运行</h3><ol><li><p>构建Docker镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t xiaozhi/doorplate . <span class="comment"># 注意最后需要加上 . </span></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line"><span class="comment"># REPOSITORY:TAG 给镜像指定一个名称或版本(不指定时默认为latest)</span></span><br><span class="line"><span class="comment"># 所以这里的镜像名称为doorplate</span></span><br><span class="line"><span class="comment"># . 表示当前目录</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>查看刚刚构建Docker镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY                    TAG            IMAGE ID        CREATED          SIZE</span><br><span class="line">xiaozhi/doorplate            latest        3d7074872868     33 seconds ago    186MB</span><br><span class="line">hub.c.163.com/library/java   8-alpine      d991edd81416      2 years ago      145MB</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>运行Docker镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 8899:8085 xiaozhi/doorplate</span><br><span class="line"><span class="comment"># docker run -d -p 主机端口:容器端口 容器的名称</span></span><br><span class="line"><span class="comment"># 8899是本机访问的端口，8085是Docker内部的端口  -d 后台运行</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>查看正在运行的Docker镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">843bc974634f        xiaozhi/doorplate   <span class="string">"java -jar /doorplat…"</span>   3 seconds ago       Up 2 seconds        0.0.0.0:8085-&gt;8085/tcp   nostalgic_thompson</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="阿里镜像推送"><a href="#阿里镜像推送" class="headerlink" title="阿里镜像推送"></a>阿里镜像推送</h2><p>这里将本地的镜像推送到阿里云的私有库。所以需要先在阿里云的镜像仓库中注册账号。</p><h3 id="阿里容器镜像服务"><a href="#阿里容器镜像服务" class="headerlink" title="阿里容器镜像服务"></a>阿里容器镜像服务</h3><ol><li>登陆阿里云账号，搜索<code>容器镜像服务</code>，没开通服务的话需要开通服务。</li><li>左侧默认实例下点进命名空间，在右上角创建命名空间</li><li>点进镜像仓库，选择命名空间进行创建镜像仓库，代码源选择本地仓库。</li><li>点进生成镜像的管理，里面有操作指南，根据提示推送本地镜像即可。</li></ol><h3 id="本地镜像推送"><a href="#本地镜像推送" class="headerlink" title="本地镜像推送"></a>本地镜像推送</h3><blockquote><p><strong><code>注意</code></strong> 推送的<code>镜像名称</code>需要与<code>阿里私有库上</code>的命名的镜像名称一致。</p></blockquote><ol><li><p>先登录阿里云Docker Registry(这里的登陆密码是镜像服务的密码，不是阿里云账号密码)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login --username=1355564603@qq.com registry.cn-shenzhen.aliyuncs.com</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>推送前重新打包一下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package -Dmaven.test.skip=<span class="literal">true</span> .</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>构建一个推送阿里云的镜像</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t registry.cn-shenzhen.aliyuncs.com/zeffon/doorplate .</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>镜像推送到Registry</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push registry.cn-shenzhen.aliyuncs.com/zeffon/doorplate</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>简化繁琐操作，将上面三条命令写成脚本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi Build.sh <span class="comment"># 在项目根目录下 </span></span><br><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span> -U  <span class="comment"># 这里使用 -U 强制更新</span></span><br><span class="line">docker build -t registry.cn-shenzhen.aliyuncs.com/zeffon/doorplate .</span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/zeffon/doorplate</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.zeffon.cn/categories/Docker/"/>
    
    
      <category term="springBoot" scheme="https://www.zeffon.cn/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Linux搭建Docker环境</title>
    <link href="https://www.zeffon.cn/posts/5ac7620d.html"/>
    <id>https://www.zeffon.cn/posts/5ac7620d.html</id>
    <published>2019-09-10T11:23:02.000Z</published>
    <updated>2020-02-18T09:01:27.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><h3 id="版本问题和卸载旧版本"><a href="#版本问题和卸载旧版本" class="headerlink" title="版本问题和卸载旧版本"></a>版本问题和卸载旧版本</h3><p><strong>64-bit 系统 kernel 3.10+</strong></p><ol><li>检查内核版本，返回的值大于3.10即可。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.0-693.el7.x86_64 <span class="comment"># 64-bit 系统 kernel 3.10+</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>使用 sudo 或 root 权限的用户登入终端。</li><li>卸载旧版本(如果安装过旧版本的话)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove docker \</span><br><span class="line">      docker-common \</span><br><span class="line">      docker-selinux \</span><br><span class="line">      docker-engine</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装包和其他驱动依赖"><a href="#安装包和其他驱动依赖" class="headerlink" title="安装包和其他驱动依赖"></a>安装包和其他驱动依赖</h3><ol><li>安装需要的软件包驱动依赖<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></tbody></table></figure></div></li><li>设置yum源<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure></div></li></ol><p>1.安装docker</p><ul><li><code>第一种</code>: 直接安装最新本<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker-ce</span><br></pre></td></tr></tbody></table></figure></div></li><li><code>第二种</code>: 安装指定版本<br>查询版本列表<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable</span><br></pre></td></tr></tbody></table></figure></div>指定版本安装(这里的例子是安装上面列表中的第一个)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker-ce-3:19.03.1</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h2 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h2><h3 id="启动与验证"><a href="#启动与验证" class="headerlink" title="启动与验证"></a>启动与验证</h3><ul><li>启动 docker 服务<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker <span class="comment"># 如果想添加到开机启动</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="attr">Version:</span>           <span class="number">19.03</span><span class="number">.1</span></span><br><span class="line"><span class="attr">API version:</span>       <span class="number">1.40</span></span><br><span class="line"><span class="attr">Go version:</span>        <span class="string">go1.12.5</span></span><br><span class="line"><span class="attr">Git commit:</span>        <span class="string">74b1e89</span></span><br><span class="line"><span class="attr">Built:</span>             <span class="string">Thu</span> <span class="string">Jul</span> <span class="number">25</span> <span class="number">21</span><span class="string">:21:07</span> <span class="number">2019</span></span><br><span class="line"><span class="attr">OS/Arch:</span>           <span class="string">linux/amd64</span></span><br><span class="line"><span class="attr">Experimental:</span>      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span> <span class="string">Docker</span> <span class="string">Engine</span> <span class="bullet">-</span> <span class="string">Community</span></span><br><span class="line"><span class="attr">Engine:</span></span><br><span class="line"><span class="attr">Version:</span>          <span class="number">19.03</span><span class="number">.1</span></span><br><span class="line"><span class="attr">API version:</span>      <span class="number">1.40</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></span><br><span class="line"><span class="attr">Go version:</span>       <span class="string">go1.12.5</span></span><br><span class="line"><span class="attr">Git commit:</span>       <span class="string">74b1e89</span></span><br><span class="line"><span class="attr">Built:</span>            <span class="string">Thu</span> <span class="string">Jul</span> <span class="number">25</span> <span class="number">21</span><span class="string">:19:36</span> <span class="number">2019</span></span><br><span class="line"><span class="attr">OS/Arch:</span>          <span class="string">linux/amd64</span></span><br><span class="line"><span class="attr">Experimental:</span>     <span class="literal">false</span></span><br><span class="line"><span class="attr">containerd:</span></span><br><span class="line"><span class="attr">Version:</span>          <span class="number">1.2</span><span class="number">.6</span></span><br><span class="line"><span class="attr">GitCommit:</span>        <span class="string">894b81a4b802e4eb2a91d1ce216b8817763c29fb</span></span><br><span class="line"><span class="attr">runc:</span></span><br><span class="line"><span class="attr">Version:</span>          <span class="number">1.0</span><span class="number">.0</span><span class="string">-rc8</span></span><br><span class="line"><span class="attr">GitCommit:</span>        <span class="string">425e105d5a03fabd737a126ad93d62a9eeede87f</span></span><br><span class="line"><span class="attr">docker-init:</span></span><br><span class="line"><span class="attr">Version:</span>          <span class="number">0.18</span><span class="number">.0</span></span><br><span class="line"><span class="attr">GitCommit:</span>        <span class="string">fec3683</span></span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="Docker-镜像加速地址"><a href="#Docker-镜像加速地址" class="headerlink" title="Docker 镜像加速地址"></a>Docker 镜像加速地址</h3><ol><li>添加编辑daemon.json<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">{</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://fy707np5.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>重新加载并<code>重启</code>Docker <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="Docker更新和卸载"><a href="#Docker更新和卸载" class="headerlink" title="Docker更新和卸载"></a>Docker更新和卸载</h3><ul><li>更新 Docker CE<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update docker-ce</span><br></pre></td></tr></tbody></table></figure></div></li><li>卸载 Docker CE<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br></pre></td></tr></tbody></table></figure></div></li><li>删除本地文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><strong><code>注意</code></strong> docker 的本地文件，包括镜像(images), 容器(containers), 存储卷(volumes)等，都需要手工删除。默认目录存储在 /var/lib/docker。</p></blockquote></li></ul><h2 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h2><h3 id="CURL安装出错"><a href="#CURL安装出错" class="headerlink" title="CURL安装出错"></a><code>CURL</code>安装出错</h3><p><strong>按照官方文档，使用<code>curl</code>方式安装<code>docker-compose</code>后，验证是否安装成功时出错</strong></p><ol><li>安装时使用的命令<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-`uname -s`-`ur/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure></div></li><li>如果启动时报如下错误,说明curl安装方式下载的包不完整。<br>[1814] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg</li></ol><h3 id="安装包手动下载"><a href="#安装包手动下载" class="headerlink" title="安装包手动下载"></a><code>安装包</code>手动下载</h3><ol><li>进入<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">官网</a>, 选择最新版手动下载。当前最新<code>1.25.0-rc2</code>的<code>docker-compose-Linux-x86_64</code></li><li>然后将文件上传到<code>/usr/local/bin/ 文件夹下</code>，然后将其重命名为<code>docker-compose</code>，修改此文件的<code>权限</code>，增加可执行：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure></div></li><li>然后再运行 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.25.0-rc2, build 661ac20e</span><br><span class="line">docker-py version: 4.0.1</span><br><span class="line">CPython version: 3.7.4</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0k  28 May 2019</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.zeffon.cn/categories/Docker/"/>
    
    
      <category term="linux" scheme="https://www.zeffon.cn/tags/linux/"/>
    
      <category term="docker" scheme="https://www.zeffon.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>免费https通配符证书申请与配置</title>
    <link href="https://www.zeffon.cn/posts/8ba17978.html"/>
    <id>https://www.zeffon.cn/posts/8ba17978.html</id>
    <published>2019-09-09T08:41:21.000Z</published>
    <updated>2020-02-18T09:01:27.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Certbot是EFF加密整个互联网的一部分。通过Web进行安全通信依赖于HTTPS，这需要使用数字证书，以便浏览器验证Web服务器的身份。</p><h3 id="Let’s-Encrypt-简介"><a href="#Let’s-Encrypt-简介" class="headerlink" title="Let’s Encrypt 简介"></a>Let’s Encrypt 简介</h3><p>随着阿里免费的HTTPS过期后，不得不使用免费使用HTTPS。所以就需要从证书授权机构(以下简称CA) 处获取一个证书，Let’s Encrypt 就是一个 CA。我们可以从 Let’s Encrypt 获得网站域名的免费的证书。这篇文章也主要讲的是通过 Let’s Encrypt + Nginx 来让网站升级到HTTPS。</p><h3 id="Certbot-简介"><a href="#Certbot-简介" class="headerlink" title="Certbot 简介"></a>Certbot 简介</h3><p>Certbot 是Let’s Encrypt官方推荐的获取证书的客户端，可以帮我们获取免费的Let’s Encrypt 证书。Certbot是EFF加密整个互联网的一部分。通过Web进行安全通信依赖于HTTPS，这需要使用数字证书，以便浏览器验证Web服务器的身份。Certbot 是支持所有 Unix 内核的操作系统的。</p><h2 id="申请与配置"><a href="#申请与配置" class="headerlink" title="申请与配置"></a>申请与配置</h2><h3 id="Certbot安装"><a href="#Certbot安装" class="headerlink" title="Certbot安装"></a>Certbot安装</h3><ol><li>使用 <code>Git</code> 下载 <code>certbot</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/certbot/certbot</span><br><span class="line">$ <span class="built_in">cd</span> certbot</span><br></pre></td></tr></tbody></table></figure></div></li><li><code>certbot-auto</code> 或者 <code>letsencrypt-auto</code>查看命令参数<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./certbot-auto --<span class="built_in">help</span></span><br><span class="line">或者</span><br><span class="line">$ ./letsencrypt-auto --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obtain, install, and renew certificates:</span><br><span class="line">(default) run   Obtain &amp; install a certificate in your current webserver</span><br><span class="line">certonly        Obtain or renew a certificate, but do not install it</span><br><span class="line">renew           Renew all previously obtained certificates that are near</span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">expiry</span><br><span class="line">  enhance         Add security enhancements to your existing configuration</span><br><span class="line">  -d DOMAINS       Comma-separated list of domains to obtain a certificate <span class="keyword">for</span></span><br><span class="line">  --apache          Use the Apache plugin <span class="keyword">for</span> authentication &amp; installation</span><br><span class="line">  --standalone      Run a standalone webserver <span class="keyword">for</span> authentication</span><br><span class="line">  --nginx           Use the Nginx plugin <span class="keyword">for</span> authentication &amp; installation</span><br><span class="line">  --webroot         Place files <span class="keyword">in</span> a server<span class="string">'s webroot folder for authentication</span></span><br><span class="line"><span class="string">  --manual          Obtain certificates interactively, or using shell script</span></span><br></pre></td></tr></tbody></table></figure></div>这里只对几个重要的命令参数进行说明</li></ol><ul><li><p>run：获取并安装证书到当前的Web服务器  </p></li><li><p>certonly：获取或续期证书，但是不安装  </p></li><li><p>renew：在证书快过期时，续期之前获取的所有证书  </p></li><li><p>-d DOMAINS：一个证书支持多个域名，用逗号分隔  </p></li><li><p>–apache：使用 Apache 插件来认证和安装证书  </p></li><li><p>–standalone：运行独立的 web server 来验证  </p></li><li><p>–nginx：使用 Nginx 插件来认证和安装证书  </p></li><li><p>–webroot：如果目标服务器已经有 web server 运行且不能关闭，可以通过往服务器的网站根目录放置文件的方式来验证  </p></li><li><p>–manual：通过交互式方式，或 Shell 脚本手动获取证书</p><blockquote><p>关于域名验证和证书的获取安装，上面提到了<code>5种</code>方式：–apache, –standalone, –nginx, –webroot 和 –manual，请根据实际情况选择其一。这里会讲常用Nginx安装方式。</p></blockquote></li></ul><h3 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h3><p>1. 使用 <code>certbot-auto</code> 来获取证书但不安装</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./certbot-auto --email zeffonwu@gmail.com -d <span class="string">"*.thxycn.xin"</span> -d <span class="string">"thxycn.xin"</span> --manual --preferred-challenges dns-01 certonly --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></tbody></table></figure></div><p> 注意将上面的邮箱和域名替换成自己的。需要两个-d：第一是通配符域名配置，第二个是主域名配置</p><blockquote><p><strong><code>注意</code></strong>   </p><ol><li>执行此命令必须使用 root用户获得文件夹的权限  </li><li>域名能访问并且有绑定的公网IP  </li><li>必须在此域名绑定的服务器上运行  </li><li>会使用80断端口，如果nginx监听80端口，把nginx先关掉  </li></ol></blockquote><p>2. 需要在域名上新添加一条解析记录(由于设置两个域名，这里解析记录值也要弄两次)<br>(<code>主机</code>：_acme-challenge <code>类型</code>：TXT <code>记录值</code>：L435P35DFHIBAOF34548QoqJHbD162748HUDF)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Please deploy a DNS TXT record under the name</span><br><span class="line">_acme-challenge.thxycn.xin with the following value:</span><br><span class="line"></span><br><span class="line">L435P35DFHIBAOF34548QoqJHbD162748HUDF</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><strong><code>注意</code>:</strong> 申请通配符证书是要经过DNS认证的，按照提示，前往域名后台添加对应的DNS TXT记录。添加之后，不要心急着按回车，先执行dig xxxx.xxx.com txt确认解析记录是否生效，生效之后再回去按回车确认  </p></blockquote><p>dig 命令安装：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install <span class="built_in">bind</span>-utils</span><br><span class="line">$ dig _acme-challenge.thxycn.xin</span><br><span class="line">下文出现TXT的值则可以</span><br><span class="line">;; ANSWER SECTION:                                                                                                                              </span><br><span class="line">_acme-challenge.thxycn.xin. 600 IN      TXT     <span class="string">"Refivf35ferdfaypw7ZvfnmkbHDSD8433IGA"</span></span><br></pre></td></tr></tbody></table></figure></div><p>3. 获取证书出现如下的 <code>NOTES</code>,说明证书创建成功了<br>  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line">- Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">  /etc/letsencrypt/live/thxycn.xin/fullchain.pem</span><br><span class="line">  Your key file has been saved at:</span><br><span class="line">  /etc/letsencrypt/live/thxycn.xin/privkey.pem</span><br><span class="line">  Your cert will expire on 2019-11-30. To obtain a new or tweaked</span><br><span class="line">  version of this certificate <span class="keyword">in</span> the future, simply run</span><br><span class="line">  letsencrypt-auto again. To non-interactively renew *all* of your</span><br><span class="line">  certificates, run <span class="string">"letsencrypt-auto renew"</span></span><br></pre></td></tr></tbody></table></figure></div><p></p><p>4. 查看证书(证书默认保存在<code>/etc/letsencrypt/live/thxycn.xin</code>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">README  cert.pem  chain.pem  fullchain.pem  privkey.pem</span><br></pre></td></tr></tbody></table></figure></div><p>而Nginx配置证书我们需要用到的证书是 <code>fullchain.pem</code> 和 <code>privkey.pem</code>。</p><h3 id="Nginx证书配置"><a href="#Nginx证书配置" class="headerlink" title="Nginx证书配置"></a>Nginx证书配置</h3><p>1. 配置conf文件（<code>注意</code>更换自己的证书）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name thxycn.xin;</span><br><span class="line">    ssl on;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/thxycn.xin/fullchain.pem; # 替换自己的证书</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/thxycn.xin/privkey.pem; # 替换自己的证书</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html {</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">listen 80;</span><br><span class="line">server_name thxycn.xin;</span><br><span class="line">rewrite ^/(.*) https://$server_name$request_uri? permanent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2. 验证是否配置成功<br>使用 <code>https://thxycn.xin/index.html</code> 能访问到Nginx的欢迎页面，则配置成功。</p><h3 id="自动更新SSL证书"><a href="#自动更新SSL证书" class="headerlink" title="自动更新SSL证书"></a>自动更新SSL证书</h3><p>Let’s Encrypt提供的证书只有90天的有效期，所以我们需要写一个脚本在过期前定时重新获取证书。并且证书获取是要频次限制的–每7天5次。(limit ~5 per 7 days)。<br>1. 使用 <code>certbot renew</code> 自动更新证书</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ certbot-auto renew --manual <span class="comment"># 需要进入/usr/local/certbot目录</span></span><br><span class="line">或者可以使用强制更新</span><br><span class="line">$ certbot-auto --force-renew</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>但是却报错了。原因: 重新更新证书需要启动443端口，而这个端口被nginx占用着<br>解决方法: 其实很简单，就是在执行<code>certbot renew --dry-run</code>命令前，把Nginx停止 <code>systemctl stop nginx</code>, 执行成功后就把Nginx启动 <code>systemctl start nginx</code>。所以需要用到 <code>--pre-hook</code>（这个参数表示执行更新操作之前要做的事情）,<code>--post-hook</code>(这个参数表示执行更新操作完成后要做的事情)</p></blockquote><p>1. 定时设置(每1个月，凌晨10分执行)<br>新建 certbot-auto-renew-crontab.sh 文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir crontab <span class="comment"># 与usr同级下新建crontab目录</span></span><br><span class="line">$ vi certbot-auto-renew-crontab.sh</span><br><span class="line">10 0 * 1 * /usr/<span class="built_in">local</span>/certbot/certbot-auto --force-renew --pre-hook <span class="string">"systemctl stop nginx"</span> --post-hook <span class="string">"systemctl start nginx"</span> <span class="comment"># --force-renew 强制更新</span></span><br></pre></td></tr></tbody></table></figure></div><p>2. 用 <code>crontab</code> 来启动这个定时任务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab certbot-auto-renew-crontab.sh</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AVL树、红黑树和哈希表</title>
    <link href="https://www.zeffon.cn/posts/f534b102.html"/>
    <id>https://www.zeffon.cn/posts/f534b102.html</id>
    <published>2019-09-08T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.768Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h2><ol><li>AVL树对于任意一个节点，左子树和右子树的高度差不能为超过1。红黑树是一种自平衡二叉查找树。哈希表也称散列表。</li><li>平衡二叉树的高度和节点数量之间的关系也是<code>O(log n)</code>的。</li><li>AVL树节点的<code>平衡因子</code>是它的左子树的高度减去它的右子树的高度（有时相反）。带有平衡因子1、0或 -1的节点被认为是<code>平衡</code>的。带有平衡因子 -2或2的节点被认为是<code>不平衡</code>的，并需要<code>重新</code>平衡这个树。平衡因子可以直接<code>存储</code>在每个节点中，或从可能存储在节点中的<code>子树高度</code>计算出来。</li><li>AVL树的<code>基本操作</code>一般涉及运作同在<code>不平衡</code>的二叉查找树所运作的同样的算法。但是要进行预先或随后做一次或多次所谓的<code>AVL旋转</code>。</li><li>失去平衡后进行的规律可归纳为下列四种情况：  </li></ol><ul><li>右旋转(RR)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对节点y进行向右旋转操作，返回旋转后新的根节点x          T1&lt; z &lt; T2 &lt; x &lt; T3 &lt; y &lt; T4      </span><br><span class="line">       y                              x            x.right = y</span><br><span class="line">      / \                           /   \          y.left = T3</span><br><span class="line">     x   T4     向右旋转 (y)        z     y          </span><br><span class="line">    / \       - - - - - - - -&gt;    / \   / \          </span><br><span class="line">   z   T3                       T1  T2 T3 T4          </span><br><span class="line">  / \</span><br><span class="line">T1   T2</span><br></pre></td></tr></tbody></table></figure></div></li><li>左旋转(LL)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对节点y进行向左旋转操作，返回旋转后新的根节点x          T4 &lt; y &lt; T3 &lt; x &lt; T1 &lt; z &lt; T2</span><br><span class="line">   y                             x                 x.left = y</span><br><span class="line"> /  \                          /   \               y.right = T3</span><br><span class="line">T1   x      向左旋转 (y)       y     z           </span><br><span class="line">    / \   - - - - - - - -&gt;   / \   / \           </span><br><span class="line">  T2   z                    T1 T2 T3 T4           </span><br><span class="line">      / \</span><br><span class="line">     T3 T4</span><br></pre></td></tr></tbody></table></figure></div></li><li>LR<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">首先对x进行左旋转，转化为了LL的情况      </span><br><span class="line">       y                                y         </span><br><span class="line">      / \                              / \</span><br><span class="line">     x   T4     向左旋转 (x)           z   T4  </span><br><span class="line">    / \       - - - - - - - -&gt;      /  \       </span><br><span class="line">   T1  z                           x   T3     </span><br><span class="line">      / \                         / \</span><br><span class="line">    T2   T3                      T1 T2</span><br></pre></td></tr></tbody></table></figure></div></li><li>RL<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">首先对x进行右旋转，转化为了RR的情况</span><br><span class="line">   y                            y</span><br><span class="line">  / \                          / \</span><br><span class="line">T1   x      向右旋转 (x)       T1  z</span><br><span class="line">    / \   - - - - - - - -&gt;       / \</span><br><span class="line">   z  T4                        T2  x</span><br><span class="line">  / \                              / \</span><br><span class="line"> T2 T3                            T3 T4</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h2 id="Red-black-tree-红黑树"><a href="#Red-black-tree-红黑树" class="headerlink" title="Red black tree 红黑树"></a>Red black tree 红黑树</h2><p>红黑树等价于<code>2-3树</code>。红黑树是每个节点都<code>带有颜色</code>属性的二叉查找树</p><h3 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质 :"></a>红黑树性质 :</h3><ol><li>每个节点是红色或者黑色。</li><li><code>根节点</code>是黑色。</li><li>所有<code>叶子</code>都是黑色。</li><li>如果一个节点是红色的，那么它的孩子节点<code>都是</code>黑色的</li><li>从任意一个节点到叶子节点，经过的黑色节点是<code>一样</code>的。</li></ol><h3 id="性能总结"><a href="#性能总结" class="headerlink" title="性能总结"></a>性能总结</h3><ol><li>对于<code>完全随机</code>的数据，普通的<code>二分搜索树</code>很好用。<code>缺点</code>：极端情况退化成链表（或者高度不平衡）</li><li>对于<code>查询较多</code>的使用情况，<code>AVL树</code>很好用</li><li>红黑树牺牲了<code>平衡性</code>（2logn的高度），但它的<code>统计性能</code>更优（综合增删改查所有操作）</li></ol><ul><li>红黑树是保持<code>黑平衡</code>的二叉树。严格意义上不是<code>平衡二叉树</code>，最大高度: <code>2log n</code>，时间复杂度: <code>O(log n)</code>。</li><li>红黑树和<code>AVL树</code>一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。</li><li>红黑树相对于AVL树来说，牺牲了部分平衡性以换取<code>插入/删除</code>操作时少量的旋转操作，整体来说性能要<code>优于</code>AVL树。</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li>java.util中的<code>TreeMap</code>和<code>TreeSet</code>基于红黑树实现的</li><li>红黑树是一种<code>统计性能</code>优秀的树结构，另一种是Splay Tree(伸展树)。它的局部性原理：刚被访问的内容<code>下次</code>高概率被再次访问。</li></ul><h2 id="Hash-Table-哈希表"><a href="#Hash-Table-哈希表" class="headerlink" title="Hash Table 哈希表"></a>Hash Table 哈希表</h2><h3 id="哈希表概念"><a href="#哈希表概念" class="headerlink" title="哈希表概念"></a>哈希表概念</h3><p>哈希表（Hash table，也叫散列表），是根据键（Key）而<code>直接</code>访问在内存存储位置的数据结构。它通过计算一个关于键值的函数，将所需查询的数据<code>映射</code>到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做<code>哈希函数</code>，存放记录的数组称做<code>哈希表</code>。</p><h3 id="哈希函数设计"><a href="#哈希函数设计" class="headerlink" title="哈希函数设计"></a>哈希函数设计</h3><ol><li><code>哈希表</code>充分表现了算法设计领域的经典思想：<code>空间换时间</code></li><li><code>键</code>通过函数函数得到的<code>索引</code>分布越均匀越好</li></ol><h3 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h3><ul><li><code>链地址法</code>：将散列到同一个存储位置的所有元素保存在一个<code>链表</code>中。实现时，一种策略是散列表同一位置的所有冲突结果都是用<code>栈</code>存放的，<code>新元素</code>被插入到表的前端还是后端完全取决于怎样方便。</li><li><code>开放定址法</code> :  </li></ul><ol><li>线性探测: 逐个探测存放地址的表，直到查找到一个空单元，把散列地址存放在该空单元。</li><li>平方探测: 线性探测，相当于发生冲突时探测间隔 d =i^2 个单元的位置是否为空，如果为空，将地址存放进去。</li><li>二次探查: 一次散列产生哈希地址冲突，为了解决冲突，采用另外的散列函数或者对冲突结果进行处理的方法。</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>维基百科-<a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" target="_blank" rel="noopener">AVL树</a>  </li><li>维基百科-<a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener">红黑树</a>  </li><li>维基百科-<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="noopener">哈希表</a>  </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线段树、字典树和并查集</title>
    <link href="https://www.zeffon.cn/posts/2273a785.html"/>
    <id>https://www.zeffon.cn/posts/2273a785.html</id>
    <published>2019-09-07T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.767Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Segment-Tree-线段树"><a href="#Segment-Tree-线段树" class="headerlink" title="Segment Tree 线段树"></a>Segment Tree 线段树</h2><ul><li>线段树也称区间树。字典树是多叉树，也称为前缀树。并查集是一种树型的数据结构。 </li><li>线段树就是对于一棵<code>二叉树</code>，每一个节点其实存储的是每一个<code>线段</code>或者是一个<code>区间</code>相应的<code>信息</code>。</li><li>线段树<code>不是</code>完全二叉树，线段树是平衡二叉树，堆也是平衡二叉树。<blockquote><p>完全二叉树<code>本身</code>就是平衡二叉树。<code>平衡二叉树</code>概念: 对于整棵树来说，<code>最大</code>的深度和<code>最小</code>的深度他们之间的差<code>最多</code>只有可能<code>为1</code>。  </p></blockquote></li><li>经典的线段树问题：<code>区间染色</code>、<code>区间查询</code>。用<code>数组</code>来实现这两个问题的话，更新和查询都是<code>O(n)</code>，而<code>线段树</code>则是<code>O(log n)</code>。</li><li>区间有n个元素，用数组表示的话需要<code>4n</code>的空间来存储。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0层：1              </span><br><span class="line">1层：2              </span><br><span class="line">2层：4              对于满二叉树：</span><br><span class="line">3层：8              h层，一共有2^h-1节点(大约是2^h)</span><br><span class="line">...                最后一层(h-1层)，有2^(h-1)个节点</span><br><span class="line">h-1层：2^(h-1)      最后一层的节点数大致等于前面所有层节点之和</span><br><span class="line"></span><br><span class="line">                    如果n=2^k(满二叉树)    只需要2n的空间</span><br><span class="line">                    最坏的情况，如果n=2^k+1 需要4n的空间</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h2 id="Trie-字典树"><a href="#Trie-字典树" class="headerlink" title="Trie 字典树"></a>Trie 字典树</h2><ol><li>字典树是一种<code>有序树</code>，用于保存<code>关联数组</code>，其中的键通常是<code>字符串</code>。</li><li>字典树与<code>二叉查找树</code>不同，<code>键</code>不是直接保存在节点中，而是由节点在<code>树中的位置</code>决定。</li><li>一个节点的所有子孙都有<code>相同</code>的前缀，也就是这个节点对应的字符串，而根节点对应<code>空字符串</code>。一般情况下，不是<code>所有</code>的节点都有对应的值，只有<code>叶子节点</code>和<code>部分内部节点</code>所对应的键才有相关的值。</li><li>trie树常用于<code>搜索提示</code>。如当输入一个网址，可以<code>自动搜索</code>出可能的选择。当没有完全匹配的搜索结果，可以返回前缀<code>最相似</code>的可能。</li></ol><h2 id="UnionFind-并查集"><a href="#UnionFind-并查集" class="headerlink" title="UnionFind 并查集"></a>UnionFind 并查集</h2><ol><li>在计算机科学中，并查集是一种<code>树型</code>的数据结构，用于处理一些<code>不交集</code>（Disjoint Sets）的<code>合并及查询</code>问题。</li><li>对一组数据，主要支持<code>两个动作</code> :</li></ol><ul><li>Union(p, q)：将两个子集<code>合并成</code>同一个集合。</li><li>isConnected(p, q)：查询给定两个元素他们是否属于同一个集合。它可以被用来确定两个元素是否属于同一子集。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>维基百科-字典树<a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">Trie</a>  </li><li>维基百科-并查集<a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86" target="_blank" rel="noopener">UnionFind</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>crontab的使用</title>
    <link href="https://www.zeffon.cn/posts/973562d0.html"/>
    <id>https://www.zeffon.cn/posts/973562d0.html</id>
    <published>2019-09-06T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.767Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Linux crontab命令Linux 命令大全Linux crontab是用来定期执行程序的命令。当安装完成操作系统之后，默认便会启动此任务调度命令。</p><h3 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h3><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-u user：用来设定某个用户的crontab服务；</span><br><span class="line">file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</span><br><span class="line">-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</span><br><span class="line">-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</span><br><span class="line">-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</span><br><span class="line">-i：在删除用户的crontab文件时给确认提示。</span><br></pre></td></tr></tbody></table></figure></div><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><ol><li>一个标准的 crontab 配置需要符合如下 :<br><code>分 时 日 月 星期</code> 要运行的命令<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*     *     *     *     *     <span class="built_in">command</span> to be executed</span><br><span class="line">-     -     -     -     -</span><br><span class="line">|     |     |     |     |</span><br><span class="line">|     |     |     |     +----- day of week (0 - 6) (Sunday=0)</span><br><span class="line">|     |     |     +------- month (1 - 12)</span><br><span class="line">|     |     +--------- day of month (1 - 31)</span><br><span class="line">|     +----------- hour (0 - 23)</span><br><span class="line">+------------- min (0 - 59)</span><br></pre></td></tr></tbody></table></figure></div></li><li>一个 crontab 的配置文件，通过前五个域来表示时刻，时期，甚至是时间段。每一个域中，可以包含 * 或者逗号分割的数字，或者 - 连接的数字。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 号表示任意</span><br><span class="line">, 逗号分割表示时刻， separator</span><br><span class="line">- 短横线连接，表示时间段， range of values</span><br><span class="line">/ 表示间隔， 如果第一个域为 /2 ，则表示每隔两分钟， step value</span><br></pre></td></tr></tbody></table></figure></div></li><li>而空格分割的六个域分别表示：</li></ol><ul><li>第 1 列分钟，取值范围 0～59</li><li>第 2 列小时 0～23（0 表示子夜）</li><li>第 3 列日 1～31</li><li>第 4 列月 1～12</li><li>第 5 列星期 0～7（0 和 7 表示星期天）</li><li>第 6 列要运行的命令  </li></ul><blockquote><p><code>注意事项</code>:<br>重复格式 /2 表示没两分钟执行一次 或者 /10 表示每 10 分钟执行一次，这样的语法格式并不是被所有系统支持。<br>具体某一天的指定，可以由第三项（month day）和第五项（weekday）指定，如果两项都被设定，那么 cron 都会执行。  </p></blockquote><h2 id="安装-amp-使用"><a href="#安装-amp-使用" class="headerlink" title="安装&amp;使用"></a>安装&amp;使用</h2><h3 id="crontab-安装"><a href="#crontab-安装" class="headerlink" title="crontab 安装"></a>crontab 安装</h3><ol><li><p>检查是否安装了crontab，如果提示未安装请自行安装，crontab安装包在系统光盘里面的pacekage文件夹crontabs安装包。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep crontab</span><br><span class="line">crontabs-1.11-6.20121102git.el7.noarch <span class="comment"># 已安装</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>crontabs安装包进行安装</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y cronie crontabs</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>检查crond服务是否安装及启动</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list crontabs &amp;&amp; <span class="built_in">which</span> crontab &amp;&amp; crontab -l</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="crontab-使用"><a href="#crontab-使用" class="headerlink" title="crontab 使用"></a>crontab 使用</h3><ol><li><p><code>systemctl</code> 操作crontab</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> crond </span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">$ systemctl start crond </span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ systemctl stop crond</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ systemctl restart crond</span><br><span class="line"><span class="comment"># 查看当前状态</span></span><br><span class="line">$ systemctl status crond</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>使用-l参数列出crontab文件:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line">10 0 * 1 * /usr/<span class="built_in">local</span>/certbot/certbot-auto --force-renew --pre-hook <span class="string">"systemctl stop nginx"</span> --post-hook <span class="string">"systemctl start nginx"</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>可以使用这种方法在 $HOME 目录中对 crontab 文件做一备份：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l &gt; <span class="variable">$HOME</span>/mycron</span><br></pre></td></tr></tbody></table></figure></div><p>这样，一旦不小心误删了 crontab 文件，可以用上面所讲述的方法迅速恢复。</p></li><li><p>添加crontab任务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>删除 crontab 文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><strong><code>注意</code></strong> 千万别乱运行<code>crontab -r</code>。它从Crontab目录 <code>/var/spool/cron</code> 中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p></blockquote></li><li><p>给某一个用户新建 crontab 任务 </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -u <span class="built_in">test</span> -e     <span class="comment"># 给test的用户设定定时任务，需要管理员权限</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>crontab配置文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/crontab</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>crontab日志</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n 5 /var/<span class="built_in">log</span>/cron // 查看最近五次日志</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>清理系统日志<br>在<code>/var/log</code>路径，查看当前目录文件大小<code>du -sh *</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * 1 * * cat /dev/null &gt; /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zeffon.cn/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://www.zeffon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆和优先队列</title>
    <link href="https://www.zeffon.cn/posts/95456b61.html"/>
    <id>https://www.zeffon.cn/posts/95456b61.html</id>
    <published>2019-09-05T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二叉堆（binary heap）是一种特殊的堆，二叉堆是完全二叉树或者是近似完全二叉树。优先队列是计算机科学中的一类抽象数据类型。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Priority-Queue-优先队列"><a href="#Priority-Queue-优先队列" class="headerlink" title="Priority Queue 优先队列"></a>Priority Queue 优先队列</h3><ol><li><p><code>普通队列</code>是先进先出，后进后出；<code>优先队列</code>的<code>出队入队</code>只与<code>优先级</code>相关</p></li><li><p><code>优先队列</code>中的每个元素都有各自的<code>优先级</code>，优先级<code>最高</code>的元素<code>最先</code>得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用<code>堆</code>来实现。</p></li><li><p>常见的场景：操作系统中<code>任务调度</code>（动态选择优先级最高的任务执行）</p></li><li><p>基于不同<code>底层</code>实现<code>时间复杂度</code>比较</p><table><thead><tr><th align="center">底层数据结构</th><th align="center">插入时间复杂度</th><th align="center">取出时间复杂度</th></tr></thead><tbody><tr><td align="center">无序数组</td><td align="center">O(1)</td><td align="center">O(n)</td></tr><tr><td align="center">有序数组</td><td align="center">O(n)</td><td align="center">O(1)</td></tr><tr><td align="center">堆</td><td align="center">O(log n)</td><td align="center">O(log n)</td></tr></tbody></table></li></ol><h3 id="Binary-Heap-二叉堆"><a href="#Binary-Heap-二叉堆" class="headerlink" title="Binary Heap 二叉堆"></a>Binary Heap 二叉堆</h3><ul><li><p>二叉堆是一棵<code>完全二叉树</code>，不会退化为<code>链表</code>。（<code>二叉树</code>在特殊情况<code>从小到大</code>排序是会退化成<code>链表</code>）</p><blockquote><p><code>完全二叉树</code>是效率很高的数据结构，完全二叉树是由<code>满二叉树</code>而引出来的。若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的节点数都达到最大个数，第 h 层所有的节点都连续集中在<code>最左边</code>，这就是完全二叉树。  </p></blockquote></li><li><p>二叉堆中的某个节点的值总是<code>不大于</code>其父节点的值。若根节点是<code>最大值</code>则成为<code>最大堆</code>,反之是<code>最小堆</code>。</p></li><li><p>二叉堆<code>添加</code>元素放在<code>最后的叶子节点</code>，再根据与<code>其父节</code>点的大小进行调整位置，直到<code>满足</code>所有的父子节点关系。</p></li><li><p>二叉堆<code>删除</code>根节点元素，将<code>根节点</code>与<code>最后的叶子节点</code>进行互换，删除<code>最后的叶子节点</code>，再将<code>根节点</code>与<code>其子节点</code>进行比较互换位置，直到<code>满足</code>所有的父子节点关系。</p></li><li><p>可以使用数组存储二叉堆。根节点为0，<code>按层排序</code>下去。则父节点与其子节点的关系如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent(i) = (i - 1) / 2</span><br><span class="line">left child(i) = 2 * i + 1</span><br><span class="line">right child(i) = 2 * i + 2</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>维基百科-<a href="https://zh.wikipedia.org/wiki/%E5%84%AA%E5%85%88%E4%BD%87%E5%88%97" target="_blank" rel="noopener">优先队列</a></li><li>维基百科-<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86" target="_blank" rel="noopener">二叉树</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础</title>
    <link href="https://www.zeffon.cn/posts/b1c1e088.html"/>
    <id>https://www.zeffon.cn/posts/b1c1e088.html</id>
    <published>2019-09-04T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><h3 id="1-段落与换行"><a href="#1-段落与换行" class="headerlink" title="1.段落与换行"></a>1.段落与换行</h3><ol><li>段落的前后必须是空行<br><code>空行</code>指的是行内什么都没有，或者只有空白符（空格或制表符，相邻两行文本，如果中间没有空行会显示在一行中（换行符被转换为空格）</li><li>如果需要在段落内加入换行（<code>&lt;br&gt;</code>）<br>可以在前一行的末尾加入至少两个空格，然后换行写其它的文字</li><li>Markdown 中的多数区块都需要在两个空行之间。</li></ol><h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h3><p>1. Setext 形式  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">H1</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">H2</span><br><span class="line">----</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><code>=</code> 和 <code>-</code> 的数量是没有限制的。通常的做法是使其和标题文本的长度相同，这样看起来比较舒服。或者可以像我一样，用四个 <code>-</code> 或 <code>=</code>。<br>Setext 形式只支持 <code>h1</code> 和 <code>h2</code> 两种标题。</p></blockquote><p>2. atx 形式<br>① 可以用对称的 <code>#</code> 包括文本：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">####H4####</span></span><br><span class="line"></span><br><span class="line"><span class="section">#####H5#####</span></span><br></pre></td></tr></tbody></table></figure></div><p>② 也可以只在左边使用 <code>#</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">####H4</span></span><br><span class="line"></span><br><span class="line"><span class="section">#####H5</span></span><br></pre></td></tr></tbody></table></figure></div><p>③ 成对的 <code>#</code> 左侧和只在左边使用的 <code>#</code> 左侧都不可以有任何空白，但其内侧可以使用空白。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> ###左侧使用了空格###</span><br><span class="line"></span><br><span class="line"><span class="section">#### 内侧使用了空格</span></span><br><span class="line"><span class="code">```  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&gt;在这一点上，可能各种 Markdown 的实现会有不同的结果，不过仍然需要我们遵守语法规则。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">### 3.引用</span></span><br><span class="line"><span class="code">1\. 引用内容  </span></span><br><span class="line"><span class="code">在段落或其他内容前使用 `&gt;` 符号，就可以将这段内容标记为 '引用' 的内容（`&lt;blockquote&gt;`）：</span></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">&gt;引用内容</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>引用内容</p></blockquote><p>2. 多行引用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;多行引用</span><br><span class="line">&gt;可以在每行前加 <span class="code">`&gt;`</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>多行引用<br>可以在每行前加 <code>&gt;</code>  </p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;如果仅在第一行使用 <span class="code">`&gt;`</span>，</span><br><span class="line">后面相邻的行即使省略 <span class="code">`&gt;`</span>，也会变成引用内容</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>如果仅在第一行使用 <code>&gt;</code>，<br>后面相邻的行即使省略 <code>&gt;</code>，也会变成引用内容</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;如果引用内容需要换行，  </span><br><span class="line">&gt;可以在行尾添加两个空格</span><br><span class="line">&gt;</span><br><span class="line">&gt;或者在引用内容中加一个空行</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>如果引用内容需要换行，<br>可以在行尾添加两个空格  </p><p>或者在引用内容中加一个空行  </p></blockquote><p>3. 嵌套引用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>也可以在引用中  </p><blockquote><p>使用嵌套的引用  </p></blockquote></blockquote><p>4. 其他 Markdown</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;在引用中可以使用使用其他任何 <span class="emphasis">*Markdown*</span> 语法</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>在引用中可以使用使用其他任何 <em>Markdown</em> 语法</p></blockquote><h3 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h3><p>1. 无序列表</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+ </span>也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">- </span>或者 <span class="code">`-`</span></span><br></pre></td></tr></tbody></table></figure></div><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><p>2. 有序列表  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MD"><figure class="iseeu highlight /md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表以数字和 <span class="code">`.`</span> 开始；  </span><br><span class="line"><span class="bullet">3. </span>数字的序列并不会影响生成的列表序列；  </span><br><span class="line"><span class="bullet">4. </span>但仍然推荐按照自然顺序（1.2.3...）编写。</span><br></pre></td></tr></tbody></table></figure></div><ol><li>有序列表以数字和 <code>.</code> 开始；</li><li>数字的序列并不会影响生成的列表序列；</li><li>但仍然推荐按照自然顺序（1.2.3…）编写。</li></ol><p>3. 嵌套的列表</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一层</span><br><span class="line"><span class="bullet">+ </span>1-1</span><br><span class="line"><span class="bullet">+ </span>1-2</span><br><span class="line"><span class="bullet">2. </span>无序列表和有序列表可以随意相互嵌套</span><br><span class="line"><span class="bullet">1. </span>2-1</span><br><span class="line"><span class="bullet">2. </span>2-2</span><br></pre></td></tr></tbody></table></figure></div><ol><li>第一层</li></ol><ul><li>1-1</li><li>1-2</li></ul><ol start="2"><li>无序列表和有序列表可以随意相互嵌套</li><li>2-1</li><li>2-2</li></ol><p>4. 语法和用法</p><ol><li>无序列表项的开始是：符号 空格；</li><li>有序列表项的开始是：数字 <code>.</code> 空格；</li><li>空格至少为一个，多个空格将被解析为一个；</li><li>如果仅需要在行前显示数字和 <code>.</code>：</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5\. 可以使用：数字\. 来取消显示为列表</span><br></pre></td></tr></tbody></table></figure></div><p>5. 可以使用：数字\. 来取消显示为列表</p><blockquote><p><code>\*</code> 的语法专门用来显示 Markdown 语法中使用的特殊字符，参考<code>字符转义</code></p></blockquote><h3 id="5-代码"><a href="#5-代码" class="headerlink" title="5.代码"></a>5.代码</h3><p>1. 代码块 - 可以使用缩进来插入代码块:  </p><pre><code>&lt;html&gt; // Tab开头    &lt;title&gt;Markdown&lt;/title&gt;&lt;/html&gt; // 四个空格开头代码块前后需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格；</code></pre><p>2. 行内代码<br>也可以通过 ``，插入行内代码（` 是 <code>Tab</code> 键上边、数字 <code>1</code> 键左侧的那个按键）：<br>例如 <code>&lt;title&gt;Markdown&lt;/title&gt;</code></p><p>3. 转换规则<br>代码块中的文本（包括 Markdown 语法）都会显示为原始内容，而特殊字符会被转换为 HTML <a href="https://zh.wikipedia.org/wiki/XML%E4%B8%8EHTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">字符实体</a>。</p><h3 id="6-分隔线"><a href="#6-分隔线" class="headerlink" title="6.分隔线"></a>6.分隔线</h3><p>1. 可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（<code>&lt;hr&gt;</code>）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line">------</span><br><span class="line"><span class="emphasis">___</span></span><br></pre></td></tr></tbody></table></figure></div><hr><hr><hr><p>2. 多个字符之间可以有空格（空白符），但不能有其他字符：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span></span><br><span class="line"><span class="bullet">- </span>- -</span><br></pre></td></tr></tbody></table></figure></div><hr><hr><h3 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h3><p>1. 行内式</p><p>格式为 <code>[link text](URL 'title text')</code>。</p><p>① 普通链接：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>](<span class="link">http://www.google.com/</span>)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="http://www.google.com/" target="_blank" rel="noopener">Google</a></p><p>② 指向本地文件的链接：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">icon.png</span>](<span class="link">./images/icon.png</span>)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="./images/icon.png">icon.png</a></p><p>③ 包含 ‘title’ 的链接:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>](<span class="link">http://www.google.com/ "Google"</span>)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="http://www.google.com/" target="_blank" rel="noopener" title="Google">Google</a></p><blockquote><p>title 使用 ‘ 或 “ 都是可以的。</p></blockquote><p>2. 参考式</p><p>参考式链接的写法相当于行内式拆分成两部分，并通过一个 <em>识别符</em> 来连接两部分。参考式能尽量保持文章结构的简单，也方便统一管理 URL。</p><p>① 首先，定义链接：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol">link</span>]</span><br></pre></td></tr></tbody></table></figure></div><p><a href="http://www.google.com/" target="_blank" rel="noopener" title="Google">Google</a></p><p>第二个方括号内为链接独有的 <em>识别符*，可以是字母、数字、空白或标点符号。识别符是 *不区分大小写</em> 的；</p><p>② 然后定义链接内容：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">link</span>]: <span class="link">http://www.google.com/ "Google"</span></span><br></pre></td></tr></tbody></table></figure></div><p>其格式为：<code>[识别符]: URL 'title'</code>。</p><blockquote><p>其中，URL可以使用 &lt;&gt; 包括起来，title 可以使用 “”、’’、() 包括（考虑到兼容性，建议使用引号），title 部分也可以换行来写；</p></blockquote><blockquote><p>链接内容的定义可以放在同一个文件的 <em>任意位置</em>；</p></blockquote><p>③ 也可以省略 <em>识别符</em>，使用链接文本作为 <em>识别符</em>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://www.google.com/ "Google"</span></span><br></pre></td></tr></tbody></table></figure></div><p>[Google][]<br>[Google]: <a href="http://www.google.com/" target="_blank" rel="noopener">http://www.google.com/</a> “Google”</p><blockquote><p>参考式相对于行内式有一个明显的优点，就是可以在多个不同的位置引用同一个 URL。</p></blockquote><p>3. 自动链接</p><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.google.com</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">123@email.com</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure></div><p><a href="http://www.google.com/" target="_blank" rel="noopener">http://www.google.com/</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><p>该方式适合行内较短的链接，会使用 URL 作为链接文字。邮箱地址会自动编码，以逃避抓取机器人。</p><h3 id="8-图片"><a href="#8-图片" class="headerlink" title="8.图片"></a>8.图片</h3><p>插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个 <code>!</code>。也分为行内式和参考式两种。</p><p>1. 行内式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">GitHub</span>](<span class="link">https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3 "GitHub,Social Coding"</span>)</span><br></pre></td></tr></tbody></table></figure></div><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3" alt="GitHub" title="GitHub,Social">                </div>                <div class="image-caption">GitHub,Social</div>            </figure><p>方括号中的部分是图片的替代文本，括号中的 ‘title’ 部分和链接一样，是可选的。</p><p>2. 参考式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">GitHub</span>][<span class="symbol">github</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">github</span>]: <span class="link">https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3 "GitHub,Social Coding"</span></span><br></pre></td></tr></tbody></table></figure></div><p><img src="https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3" alt="GitHub" title="GitHub,Social Coding"></p><p>3. 指定图片的显示大小</p><p>Markdown 不支持指定图片的显示大小，不过可以通过直接插入<code>&lt;img /&gt;</code>标签来指定相关属性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3"</span> <span class="attr">alt</span>=<span class="string">"GitHub"</span> <span class="attr">title</span>=<span class="string">"GitHub,Social Coding"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></div><img src="https://avatars3.githubusercontent.com/u/33784785?s=100&amp;v=3" alt="GitHub" title="GitHub,Social Coding" width="50" height="50"><h3 id="9-强调"><a href="#9-强调" class="headerlink" title="9.强调"></a>9.强调</h3><p>1. 使用 <code>* *</code> 或 <code>_ _</code> 包括的文本会被转换为 <code>&lt;em&gt;&lt;/em&gt;</code> ，通常表现为斜体：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*演示*</span> 的 <span class="emphasis">_文本_</span></span><br></pre></td></tr></tbody></table></figure></div><p>这是用来 <em>演示</em> 的 <em>文本</em></p><p>2. 使用 <code>** **</code> 或 <code>__ __</code> 包括的文本会被转换为 <code>&lt;strong&gt;&lt;/strong&gt;</code>，通常表现为加粗：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**演示**</span> 的 <span class="strong">__文本__</span></span><br></pre></td></tr></tbody></table></figure></div><p>这是用来 <strong>演示</strong> 的 <strong>文本</strong></p><p>3. 用来包括文本的 <code>*</code> 或 <code>_</code> 内侧不能有空白，否则 <code>*</code> 和 <code>_</code> 将不会被转换（不同的实现会有不同的表现）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">* 演示*</span> 的 <span class="emphasis">_文本 _</span></span><br></pre></td></tr></tbody></table></figure></div><p>这是用来 * 演示* 的 _文本 _</p><p>4. 如果需要在文本中显示成对的 <code>*</code> 或 <code>_</code>，可以在符号前加入 <code>\</code> 即可：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 \<span class="emphasis">*演示\*</span> 的 \<span class="emphasis">_文本\_</span></span><br></pre></td></tr></tbody></table></figure></div><p>这是用来 *演示* 的 _文本_</p><p>5. <code>*</code>、<code>**</code>、<code>_</code> 和 <code>__</code> 都必须 <em>成对使用</em> 。</p><h3 id="10-字符转义"><a href="#10-字符转义" class="headerlink" title="10.字符转义"></a>10.字符转义</h3><p><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener" title="Markdown: Syntax">Markdown 标准</a> 本身所包含的功能有限，所以产生了许多第三方的扩展语法，如 <a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GitHub Flavored Markdown</a>。<br>这里只介绍众多扩展语法中的一部分内容，它们在不同平台或工具的支持程度不同，请参考具体平台或工具的文档和说明来使用。</p><ol><li><a href="strikethrougn.md">删除线</a></li><li><a href="code-blocks-and-highlighting.md">代码块和语法高亮</a></li><li><a href="table.md">表格</a></li><li><a href="task-list.md">Task List</a></li></ol><ul><li>CommonMark<br><a href="http://commonmark.org/" target="_blank" rel="noopener">CommonMark</a> 试图将碎片化的 Markdown 实现和扩展进行标准化，提供统一的 <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">规范</a> 及不同语言的 <a href="http://code.commonmark.org/" target="_blank" rel="noopener">实现</a> 。</li></ul><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><h3 id="1-删除线"><a href="#1-删除线" class="headerlink" title="1.删除线"></a>1.删除线</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~</span><br></pre></td></tr></tbody></table></figure></div><p>这就是 <del>删除线</del></p><h3 id="2-代码块和语法高亮"><a href="#2-代码块和语法高亮" class="headerlink" title="2.代码块和语法高亮"></a>2.代码块和语法高亮</h3><p>1. 代码块<br>与原来使用缩进来添加代码块的语法不同，这里使用 ``` ``` 来包含多行代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;code here&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>三个 ``` 要独占一行。  </p></blockquote><p>2. 代码高亮</p><p>在上面的代码块语法基础上，在第一组 ``` 之后添加代码的语言，如 ‘javascript’ 或 ‘js’，即可将代码标记为 <code>JavaScript</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window loaded'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h3><p>1. 单元格和表头</p><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">Zhangsan | 13</span><br><span class="line">Lisi | 14</span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>Zhangsan</td><td>13</td></tr><tr><td>Lisi</td><td>14</td></tr></tbody></table><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|    name    | age |</span><br><span class="line">| ---------- | --- |</span><br><span class="line">| zhangsan   |  13 |</span><br><span class="line">| Listsi     |  14 |</span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>zhangsan</td><td>13</td></tr><tr><td>Listsi</td><td>14</td></tr></tbody></table><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><p>2. 对齐</p><p>在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><ul><li><code>:---</code> 代表左对齐</li><li><code>:--:</code> 代表居中对齐</li><li><code>---:</code> 代表右对齐</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| left | center | right |</span><br><span class="line">| :--- | :----: | ----: |</span><br><span class="line">| aaaa | bbbbbb | ccccc |</span><br><span class="line">| a    | b      | c     |</span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th align="left">left</th><th align="center">center</th><th align="right">right</th></tr></thead><tbody><tr><td align="left">aaaa</td><td align="center">bbbbbb</td><td align="right">ccccc</td></tr><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td></tr></tbody></table><blockquote><p>如果不使用对齐标记，单元格中的内容默认左对齐；表头单元格中的内容会一直居中对齐（不同的实现可能会有不同表现）。</p></blockquote><p>3. 插入其他内容</p><p>表格中可以插入其他 Markdown 中的行内标记：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|    project   |             blog                |</span><br><span class="line">| ------------ | ------------------------------- |</span><br><span class="line">| <span class="emphasis">_ZeffonWu_</span>   | [<span class="string">ZeffonWu</span>](<span class="link">https://github.com/ZeffonWu</span>) |</span><br><span class="line">| <span class="strong">__Blog__</span>     | [<span class="string">Blog</span>](<span class="link">https://github.com/ZeffonWu/ZeffonWu.github.io</span>)  |</span><br></pre></td></tr></tbody></table></figure></div><table><thead><tr><th>project</th><th>blog</th></tr></thead><tbody><tr><td><em>ZeffonWu</em></td><td><a href="https://github.com/ZeffonWu" target="_blank" rel="noopener">ZeffonWu</a></td></tr><tr><td><strong>Blog</strong></td><td><a href="https://github.com/ZeffonWu/ZeffonWu.github.io" target="_blank" rel="noopener">Blog</a></td></tr></tbody></table><h3 id="4-Task-List"><a href="#4-Task-List" class="headerlink" title="4.Task List"></a>4.Task List</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] Eat</span><br><span class="line"><span class="bullet">- </span>[x] Code</span><br><span class="line"><span class="bullet">  - </span>[x] HTML</span><br><span class="line"><span class="bullet">  - </span>[x] CSS</span><br><span class="line"><span class="bullet">  - </span>[x] JavaScript</span><br><span class="line"><span class="bullet">- </span>[ ] Sleep</span><br></pre></td></tr></tbody></table></figure></div><ul><li><input disabled="" type="checkbox"> Eat</li><li><input checked="" disabled="" type="checkbox"> Code<ul><li><input checked="" disabled="" type="checkbox"> HTML</li><li><input checked="" disabled="" type="checkbox"> CSS</li><li><input checked="" disabled="" type="checkbox"> JavaScript</li></ul></li><li><input disabled="" type="checkbox"> Sleep</li></ul><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><h3 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1.HTML"></a>1.HTML</h3><p>1. MdCharm</p><p>选择 ‘File’, ‘Export to…’，勾选 ‘HTML’, 点击 ‘Browser…’ 选择导出目录并输入导出的文件名，点击 ‘OK’，即可将当前的 Markdown 文档转换为 HTML 文档。</p><p>如果不满意 HTML 文档的样式，可以在设置中自定义 CSS。</p><p>2. Pandoc</p><p>参考 <a href="http://pandoc.org/installing.html" target="_blank" rel="noopener">Installing</a> 安装 Pandoc。</p><p>打开命令行，进入文档所在目录：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/file/</span><br></pre></td></tr></tbody></table></figure></div><p>执行下面的命令，将 Markdown 转换为 HTML：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -o hello.html hello.md</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>默认的转换，只是将 Markdown 内容转换为 HTML 标签，所以只能看到浏览器的默认样式。</p></blockquote><p>可以执行下面的命令，为导出的 HTML 添加自定义样式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -o hello.html -c style.css hello.md</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><code>style.css</code> 仍然是以 <code>&lt;link&gt;</code> 的方式关联到 HTML 文档中的，所以在发布的时候需要将 CSS 一同发布出去。</p></blockquote><h3 id="2-PDF"><a href="#2-PDF" class="headerlink" title="2.PDF"></a>2.PDF</h3><p>1. MdCharm</p><p>与导出 HTML 文档类似，选择 ‘File’, ‘Export to…’，勾选 ‘PDF’, 点击 ‘Browser…’ 选择导出目录并输入导出的文件名，点击 ‘OK’，即可将当前的 Markdown 文档转换为 PDF 文档。</p><p>如果不满意 PDF 文档的样式，可以在设置中自定义 CSS。</p><p>1. Pandoc</p><p>使用 Pandoc 导出 PDF 文档，需要先安装某个 LaTeX 引擎（参考 <a href="http://pandoc.org/README.html#creating-a-pdf" target="_blank" rel="noopener">Creating a PDF</a>）。然后执行命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -o hello.pdf hello.md</span><br></pre></td></tr></tbody></table></figure></div><p>当然，也可以通过 <code>-c style.css</code> 来指定样式文件。</p><p>1. Chrome</p><p>在将 Markdown <a href="html.md">转换为 HTML 文档</a> 之后，可以通过 <a href="https://www.google.com/chrome/" target="_blank" rel="noopener">Chrome 浏览器</a> 打开它。选择 ‘打印’（Ctrl+P），然后更改 ‘目标打印机’ 为 ‘另存为 PDF’，再进行一些设置后，即可保存为 PDF 文档。</p><h3 id="3-Word"><a href="#3-Word" class="headerlink" title="3.Word"></a>3.Word</h3><p>1. 复制粘贴<br>在导出为 HTML 文档之后，可以（在浏览器中）手动复制 HTML 页面的内容，然后粘贴到 Word 文档中，保存即可。</p><p>1. Pandoc<br>执行下面的命令，即可将 Markdown 文档转换为 Word 文档：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -o hello.docx hello.md</span><br></pre></td></tr></tbody></table></figure></div><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>Github-LearnShare-<a href="https://github.com/LearnShare/Learning-Markdown" target="_blank" rel="noopener">Learning-Markdown</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>集合和映射</title>
    <link href="https://www.zeffon.cn/posts/4fd121ef.html"/>
    <id>https://www.zeffon.cn/posts/4fd121ef.html</id>
    <published>2019-09-03T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集合是承载元素的容器。映射（map）数据结构就是为此而设计的。映射用来存放键/值对。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><ul><li><p>集合的特点是：元素<code>不重复</code>，<code>无下标</code>。</p></li><li><p>集合的典型应用：<code>客户统计</code>、<code>词汇量统计</code>。</p></li><li><p><code>二分搜索树</code>是非常好的实现集合的<code>底层数据结构</code>。</p></li><li><p><code>二分搜索树</code>实现的集合时间复杂度平均为<code>O(log n)</code>,<code>链表</code>实现的集合时间复杂度为<code>O(n)</code>。 </p></li><li><p><code>多重集合</code>中的元素<code>可以重复</code></p></li><li><p>集合分类</p><table><thead><tr><th align="center">集合分类</th><th align="center">集合类型特性</th><th align="center">底层数据结构的实现</th></tr></thead><tbody><tr><td align="center">有序集合</td><td align="center">元素具有顺序性</td><td align="center">基于搜索树的实现</td></tr><tr><td align="center">无序集合</td><td align="center">元素没有顺序性</td><td align="center">基于哈希表的实现</td></tr></tbody></table></li><li><p><strong><code>集合的时间复杂度</code></strong> (h表示树的高度)</p><table><thead><tr><th align="center">操作</th><th align="center">链表实现的集合</th><th align="center">二分搜索树实现的集合</th><th align="center">二分搜索树平均</th></tr></thead><tbody><tr><td align="center">增 add</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td></tr><tr><td align="center">查 contains</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td></tr><tr><td align="center">删 remove</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td></tr></tbody></table></li></ul><h3 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map 映射"></a>Map 映射</h3><ul><li><p>映射主要是一对一间的对应关系。存储(键，值)数据对的数据结构(Key, Value), 根据键(Key)，寻找值(Value)。在其他语言中有着其他名称，如Python的字典dict。</p></li><li><p><code>二分搜索树</code>是非常好的实现映射的<code>底层数据结构</code>。</p></li><li><p><code>映射集合</code>中的键<code>可以重复</code></p></li><li><p>映射分类</p><table><thead><tr><th align="center">映射分类</th><th align="center">映射类型特性</th><th align="center">底层数据结构的实现</th></tr></thead><tbody><tr><td align="center">有序映射</td><td align="center">键具有顺序性</td><td align="center">基于搜索树的实现</td></tr><tr><td align="center">无序映射</td><td align="center">键没有顺序性</td><td align="center">基于哈希表的实现</td></tr></tbody></table></li><li><p><strong><code>映射的时间复杂度</code></strong> (h表示树的高度)</p><table><thead><tr><th align="center">操作</th><th align="center">链表实现的映射</th><th align="center">二分搜索树实现的映射</th><th align="center">二分搜索树平均</th><th align="center">二分搜索树最差</th></tr></thead><tbody><tr><td align="center">增 add</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td><td align="center">O(n)</td></tr><tr><td align="center">查 contains</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td><td align="center">O(n)</td></tr><tr><td align="center">改 set</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td><td align="center">O(n)</td></tr><tr><td align="center">查 get</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td><td align="center">O(n)</td></tr><tr><td align="center">查 contains</td><td align="center">O(n)</td><td align="center">O(h)</td><td align="center">O(log n)</td><td align="center">O(n)</td></tr></tbody></table></li></ul><h3 id="Set集合与Map映射间的关系"><a href="#Set集合与Map映射间的关系" class="headerlink" title="Set集合与Map映射间的关系"></a>Set集合与Map映射间的关系</h3><ul><li>其实集合与映射两者很大程度是相同的。如果将映射的值Value统一设置NULL，在这样看来映射也可以包装成集合。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Systemctl的使用</title>
    <link href="https://www.zeffon.cn/posts/58aae0db.html"/>
    <id>https://www.zeffon.cn/posts/58aae0db.html</id>
    <published>2019-09-02T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.764Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。<br>该篇学习于阮老师的<a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a>和余泽楠的<a href="https://zhuanlan.zhihu.com/p/29217941" target="_blank" rel="noopener">CentOS 7 Systemd 入门</a></p><h3 id="Systemd-概述"><a href="#Systemd-概述" class="headerlink" title="Systemd 概述"></a>Systemd 概述</h3><p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --version</span><br><span class="line">systemd 219</span><br><span class="line">+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Systemd-优缺点"><a href="#Systemd-优缺点" class="headerlink" title="Systemd 优缺点"></a>Systemd 优缺点</h3><p>Systemd 的<code>优点</code>是功能强大，使用方便，而<code>缺点</code>是体系庞大，非常复杂。事实上，现在还有很多人反对使用 <code>Systemd</code>，理由就是它过于复杂，与操作系统的其他部分强耦合，违反<code>keep simple, keep stupid</code>的Unix 哲学。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><h3 id="systemctl-命令"><a href="#systemctl-命令" class="headerlink" title="systemctl 命令"></a>systemctl 命令</h3><p><code>systemctl</code> 是 Systemd 的主命令，用于管理系统。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">$ sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">$ sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">$ sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">$ sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">$ sudo systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">$ sudo systemctl rescue</span><br></pre></td></tr></tbody></table></figure></div><h3 id="服务的管理"><a href="#服务的管理" class="headerlink" title="服务的管理"></a>服务的管理</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ systemctl start &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">$ systemctl stop &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">$ systemctl restart &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新读取配置文件(如果该服务不能重启，但又必须使用新的配置，这条命令会很有用)</span></span><br><span class="line">$ systemctl reload &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使服务开机自启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使服务不要开机自启动</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用服务(这可以防止服务被其他服务间接启动，也无法通过 start 或 restart 命令来启动服务)</span></span><br><span class="line">$ systemctl mask &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用服务(仅针对于已禁用的服务)</span></span><br><span class="line">$ systemctl unmask &lt;服务项名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新读取所有服务项(修改、添加、删除服务项之后需要执行以下命令)</span></span><br><span class="line">$ systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><p>Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。</p><ol><li><p>Unit 一共分成12种。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Service unit：系统服务</span><br><span class="line">Target unit：多个 Unit 构成的一个组</span><br><span class="line">Device Unit：硬件设备</span><br><span class="line">Mount Unit：文件系统的挂载点</span><br><span class="line">Automount Unit：自动挂载点</span><br><span class="line">Path Unit：文件或路径</span><br><span class="line">Scope Unit：不是由 Systemd 启动的外部进程</span><br><span class="line">Slice Unit：进程组</span><br><span class="line">Snapshot Unit：Systemd 快照，可以切回某个快照</span><br><span class="line">Socket Unit：进程间通信的 socket</span><br><span class="line">Swap Unit：swap 文件</span><br><span class="line">Timer Unit：定时器</span><br></pre></td></tr></tbody></table></figure></div></li><li><p><code>systemctl list-units</code>命令可以查看当前系统的所有 Unit  </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">$ systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">$ systemctl list-units --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">$ systemctl list-units --all --state=inactive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">$ systemctl list-units --failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">$ systemctl list-units --<span class="built_in">type</span>=service</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>除了 <code>status</code> 命令，<code>systemctl</code> 还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示某个 Unit 是否正在运行</span></span><br><span class="line">$ systemctl is-active application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 是否处于启动失败状态</span></span><br><span class="line">$ systemctl is-failed application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class="line">$ systemctl is-enabled application.service</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/29217941" target="_blank" rel="noopener">CentOS 7 Systemd 入门</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.zeffon.cn/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://www.zeffon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>flask项目在centos7部署流程</title>
    <link href="https://www.zeffon.cn/posts/b68abf6b.html"/>
    <id>https://www.zeffon.cn/posts/b68abf6b.html</id>
    <published>2019-09-01T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.764Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flask 是一个web框架，而非web server，直接用Flask拉起的web服务仅限于开发环境使用，生产环境不够稳定，也无法承受大量请求的并发。基于Flask开发API项目是，部署时用uwsgi和Nginx，是一个很好的选择。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Python3环境"><a href="#Python3环境" class="headerlink" title="Python3环境"></a>Python3环境</h3><p>由于CentOS7原本就安装了Python2，而且这个Python2不能被删除，因为有很多系统命令，比如yum都要用到。所以我们要额外安装Python3，而且系统一般允许多个版本的python同时存在</p><ul><li>我们先来查看python安装位置，一般是位于/usr/bin/python目录下。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">&gt;&gt; /usr/bin/python</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="安装Python3的方法"><a href="#安装Python3的方法" class="headerlink" title="安装Python3的方法"></a>安装Python3的方法</h3><ol><li>安装依赖包（切记安装）<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y groupinstall <span class="string">"Development tools"</span></span><br><span class="line">$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></tbody></table></figure></div></li><li>下载Python3安装包<br>大家可根据自己需求下载不同版本的Python3，我下载的是Python3.6.2<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br></pre></td></tr></tbody></table></figure></div></li><li>新建python3存放目录<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></tbody></table></figure></div></li><li>安装Python3<br>解压压缩包，进入解压目录，指定安装目录，安装Python3。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvJf  Python-3.6.2.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.2</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></div>安装Python3时，会自动安装pip。假如没有，需要自己手动安装。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install python-pip</span><br></pre></td></tr></tbody></table></figure></div></li><li>创建软链接<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></tbody></table></figure></div></li><li>安装完成，输入python3测试<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.6.2 (default, Mar  3 2019, 17:47:45)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="pipenv创建虚拟环境"><a href="#pipenv创建虚拟环境" class="headerlink" title="pipenv创建虚拟环境"></a>pipenv创建虚拟环境</h3><p>pipenv是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.7 / python3.6 ，但是如果都装到一起，经常会导致问题。pipenv能够用于创建独立的Python虚拟环境，多个Python相互独立，互不影响。<br>pipenv这个软件包可以让我们管理虚拟环境变得更加简单。不用再跑到某个目录下通过pipenv来创建虚拟环境，并且激活的时候也要跑到具体的目录下去激活。</p><ol><li><p>使用pip安装包前，先更新pip。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade pip</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装pipenv</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install pipenv</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在项目目录进行虚拟环境搭建<br>项目上传到服务器（推荐使用git的方式）<br>进入项目目录，创建该项目的虚拟环境</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install <span class="comment"># 需要进入项目的根目录</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><code>注意</code> 如果报：<code>Pipenv: Command Not Found</code> 的错误用 <code>$sudo pip install pipenv</code> 重新安装pipenv  </p></blockquote></li><li><p>安装uwsig<br>用pip安装 uwsgi库</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install uwsgi</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>激活虚拟环境并在项目下新建一个uwsgi.ini配置文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell   <span class="comment"># 激活虚拟环境</span></span><br><span class="line">$ touch uwsgi.ini  <span class="comment"># 新建文件</span></span><br><span class="line">$ vi uwsgi.ini   <span class="comment"># 写入内容</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">chdir = /home/flask/lesson # manage.py文件所在目录</span><br><span class="line">callable = app # 为你的项目实例命名，flask项目需要这一句 </span><br><span class="line">wsgi-file= lesson.py # flask文件名 运行文件</span><br><span class="line">processes = 4 # 进程数</span><br><span class="line">threads = 2 # 线程数</span><br><span class="line">master = true # 开启一个master进程监控项目运行</span><br><span class="line">socket = 127.0.0.1:5000 # uwsgi的端口。要与项目运行的端口一致</span><br><span class="line"># daemonize = /home/flask/lesson/logs/lesson.log</span><br><span class="line">daemonize = /tmp/flask/lesson.log # 日志输出目录</span><br><span class="line">touch-logreopen = /tmp/flask/.touchforlogrotate # 该文件变动时重新指定新的输出流到daemonize</span><br><span class="line">pidfile = uwsgi.pid</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>启动项目</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell  <span class="comment"># 进入项目虚拟环境</span></span><br><span class="line">$ uwsgi uwsgi.ini <span class="comment"># 启动命令（在lesson目录下）</span></span><br><span class="line">$ ps -ef | grep uwsgi  <span class="comment"># 查看进程是否启动成功</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>打开页面地址  服务器ip:5000 ，看看没有显示</p></li></ol><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="Nginx下载"><a href="#Nginx下载" class="headerlink" title="Nginx下载"></a>Nginx下载</h3><p>Nginx 不在默认的 yum 源中，可以使用 epel 或者官网的 yum 源，本例使用官网的 yum 源。</p><ol><li><p>添加nginx的yum源</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></tbody></table></figure></div><p>安装完 yum 源之后，可以查看一下。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum repolist</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">repo id                          repo name                          status</span><br><span class="line">base/7/x86_64                    CentOS-7 - Base                    9,911</span><br><span class="line">extras/7/x86_64                  CentOS-7 - Extras                    368</span><br><span class="line">nginx/x86_64                     nginx repo                           108</span><br><span class="line">updates/7/x86_64                 CentOS-7 - Updates                 1,041</span><br><span class="line">repolist: 11,428</span><br></pre></td></tr></tbody></table></figure></div><p>可以发现 nginx repo 已经安装到本机了。</p></li><li><p>yum 安装 Nginx</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install nginx</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>配置 Nginx 服务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> nginx <span class="comment"># 设置开机启动(两次)</span></span><br><span class="line">$ sudo systemctl start nginx <span class="comment"># 启动服务</span></span><br><span class="line">$ sudo systemctl stop nginx <span class="comment"># 停止服务</span></span><br><span class="line">$ sudo systemctl reload nginx <span class="comment"># 重新加载</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="nginx部署项目"><a href="#nginx部署项目" class="headerlink" title="nginx部署项目"></a>nginx部署项目</h3><ol><li><p>进入nginx目录</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>在conf.d中创建lesson.conf</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> conf.d/</span><br><span class="line">$ vi lesson.conf</span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;# listen 80;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;listen 443;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl on;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;server_name thxycn.xin;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;# 证书.pem的存放地址</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate /etc/nginx/cert/a.pem;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;# 证书.key的存放地址</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate_key /etc/nginx/cert/a.key;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_session_timeout 5m;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ssl_prefer_server_ciphers on;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;# 项目根目录&nbsp;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;root /home/flask/lesson;</span><br><span class="line">&nbsp;   # charset koi8-r;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;# access_log /var/log/nginx/lesson.log main;</span><br><span class="line">location / {</span><br><span class="line">&nbsp;&nbsp;&nbsp;     include uwsgi_params;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;    uwsgi_pass 127.0.0.1:5000;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;listen 80;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;server_name thxycn.xin;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;rewrite ^/(.*) https://$server_name$request_uri? permanent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>重启Nginx</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start nginx <span class="comment"># 启动服务</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><h3 id="uwsgi日志按天切割"><a href="#uwsgi日志按天切割" class="headerlink" title="uwsgi日志按天切割"></a>uwsgi日志按天切割</h3><ol><li><p>指定touch-logreope文件<br>在[uwsgi.ini]文件中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize = /tmp/flask/lesson.log # 日志输出目录</span><br><span class="line">touch-logreopen = /tmp/flask/.touchforlogrotate # 该文件变动时重新指定新的输出流到daemonize</span><br></pre></td></tr></tbody></table></figure></div><p>这里把uwsgi的日志放在了/tmp/flask/下，这里有个trick，既touch-logreopen参数监控的文件就是后面要定时执行的shell脚本本身。可以精简一个空白文件。</p></li><li><p>创建一个自动sh脚本<code>touchforlogrotate.sh</code>放在日志目录<code>/tmp/flask/</code>下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#获取当前目录</span><br><span class="line">DIR=`echo $(cd "$(dirname "$0")"; pwd)`</span><br><span class="line">sourcelogfile="${DIR}/lesson.log"</span><br><span class="line">touchfile="${DIR}/.touchforlogrotate"</span><br><span class="line">DATE=`date -d "yesterday" +"%Y%m%d"`</span><br><span class="line">#重命名后的文件</span><br><span class="line">destlogpath="${DIR}/lesson-${DATE}.log"</span><br><span class="line">mv $sourcelogfile $destlogpath</span><br><span class="line"># 更新文件时间戳</span><br><span class="line">touch $touchfile</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>crontab定时调用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * sh /tmp/flask/touchforlogrotate.sh</span><br></pre></td></tr></tbody></table></figure></div><p>重启uwsgi，每天0时自动执行时，会把昨天的lesson-${DATE}.log对应到昨天日期的log文件。随着最后脚本touch了自己，今天又是全新的lesson-${DATE}.log。至此，就可以实现简单的日志按日期分片啦。</p></li><li><p>重启项目</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv shell  <span class="comment"># 先进入项目根目录，再进入项目虚拟环境</span></span><br><span class="line">$ uwsgi uwsgi.ini <span class="comment"># 启动命令（在lesson目录下）</span></span><br><span class="line">$ ps -ef | grep uwsgi  <span class="comment"># 查看进程是否启动成功</span></span><br></pre></td></tr></tbody></table></figure></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://www.zeffon.cn/categories/Python/"/>
    
    
      <category term="python" scheme="https://www.zeffon.cn/tags/python/"/>
    
      <category term="nginx" scheme="https://www.zeffon.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Java非线性结构 - 树</title>
    <link href="https://www.zeffon.cn/posts/ee6021d7.html"/>
    <id>https://www.zeffon.cn/posts/ee6021d7.html</id>
    <published>2019-08-31T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.763Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Tree-树"><a href="#Tree-树" class="headerlink" title="Tree 树"></a>Tree 树</h2><p>二分搜索树（Binary Search Tree）是一种能够将链表插入的灵活性和有序数组查找的高效性结合起来的符号表实现。</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul><li>先介绍一下<strong><code>二叉树</code></strong>的性质</li></ul><ol><li>二叉树和链表一样，是动态数据结构。</li><li>二叉树具有<code>天然递归</code>结构</li><li>二叉树具有<code>唯一</code>根节点</li><li>二叉树每个节点最多有两个孩子</li><li>二叉树每个节点最多有一个父亲</li><li>没有孩子的节点称为<code>叶子节点</code></li><li>二叉树不一定是<code>满</code>的。一个节点也是二叉树、<code>空NULL</code>也是二叉树</li></ol><h3 id="二分搜索树"><a href="#二分搜索树" class="headerlink" title="二分搜索树"></a>二分搜索树</h3><ul><li><strong><code>二分搜索树</code></strong>是二叉树，不过二分搜索树需要满足如下要求:  </li></ul><ol><li>二分搜索树的每个节点的值必须<code>大于</code>其<code>左子树</code>的所有节点的值</li><li>二分搜索树的每个节点的值必须<code>小于</code>其<code>右子树</code>的所有节点的值</li></ol><ul><li><p>每一棵子树也是二分搜索树</p><blockquote><p><strong><code>注意</code></strong> 二分搜索树存储的元素必须有<code>可比较性</code>。所以二分搜索树的值的类型需要可以进行比较的  </p></blockquote></li><li><p>二分搜索树的最小值和最大值 : </p></li></ul><ol><li>最小值 - 一直向左走(最<code>左</code>那个节点的值)</li><li>最大值 - 一直向右走(最<code>右</code>那个节点的值)  </li></ol><ul><li>二分搜索树遍历 : </li></ul><ol><li>前序遍历  –  根节点 -&gt; 左节点 -&gt; 右节点</li><li>中序遍历  –  左节点 -&gt; 根节点 -&gt; 右节点</li><li>后序遍历  –  左节点 -&gt; 右节点 -&gt; 根节点</li></ol><blockquote><p><code>中序</code>遍历将各个节点从小到大排序，<code>后序遍历</code> – 释放内存<br>采用<code>栈</code>实现<code>前序遍历``非递归</code>的写法，需要借助栈来标记节点 – 根节点先入栈，后出栈，再把其右、左孩子分别入栈，先出栈左孩子，然后入栈刚刚出栈节点的右、左孩子。若要出栈<code>左节点</code>无左右孩子，则出栈<code>其父节点</code>的<code>右孩子</code>(也就是其兄弟节点-<code>右节点</code>)  </p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分搜索树的非递归前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNR</span><span class="params">()</span></span>{</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">        Node cur = stack.pop();</span><br><span class="line">        System.out.println(cur.e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(cur.right);</span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(cur.left);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>采用<code>队列</code>实现二分搜索树的<code>层序遍历</code> – 先根节点入队，出队。把其左、右分别入队。先出对左孩子，再入对其刚刚出队节点的左右孩子。若<code>左节点</code>无左右孩子，则将其父节点的右孩子出队（也就是其兄弟节点-<code>右节点</code>）。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分搜索树的层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty()){</span><br><span class="line">        Node cur = q.remove();</span><br><span class="line">        System.out.println(cur.e);</span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</span><br><span class="line">            q.add(cur.left);</span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</span><br><span class="line">            q.add(cur.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux搭建Git环境</title>
    <link href="https://www.zeffon.cn/posts/23356a94.html"/>
    <id>https://www.zeffon.cn/posts/23356a94.html</id>
    <published>2019-08-30T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><code>注</code></strong>  yum源仓库里的Git版本更新不及时，最新版本的Git是 1.8.3.1，但是官方最新版本已经到了<code>2+</code>。想要安装最新版本的的 Git，只能下载源码进行安装。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><ol><li>查看yum源仓库git信息<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum info git</span><br></pre></td></tr></tbody></table></figure></div></li><li>依赖库安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">$ yum install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></tbody></table></figure></div></li><li>卸载低版本的 Git<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove git</span><br></pre></td></tr></tbody></table></figure></div></li><li>下载新版的 Git 源码包<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir git <span class="comment"># 我放的了 /usr/local/git 的目录下了，git是我自己mkdir的目录</span></span><br><span class="line">$ <span class="built_in">cd</span> git</span><br><span class="line">$ wget https://github.com/git/git/archive/v2.9.2.tar.gz</span><br><span class="line">$ tar -xzvf v2.9.2.tar.gz</span><br></pre></td></tr></tbody></table></figure></div></li><li>编译安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> git-2.9.2</span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span>/git install</span><br></pre></td></tr></tbody></table></figure></div></li><li>添加到环境变量<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bash_profile  <span class="comment"># 如果没有vim，则安装vim工具 yum install vim</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/git/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile   <span class="comment"># 使配置立即生效</span></span><br><span class="line">$ git --version  <span class="comment"># 查看版本号</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>将git设置为默认路径(不然后面克隆时会报错)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/git/bin/git-upload-pack /usr/bin/git-upload-pack </span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/git/bin/git-receive-pack /usr/bin/git-receive-pack</span><br></pre></td></tr></tbody></table></figure></div></li></ol><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><ol><li>设置用户名和邮箱<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">'用户名'</span></span><br><span class="line">$ git config --global user.email <span class="string">'邮箱地址'</span></span><br><span class="line">$ git config --list <span class="comment"># 查看配置项</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>查看是否存在ssh keys<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">authorized_keys</span><br></pre></td></tr></tbody></table></figure></div></li></ol><p><strong>没出现<code>id_rsa 和 id_rsa.pub</code>,则表示需要创建一个ssh keys</strong></p><ol><li><p>创建新的ssh keys</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮箱"</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p><strong><code>注意</code></strong> 如果三次直接回车(<code>无密码</code>push和pull)，也可以第二次和第三次输入密码（push和pull操作需要<code>该密码</code>验证）</p></blockquote></li><li><p>测试一下连接</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T -v git@github.com</span><br><span class="line">You<span class="string">'ve successfully authenticated</span></span><br></pre></td></tr></tbody></table></figure></div></li><li><p>将<code>~/.ssh</code>中公钥<code>id_rsa.pub</code>的内容复制到各个平台(如github、gitee)的上公钥配置，实现<code>ssh方式</code>推送代码。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.zeffon.cn/categories/Git/"/>
    
    
      <category term="git" scheme="https://www.zeffon.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础线性结构</title>
    <link href="https://www.zeffon.cn/posts/bd6be497.html"/>
    <id>https://www.zeffon.cn/posts/bd6be497.html</id>
    <published>2019-08-29T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>线性结构是一个有序数据元素的集合。线性结构–数组、栈、队列、链表介绍</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a>Array 数组</h3><blockquote><p>Array是一种线性结构，把数据码成一排进行存放，只能存放<code>同一种类型</code>多个元素。</p></blockquote><ol><li>Java Array属于<code>静态数组</code></li><li>Array最大的优点：<code>快速查询</code>。例如：arr[1]</li><li>Array最好应用与<code>索引有语意</code>的场景。</li><li>但并非所有有语意的索引都适应于Array。有些索引如（身份证号）长度太长了导致空间被浪费。</li><li><table><thead><tr><th align="center">相关操作</th><th align="center">添加操作</th><th align="center">删除操作</th><th align="center">修改操作</th><th align="center">查找操作</th></tr></thead><tbody><tr><td align="center">复杂度</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">已知索引O(1);未知索引O(n)</td><td align="center">已知索引O(1);未知索引O(n)</td></tr></tbody></table></li></ol><h3 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack 栈"></a>Stack 栈</h3><blockquote><p>Satck是一种<code>先进后出</code>的线性结构。</p></blockquote><ol><li>相比数组，栈对应的操作是数组的子集，只能从一端添加元素，也只能从这一端取出元素。这一端称为<code>栈顶</code>。</li><li>栈只能在<code>栈顶</code>操作数据: 在<code>表尾</code>进行插入和删除操作。</li><li>栈的使用场景: 我们经常使用的<code>Undo</code>(撤销操作)、程序调用的系统栈、括号匹配。</li><li><table><thead><tr><th align="center">相关操作</th><th align="center">入栈</th><th align="center">出栈</th><th align="center">查看栈顶</th><th align="center">查看元素数量</th><th align="center">判断是否为空</th></tr></thead><tbody><tr><td align="center">复杂度</td><td align="center">O(1)均摊</td><td align="center">O(1)均摊</td><td align="center">O(1)</td><td align="center">O(1)</td><td align="center">O(1)</td></tr></tbody></table></li></ol><h3 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h3><blockquote><p>Queue是一种<code>先进先出</code>的线性结构。</p></blockquote><ol><li>相比数组，队列对应的操作是数组的子集。只能从一端<code>队尾</code>添加元素，只能从另一端<code>队首</code>取出元素。</li><li>队列的分类: <code>数组队列</code>、<code>循环队列</code></li><li><code>循环队列</code>必定是要<code>浪费掉一个空间</code>不能存储数据的</li><li><table><thead><tr><th align="center">循环队列</th><th align="center">队列为空</th><th align="center">队列满 (c表示队列的容量)</th></tr></thead><tbody><tr><td align="center">条件</td><td align="center">front == tail</td><td align="center">(tail + 1) % c == front</td></tr></tbody></table></li><li><table><thead><tr><th align="center">相关操作</th><th align="center">入队</th><th align="center">出队</th><th align="center">查看队首</th><th align="center">查看元素数量</th><th align="center">判断是否为空</th></tr></thead><tbody><tr><td align="center">复杂度</td><td align="center">O(1)均摊</td><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">O(1)</td><td align="center">O(1)</td></tr></tbody></table></li></ol><ul><li><strong><code>注意</code></strong>  数组队列<code>出列</code>的时间复杂度为<code>O(n)</code>,而循环队列均摊下来的复杂度为<code>O(1)</code>.</li></ul><h3 id="LinkedList-链表"><a href="#LinkedList-链表" class="headerlink" title="LinkedList 链表"></a>LinkedList 链表</h3><blockquote><p><code>最简单</code>、<code>真正</code>的动态数据结构，数据存储在节点<code>Node</code>中。</p></blockquote><ol><li><code>节点</code>: 把数据存储在一种单独数据结构中，一部分是数据，一部分是下一个节点，<code>最后</code>一个节点是<code>NULL</code>。</li><li>链表在添加和删除中，对数据操作的<code>顺序很重要</code>。在中间添加时，先将该元素的前一个节点找出来。</li><li>优点: <code>真正的动态数据</code>，不需要像Array、Stack、Queue处理固定容量的问题</li><li>缺点: 不适合用于索引<code>有语意</code>的情况，因为它<code>丧失</code>了<code>随机</code>访问数据的能力</li></ol><h3 id="Recursion-递归"><a href="#Recursion-递归" class="headerlink" title="Recursion 递归"></a>Recursion 递归</h3><blockquote><p><code>递归</code> : 本质上，将原来的问题，转化为更小的同一问题</p></blockquote><ul><li>递归<code>基本原则</code>: 所有递归问题基本上都可以分为以下<code>两部分</code></li></ul><ol><li>求解<code>最基本</code>问题（这个最基本问题是不能自动求解的，需要编写逻辑求解的）</li><li>把原问题转化成<code>更小</code>的问题（核心部分）</li></ol><ul><li>举例 : 数组求和<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sum(arr[<span class="number">0</span>...n-<span class="number">1</span>]) = arr[<span class="number">0</span>] + Sum(arr[<span class="number">1</span>...n-<span class="number">1</span>])   &lt;-  更小的同一问题(少了一个元素)</span><br><span class="line">Sum(arr[<span class="number">1</span>...n-<span class="number">1</span>]) = arr[<span class="number">1</span>] + Sum(arr[<span class="number">2</span>...n-<span class="number">1</span>])   &lt;-  更小的同一问题(少了一个元素)</span><br><span class="line">                            . . . . . .</span><br><span class="line">Sum(arr[n-<span class="number">1</span>...n-<span class="number">1</span>]) = arr[n-<span class="number">1</span>] + Sum([])   &lt;-  最基本的问题</span><br></pre></td></tr></tbody></table></figure></div></li><li>代码<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> sum(arr, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算arr[l...n)这个区间内所有数字的和</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(l == arr.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                        &lt;-  最基本的问题</span><br><span class="line">    <span class="keyword">return</span> arr[l] + sum(arr, l + <span class="number">1</span>);     &lt;-  更小的同一问题</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] nums = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>};</span><br><span class="line">    System.out.println(sum(nums));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.zeffon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://www.zeffon.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用</title>
    <link href="https://www.zeffon.cn/posts/c96ef7a4.html"/>
    <id>https://www.zeffon.cn/posts/c96ef7a4.html</id>
    <published>2019-08-28T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li>查看当前所连接的远程仓库 <code>git remote -v</code></li><li>去除当前的远程仓库 <code>git remote rm origin</code></li><li>添加远程仓库链接 <code>git remote add origin git@gitee.com:Zeffon/test.git</code></li><li>克隆远程仓库 <code>git clone git@gitee.com:Zeffon/test.git</code></li><li>暂存全部代码到缓冲区 <code>git add .</code></li><li>提交到本地仓库 <code>git commit -m "&lt;commint info&gt;"</code></li><li>推送到远程仓库 <code>git psuh origin master</code></li><li>拉取远程仓库代码 <code>git pull origin master</code></li></ul><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><ul><li>创建本地分支 dev  <code>$ git branch dev</code></li><li>切换本地分支 dev  <code>$ git checkout dev</code></li><li>相当于以上两条命令：创建 dev 分支并切换 <code>$ git checkout -b dev</code></li><li>查看本地分支 <code>$ git branch</code></li><li>删除本地分支 dev <code>$ git branch -d dev</code></li><li>融合分支dev到主支master <code>git merge --no-ff -m "提交信息" dev</code></li><li>推送分支 <code>git push origin local_branch:remote_branch</code></li></ul><h3 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h3><ul><li>在Git中打标签非常简单，首先，切换到需要打标签的分支上  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">$ git checkout master</span><br></pre></td></tr></tbody></table></figure></div></li><li>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></tbody></table></figure></div></li><li>可以用命令<code>git tag</code>查看所有标签  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></tbody></table></figure></div></li><li>比方说要对<code>add merge</code>这次提交打标签，它对应的<code>commit id</code>是<code>f52c633</code>，敲入命令  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.9 f52c633</span><br></pre></td></tr></tbody></table></figure></div> 再用命令git tag查看标签：  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></tbody></table></figure></div></li></ul><ul><li><p>推送标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code></p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">[new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>一次性推送全部尚未推送到远程的本地标签 <code>git push origin --tags</code></p></li><li><p>删除标签 <code>git tag -d v1.0</code></p></li><li><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag <span class="string">'v0.9'</span> (was f52c633)</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>然后，从远程删除。删除命令也是<code>push</code>，但是格式如下</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">[deleted]         v0.9</span><br></pre></td></tr></tbody></table></figure></div></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.zeffon.cn/categories/Git/"/>
    
    
      <category term="git" scheme="https://www.zeffon.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll环境的搭建</title>
    <link href="https://www.zeffon.cn/posts/8e7ed75b.html"/>
    <id>https://www.zeffon.cn/posts/8e7ed75b.html</id>
    <published>2019-08-27T04:00:00.000Z</published>
    <updated>2020-02-18T09:01:27.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Jekyll 是一个简单的，博客感知，静态站点生成器，与github的pages很相配。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装ruby环境-mac自带-ruby-v"><a href="#安装ruby环境-mac自带-ruby-v" class="headerlink" title="安装ruby环境(mac自带 ruby -v)"></a>安装ruby环境(mac自带 ruby -v)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install ruby</span><br></pre></td></tr></tbody></table></figure></div><h3 id="修改Jekyll版本"><a href="#修改Jekyll版本" class="headerlink" title="修改Jekyll版本"></a>修改Jekyll版本</h3><ul><li>mac安装jekyll 需要ruby大于2.4（mac自带2.3.x）<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line">$ brew install ruby</span><br></pre></td></tr></tbody></table></figure></div></li><li>添加到shell配置<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/opt/ruby/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure></div></li><li>查看路径和版本<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> ruby</span><br><span class="line">/usr/<span class="built_in">local</span>/opt/ruby/bin/ruby</span><br><span class="line">$ ruby -v</span><br><span class="line">ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="安装rbenv管理ruby版本"><a href="#安装rbenv管理ruby版本" class="headerlink" title="安装rbenv管理ruby版本"></a>安装rbenv管理ruby版本</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> </span><br><span class="line">$ brew install rbenv</span><br><span class="line">$ rbenv init</span><br><span class="line">$ curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash</span><br><span class="line">$ rbenv install 2.6.3 </span><br><span class="line">$ rbenv global 2.6.3 </span><br><span class="line">$ ruby -v</span><br></pre></td></tr></tbody></table></figure></div><h3 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h3><ul><li>查看源列表<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br></pre></td></tr></tbody></table></figure></div></li><li>将国外源移除，并添加国内源<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources --add https://gems.ruby-china.com/</span><br></pre></td></tr></tbody></table></figure></div></li><li>缓存国内源<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -u</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="全局安装Jekyll和Jekyll-bundler"><a href="#全局安装Jekyll和Jekyll-bundler" class="headerlink" title="全局安装Jekyll和Jekyll bundler"></a>全局安装Jekyll和Jekyll bundler</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install bundler</span><br><span class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin/ jekyll</span><br></pre></td></tr></tbody></table></figure></div><h3 id="博客创建与运行"><a href="#博客创建与运行" class="headerlink" title="博客创建与运行"></a>博客创建与运行</h3><ul><li>新建blog博客<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jekyll new blog</span><br></pre></td></tr></tbody></table></figure></div></li><li>安装bundle(依赖)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo bundle install</span><br></pre></td></tr></tbody></table></figure></div></li><li>启动项目<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bundle <span class="built_in">exec</span> jekyll server</span><br></pre></td></tr></tbody></table></figure></div>Now browse to <code>http://localhost:4000</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      Jekyll 是一个简单的，博客感知，静态站点生成器，与github的pages很相配。
    
    </summary>
    
    
      <category term="Note" scheme="https://www.zeffon.cn/categories/Note/"/>
    
    
      <category term="杂记" scheme="https://www.zeffon.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
